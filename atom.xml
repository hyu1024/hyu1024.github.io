<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-04T21:51:12.516Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>H Yu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Database</title>
    <link href="http://yoursite.com/2020/04/04/Database/"/>
    <id>http://yoursite.com/2020/04/04/Database/</id>
    <published>2020-04-04T21:12:27.002Z</published>
    <updated>2020-04-04T21:51:12.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><ul><li><strong>Introduction</strong><ul><li>The need for databases</li></ul></li><li><strong>SQL</strong><ul><li>Using SQL and basic SQL statements</li></ul></li><li><strong>Entity Relationships</strong><ul><li>ER Diagrams</li></ul></li><li><strong>Advanced SQL</strong><ul><li>Linking tables</li></ul></li><li><strong>Theoretical Background</strong></li></ul><p><strong>Assignment 1 will cover:</strong></p><ul><li><strong>SQL</strong><ul><li>Using SQL and basic SQL statements</li></ul></li><li><strong>Entity Relationships</strong><ul><li>ER Diagrams</li></ul></li></ul><p><strong>Assignment 2 will cover:</strong></p><ul><li>Advanced SQL<ul><li>Linking tables</li></ul></li><li>Theoretical Background</li></ul><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><h2 id="Why-Databases"><a href="#Why-Databases" class="headerlink" title="Why Databases"></a>Why Databases</h2><p><strong>A Typical Problem</strong></p><p>We often want to store data between program runs:</p><p>​    Passwords</p><p>​    The document you are typing</p><p>​        (You don’t want to lose it when you close the editor)</p><p><strong>Solutions:</strong></p><p>​    Save to a file!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XML, UML:</span><br><span class="line">  <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span></span><br><span class="line">      Module name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>A Typical Problem</strong></p><ul><li>Booking a flight<ul><li>You can book flights online.</li><li>Book them over the phone.</li><li>Book in person<ul><li>Two people can’t book the same seat.</li></ul></li></ul></li><li>Banking</li><li>Withdraw money using an ATM, cheque …</li><li>Pay with your card, book online …</li><li>Bank must not let you spend more than you have</li></ul><h2 id="What-Databases-Provide"><a href="#What-Databases-Provide" class="headerlink" title="What Databases Provide"></a>What Databases Provide</h2><ul><li>We need “Concurrent Access” from a large number of users</li><li>We need “Data Integrity”</li><li>High Throughput and Availability</li><li>Fault tolerance</li><li>Store large amounts of structured data.</li><li>Abstraction and use of popular methods</li></ul><ul><li>The solution to this is a database.</li><li>Allows you to store information<ul><li>Persistently</li><li>Retaining integrity</li><li>Retaining Structure</li></ul></li><li>Efficient implementation for high performance</li><li>Fault tolerance</li><li>Can access data using standard methods</li><li>In addition, Databases provide Abstraction and allow for the use of bespoken methods of access (e.g. SQL)</li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><strong>SQL:</strong> Structured Query Language  /ˈsiːkwəl/ “sequel”</p><p>Different Database Management Systems (DBMS) make use of SQL</p><p>​    E.g. MySQL,</p><h2 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h2><p>We now understand why we need Databases and some of the important functionality that they must provide.</p><p><strong>Background: Basic Set Theory</strong></p><h1 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h1><p>A set is a collection of elements. The elements can be anything.</p><p>You might hear “the set of all students”. Because sets are collections: <strong>No ordering No repeats</strong></p><p>If <strong>set A = B</strong> then they both have the same elements.</p><p>Elements of a set are often referred to as follows:</p><script type="math/tex; mode=display">a \in A   (Element~of)</script><p>Sets can also be written as follows:</p><script type="math/tex; mode=display">\{1,~2,~3\}</script><p>This is a set that contains the three numbers.</p><p>​        <script type="math/tex">\{1,~2,~3,~2,~1\}</script>  is NOT a set.</p><p>The <strong>universal set</strong> is a set which contains all objects, including itself. Denoted by <script type="math/tex">U</script></p><p>The <strong>null set</strong> is the set that contains no elements. Denoted by <script type="math/tex">\Phi</script> or <script type="math/tex">\{ ~ \}</script>.</p><p>Set A is said to be a <strong>subset</strong> of B if every element in A is contained in B. </p><p>​    Written <script type="math/tex">A \subseteq B</script></p><p>​    So <script type="math/tex">\{1,~2\}</script> is a subset of <script type="math/tex">\{1,~2,~3,~4,~5\}</script> </p><p>Every set is a subset of itself.</p><p>Set A is said to be a <strong>proper subset</strong> of B if every element in A is contained in B AND <script type="math/tex">A \neq B</script>.</p><p><strong>WARNING:</strong></p><p>​    <script type="math/tex">\subset</script> is NOT proper subset </p><p>​    So <script type="math/tex">A \subset A</script> is true </p><p>​    <script type="math/tex">\subset</script> is equivalent to <script type="math/tex">\subseteq</script></p><p>The Union of two sets A and B is the set that contains all the elements from A and B. </p><p>Remember the result is a set so there can’t be repeated elements </p><p>​    Written <script type="math/tex">A \cup B</script>     </p><p>​     <script type="math/tex">\{1,~2,~3\} \cup \{3,~4,~5\} = \{1,~2,~3,~4,~5\}</script></p><p>The Intersection of two sets A and B is the set that contains elements from BOTH A and B. 💡</p><p>​    Written <script type="math/tex">A \cap B</script> </p><p>​    <script type="math/tex">\{1,~2,~3\} \cap \{3,~4,~5\} = \{3\}</script></p><p>The Set difference between A and B is the set of all members in A that are not in B</p><p>​    Written <script type="math/tex">A \backslash B</script> </p><p>If B is a subset of A, this is called the complement of A in B and is written:</p><p>​    <script type="math/tex">A^c</script> if <script type="math/tex">B</script> is <script type="math/tex">U</script> (Universal set)</p><p>The Symmetric difference of sets A and B, consists of the set containing elements contained in exactly one of A or B.</p><p>​    Written <script type="math/tex">A \bigtriangleup B</script> or <script type="math/tex">A \ominus B</script></p><p>​    <script type="math/tex">\{1,~2,~3\}\bigtriangleup \{3,~4,~5\} = \{1,~2,~4,~5\}</script></p><p>​    Equal to: <script type="math/tex">(A \cup B) \backslash(A \cap B)</script> or <script type="math/tex">(A \backslash B) \cup (B \backslash A).</script></p><p>An ordered pair is a pair of elements whose order is maintained. </p><p>​    Written <script type="math/tex">(a,~b)</script> </p><p>A tuple is a list of elements: <script type="math/tex">(a,~b,~c,~d ... )</script></p><p>An <strong>n-tuple</strong> is a tuple with n elements</p><p>The Cartesian product of A and B, is the set whose members are all possible ordered pairs (a, b) where a is a member of A and b is a member of B.</p><p>​    Written<script type="math/tex">A \times B</script></p><p>​    <script type="math/tex">\{1,~2\} \times \{a,~b\} = \{(1,~a), (1,~b), (2,~a), (2,~b)\}</script></p><h1 id="SQL-Introduction"><a href="#SQL-Introduction" class="headerlink" title="SQL Introduction"></a>SQL Introduction</h1><p>Supported by all major Databa se Management Systems</p><p><strong>Standardised</strong> - Provides a standard framework for interaction</p><p><strong>Declarative</strong> - Takes a query and figures out the most efficient way of extracting the results.</p><h2 id="SQL-Tables"><a href="#SQL-Tables" class="headerlink" title="SQL Tables"></a>SQL Tables</h2><p>SQL works on “Tables”. </p><p>A table is looks as follows:</p><div class="table-container"><table><thead><tr><th>ID</th><th>Name</th><th>Mark</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>90</td></tr><tr><td>2</td><td>Bob</td><td>80</td></tr><tr><td>3</td><td>Charlotte</td><td>81</td></tr><tr><td>4</td><td>David</td><td>70</td></tr></tbody></table></div><p><img src="/2020/04/04/Database/01.png" style="zoom: 33%;"></p><p><img src="/2020/04/04/Database/02.png" style="zoom:33%;"></p><h2 id="SQL-Tables-vs-Relations"><a href="#SQL-Tables-vs-Relations" class="headerlink" title="SQL Tables vs Relations"></a>SQL Tables vs Relations</h2><p><strong>Relations</strong> are theoretical constructs that have certain properties</p><p><strong>Tables</strong> are how we “implement” or realise this construct.</p><p><strong>Differences:</strong></p><ul><li><p>Tables can have duplicate rows, relations cannot (think set)</p></li><li><p>The way in which we store data implies that tables are ordered in some way, relations are not (again, think set)</p></li></ul><h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p>The <strong>schema</strong> of a table is the logical definition of that table.</p><p><strong>It defines</strong> how many columns (attributes) there are, what they are named, what kind of information a column can store, …</p><h2 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h2><p>There are two parts to the Language:</p><ul><li>Data Definition Language (DDL) </li><li>Create and Delete “tables”</li><li>Data Manipulation Language (DML) <ul><li>Query information </li><li>Insert information </li><li>Update </li><li>Delete</li></ul></li></ul><p>Other commands include “index”, “view”, …</p><h2 id="SQL-Select"><a href="#SQL-Select" class="headerlink" title="SQL - Select"></a>SQL - Select</h2><p>Query Table for information</p><p>Structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select A1, A2, A3, ...    -- &lt;-- What</span><br><span class="line">    from    R1, R2, R3, ... -- &lt;-- From these relations</span><br><span class="line">    where condition ;    -- &lt;--with this condition</span><br></pre></td></tr></table></figure><p>SQL returns a schema (for a table) and so a table which is defined by the attributes selected in the select statement.</p><h2 id="SQLBolt"><a href="#SQLBolt" class="headerlink" title="SQLBolt"></a><strong>SQLBolt</strong></h2><div class="table-container"><table><thead><tr><th>Operator</th><th>condition</th><th>Example</th></tr></thead><tbody><tr><td>=</td><td>Case sensitive exact string comparison (notice the single equals)</td><td>col_name = “abc”</td></tr><tr><td>!= or &lt;&gt;</td><td>Case sensitive exact string inequality comparison</td><td>col_name != “abcd”</td></tr><tr><td>LIKE</td><td>Case sensitive exact string comparison</td><td>col_name LIKE “ABC”</td></tr><tr><td>NOT LIKE</td><td>Case sensitive exact string inequality comparison</td><td>col_name LIKE “ABCD”</td></tr><tr><td>%</td><td>Use anywhere in a string to match a sequence of zero or More characters (only with LIKE or NOT LIKE)</td><td>col_name LIKE “%AT%” (match “AT”, “ATTIC”, “CAT”, or even “BATS”)</td></tr><tr><td>_</td><td>Use anywhere in a string to match a single character (only with LIKE or NOT LIKE)</td><td>col_name LIKE “AN_” (match “AND”, but not “AN”)</td></tr><tr><td>IN (…)</td><td>String exists in a list</td><td>col_name IN (“A”, “B”, “C”)</td></tr><tr><td>NOT IN (…)</td><td>String does not exists in a list</td><td>col_name NOT IN (“D”, “E”, “F”)</td></tr></tbody></table></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*Select query with order results*&#x2F;</span><br><span class="line">SELECT column, another_column, ...</span><br><span class="line">FROM mytable</span><br><span class="line">WHERE condition(s)</span><br><span class="line">ORDER BY column ASC &#x2F; DESC;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*Select query with limited rows*&#x2F;</span><br><span class="line">SELECT column, another_column, ...</span><br><span class="line">FROM mytable</span><br><span class="line">WHERE condition(s)</span><br><span class="line">ORDER BY column ASC &#x2F; DESC</span><br><span class="line">LIMIT num_limit OFFFSET num_offset;</span><br></pre></td></tr></table></figure><h2 id="SQL-Clarifications"><a href="#SQL-Clarifications" class="headerlink" title="SQL - Clarifications"></a>SQL - Clarifications</h2><p>Notice how the “description” of tables <strong>is a table</strong></p><center>CITY</center><div class="table-container"><table><thead><tr><th style="text-align:center">Field</th><th style="text-align:center">Type</th></tr></thead><tbody><tr><td style="text-align:center">ID</td><td style="text-align:center">NUMBER</td></tr><tr><td style="text-align:center">NAME</td><td style="text-align:center">VARCHAR2 (17)</td></tr><tr><td style="text-align:center">COUNTRYCODE</td><td style="text-align:center">VARCHAR2 (3)</td></tr><tr><td style="text-align:center">DISTRICT</td><td style="text-align:center">VARCHAR2 (20)</td></tr><tr><td style="text-align:center">POPULATION</td><td style="text-align:center">NUMBER</td></tr></tbody></table></div><p><strong>These rows represent the columns in the described table</strong></p><p>This allows you to write queries based on tables whose structure you do not yet know.</p><h1 id="SQL-Syntax"><a href="#SQL-Syntax" class="headerlink" title="SQL - Syntax"></a>SQL - Syntax</h1><h2 id="The-SQL-SELECT-Statement"><a href="#The-SQL-SELECT-Statement" class="headerlink" title="The SQL SELECT Statement"></a>The SQL SELECT Statement</h2><p>The SELECT statement is used to select data from a database.</p><p>The data returned is stored in a result table, called the result-set.</p><p><strong>SELECT Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure><p>Here, column1, column2, … are the field names of the table you want to select data from. If you want to select all the fields available in the table, use the following syntax:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name;</span><br></pre></td></tr></table></figure><h2 id="The-SQL-SELECT-DISTINCT-Statement"><a href="#The-SQL-SELECT-DISTINCT-Statement" class="headerlink" title="The SQL SELECT DISTINCT Statement"></a>The SQL SELECT DISTINCT Statement</h2><p>The SELECT DISTINCT statement is used to return only distinct (different) values.</p><p>Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.</p><p><strong>SELECT DISTINCT Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT column1, column2, ...</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure><h2 id="The-SQL-WHERE-Clause"><a href="#The-SQL-WHERE-Clause" class="headerlink" title="The SQL WHERE Clause"></a>The SQL WHERE Clause</h2><p>The WHERE clause is used to filter records.</p><p>The WHERE clause is used to extract only those records that fulfill a specified condition.</p><p><strong>WHERE Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *column1*, *column2, ...*</span><br><span class="line">FROM *table_name*</span><br><span class="line">WHERE *condition*;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The WHERE clause is not only used in SELECT statement, it is also used in UPDATE, DELETE statement, etc.!</p><h2 id="The-SQL-AND-OR-and-NOT-Operators"><a href="#The-SQL-AND-OR-and-NOT-Operators" class="headerlink" title="The SQL AND, OR and NOT Operators"></a>The SQL AND, OR and NOT Operators</h2><p>The WHERE clause can be combined with AND, OR, and NOT operators.</p><p>The AND and OR operators are used to filter records based on more than one condition:</p><ul><li>The AND operator displays a record if all the conditions separated by AND are TRUE.</li><li>The OR operator displays a record if any of the conditions separated by OR is TRUE.</li></ul><p>The NOT operator displays a record if the condition(s) is NOT TRUE.</p><p><strong>AND Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *column1*, *column2, ...*</span><br><span class="line">FROM *table_name*</span><br><span class="line">WHERE *condition1* AND *condition2* AND *condition3 ...*;</span><br></pre></td></tr></table></figure><p><strong>OR Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *column1*, *column2, ...*</span><br><span class="line">FROM *table_name*</span><br><span class="line">WHERE *condition1* OR *condition2* OR *condition3 ...*;</span><br></pre></td></tr></table></figure><p><strong>NOT Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *column1*, *column2, ...*</span><br><span class="line">FROM *table_name*</span><br><span class="line">WHERE NOT *condition*;</span><br></pre></td></tr></table></figure><h2 id="The-SQL-ORDER-BY-Keyword"><a href="#The-SQL-ORDER-BY-Keyword" class="headerlink" title="The SQL ORDER BY Keyword"></a>The SQL ORDER BY Keyword</h2><p>The ORDER BY keyword is used to sort the result-set in ascending or descending order.</p><p>The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.</p><p><strong>ORDER BY Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *column1*, *column2, ...*</span><br><span class="line">FROM *table_name*</span><br><span class="line">ORDER BY *column1, column2, ...* ASC|DESC;</span><br></pre></td></tr></table></figure><p><strong>NOTE:</strong> When you sort by more than one column, SQL will return results first sorted by column1 and when there are equal values in column1, column2 is used. </p><h2 id="SQL-NULL-Values"><a href="#SQL-NULL-Values" class="headerlink" title="SQL NULL Values"></a>SQL NULL Values</h2><p>A field with a NULL value is a field with no value.</p><p>If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.</p><p><strong>Note:</strong> A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!</p><p><strong>It is not possible</strong> to test for NULL values with comparison operators, such as =, &lt;, or &lt;&gt;.</p><p><strong>We will have to use the IS NULL and IS NOT NULL operators instead.</strong></p><p><strong>IS NULL Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_names</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name IS NULL;</span><br></pre></td></tr></table></figure><p><strong>IS NOT NULL Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_names</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name IS NOT NULL;</span><br></pre></td></tr></table></figure><h2 id="The-SQL-SELECT-TOP-Clause"><a href="#The-SQL-SELECT-TOP-Clause" class="headerlink" title="The SQL SELECT TOP Clause"></a>The SQL SELECT TOP Clause</h2><p>The SELECT TOP clause is used to specify the number of records to return.</p><p>The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.</p><p><strong>Note:</strong> Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses ROWNUM.</p><p><strong>SQL Server / MS Access Syntax:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT TOP number|percent column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><p><strong>MySQL Syntax:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition</span><br><span class="line">LIMIT number;</span><br></pre></td></tr></table></figure><p><strong>Oracle Syntax:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE ROWNUM &lt;&#x3D; number;</span><br></pre></td></tr></table></figure><h2 id="The-SQL-MIN-and-MAX-Functions"><a href="#The-SQL-MIN-and-MAX-Functions" class="headerlink" title="The SQL MIN() and MAX() Functions"></a>The SQL MIN() and MAX() Functions</h2><p>The MIN() function returns the smallest value of the selected column.</p><p>The MAX() function returns the largest value of the selected column.</p><p><strong>MIN() Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><p><strong>MAX() Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><h2 id="The-SQL-COUNT-AVG-and-SUM-Functions"><a href="#The-SQL-COUNT-AVG-and-SUM-Functions" class="headerlink" title="The SQL COUNT(), AVG() and SUM() Functions"></a>The SQL COUNT(), AVG() and SUM() Functions</h2><p>The COUNT() function returns the number of rows that matches a specified criteria.</p><p>The AVG() function returns the average value of a numeric column.</p><p>The SUM() function returns the total sum of a numeric column.</p><p><strong>COUNT() Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><p><strong>AVG() Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><p><strong>SUM() Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><h2 id="The-SQL-LIKE-Operator"><a href="#The-SQL-LIKE-Operator" class="headerlink" title="The SQL LIKE Operator"></a>The SQL LIKE Operator</h2><p>The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.</p><p>There are two wildcards often used in conjunction with the LIKE operator:</p><ul><li>% - The percent sign represents zero, one, or multiple characters</li><li>_ - The underscore represents a single character</li></ul><p><strong>Note:</strong> MS Access uses an asterisk (*) instead of the percent sign (%), and a question mark (?) instead of the underscore (_).</p><p>The percent sign and the underscore can also be used in combinations!</p><p><strong>LIKE Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE columnN LIKE pattern;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> You can also combine any number of conditions using AND or OR operators.</p><p>Here are some examples showing different LIKE operators with ‘%’ and ‘_’ wildcards:</p><div class="table-container"><table><thead><tr><th style="text-align:left">LIKE Operator</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">WHERE CustomerName LIKE ‘a%’</td><td style="text-align:left">Finds any values that start with “a”</td></tr><tr><td style="text-align:left">WHERE CustomerName LIKE ‘%a’</td><td style="text-align:left">Finds any values that end with “a”</td></tr><tr><td style="text-align:left">WHERE CustomerName LIKE ‘%or%’</td><td style="text-align:left">Finds any values that have “or” in any position</td></tr><tr><td style="text-align:left">WHERE CustomerName LIKE ‘_r%’</td><td style="text-align:left">Finds any values that have “r” in the second position</td></tr><tr><td style="text-align:left">WHERE CustomerName LIKE ‘a__%’</td><td style="text-align:left">Finds any values that start with “a” and are at least 3 characters in length</td></tr><tr><td style="text-align:left">WHERE ContactName LIKE ‘a%o’</td><td style="text-align:left">Finds any values that start with “a” and ends with “o”</td></tr></tbody></table></div><h2 id="SQL-Wildcard-Characters"><a href="#SQL-Wildcard-Characters" class="headerlink" title="SQL Wildcard Characters"></a>SQL Wildcard Characters</h2><p>A wildcard character is used to substitute one or more characters in a string.</p><p>Wildcard characters are used with the SQL LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.</p><p><strong>Wildcard Characters in MS Access</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">Symbol</th><th style="text-align:left">Description</th><th style="text-align:left">Example</th></tr></thead><tbody><tr><td style="text-align:left">*</td><td style="text-align:left">Represents zero or more characters</td><td style="text-align:left">bl* finds bl, black, blue, and blob</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">Represents a single character</td><td style="text-align:left">h?t finds hot, hat, and hit</td></tr><tr><td style="text-align:left">[]</td><td style="text-align:left">Represents any single character within the brackets</td><td style="text-align:left">h[oa]t finds hot and hat, but not hit</td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">Represents any character not in the brackets</td><td style="text-align:left">h[!oa]t finds hit, but not hot and hat</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">Represents a range of characters</td><td style="text-align:left">c[a-b]t finds cat and cbt</td></tr><tr><td style="text-align:left">#</td><td style="text-align:left">Represents any single numeric character</td><td style="text-align:left">2#5 finds 205, 215, 225, 235, 245, 255, 265, 275, 285, and 295</td></tr></tbody></table></div><p><strong>Wildcard Characters in SQL Server</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">Symbol</th><th style="text-align:left">Description</th><th style="text-align:left">Example</th></tr></thead><tbody><tr><td style="text-align:left">%</td><td style="text-align:left">Represents zero or more characters</td><td style="text-align:left">bl% finds bl, black, blue, and blob</td></tr><tr><td style="text-align:left">_</td><td style="text-align:left">Represents a single character</td><td style="text-align:left">h_t finds hot, hat, and hit</td></tr><tr><td style="text-align:left">[]</td><td style="text-align:left">Represents any single character within the brackets</td><td style="text-align:left">h[oa]t finds hot and hat, but not hit</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">Represents any character not in the brackets</td><td style="text-align:left">h[ ^oa]t finds hit, but not hot and hat</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">Represents a range of characters</td><td style="text-align:left">c[a-b]t finds cat and cbt</td></tr></tbody></table></div><p>All the wildcards can also be used in combinations!</p><p>Here are some examples showing different LIKE operators with ‘%’ and ‘_’ wildcards:</p><div class="table-container"><table><thead><tr><th style="text-align:left">LIKE Operator</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">WHERE CustomerName LIKE ‘a%’</td><td style="text-align:left">Finds any values that starts with “a”</td></tr><tr><td style="text-align:left">WHERE CustomerName LIKE ‘%a’</td><td style="text-align:left">Finds any values that ends with “a”</td></tr><tr><td style="text-align:left">WHERE CustomerName LIKE ‘%or%’</td><td style="text-align:left">Finds any values that have “or” in any position</td></tr><tr><td style="text-align:left">WHERE CustomerName LIKE ‘_r%’</td><td style="text-align:left">Finds any values that have “r” in the second position</td></tr><tr><td style="text-align:left"><strong>WHERE CustomerName LIKE ‘a_%_%’</strong></td><td style="text-align:left">Finds any values that starts with “a” and are at least 3 characters in length</td></tr><tr><td style="text-align:left">WHERE ContactName LIKE ‘a%o’</td><td style="text-align:left">Finds any values that starts with “a” and ends with “o”</td></tr></tbody></table></div><ul><li><strong>Using the % Wildcard</strong></li></ul><p>The following SQL statement selects all customers with a City starting with “ber”:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers</span><br><span class="line">WHERE City LIKE &#39;ber%&#39;;</span><br></pre></td></tr></table></figure><ul><li><strong>Using the _ Wildcard</strong></li></ul><p>The following SQL statement selects all customers with a City starting with any character, followed by “ondon”:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers</span><br><span class="line">WHERE City LIKE &#39;_ondon&#39;;</span><br></pre></td></tr></table></figure><ul><li><strong>Using the [charlist] Wildcard</strong></li></ul><p>The following SQL statement selects all customers with a City starting with “b”, “s”, or “p”:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers</span><br><span class="line">WHERE City LIKE &#39;[bsp]%&#39;;</span><br></pre></td></tr></table></figure><ul><li><strong>Using the [!charlist] Wildcard</strong></li></ul><p>The two following SQL statements select all customers with a City NOT starting with “b”, “s”, or “p”:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers</span><br><span class="line">WHERE City LIKE &#39;[!bsp]%&#39;;</span><br></pre></td></tr></table></figure><h2 id="The-SQL-BETWEEN-Operator"><a href="#The-SQL-BETWEEN-Operator" class="headerlink" title="The SQL BETWEEN Operator"></a>The SQL BETWEEN Operator</h2><p>The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.</p><p>The BETWEEN operator is inclusive: <strong>begin and end values are included.</strong> </p><p><strong>BETWEEN Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name BETWEEN value1 AND value2;</span><br></pre></td></tr></table></figure><h2 id="SQL-Aliases"><a href="#SQL-Aliases" class="headerlink" title="SQL Aliases"></a>SQL Aliases</h2><p>SQL aliases are used to give a table, or a column in a table, a temporary name.</p><p>Aliases are often used to make column names more readable.</p><p>An alias only exists for the duration of the query.</p><p><strong>Alias Column Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name AS alias_name</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure><p><strong>Alias Table Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name AS alias_name;</span><br></pre></td></tr></table></figure><h2 id="The-SQL-GROUP-BY-Statement"><a href="#The-SQL-GROUP-BY-Statement" class="headerlink" title="The SQL GROUP BY Statement"></a>The SQL GROUP BY Statement</h2><p>The GROUP BY statement groups rows that have the same values into summary rows, like “find the number of customers in each country”.</p><p>The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.</p><p><strong>GROUP BY Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_na me</span><br><span class="line">WHERE condition</span><br><span class="line">GROUP BY column_name(s)</span><br><span class="line">ORDER BY column_name(s);</span><br></pre></td></tr></table></figure><h2 id="The-SQL-HAVING-Clause"><a href="#The-SQL-HAVING-Clause" class="headerlink" title="The SQL HAVING Clause"></a>The SQL HAVING Clause</h2><p>The <strong>HAVING clause</strong> was added to SQL because the WHERE keyword could not be used with aggregate functions.</p><p><strong>HAVING Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition</span><br><span class="line">GROUP BY column_name(s)</span><br><span class="line">HAVING condition</span><br><span class="line">ORDER BY column_name(s);</span><br></pre></td></tr></table></figure><h2 id="The-SQL-CASE-Statement"><a href="#The-SQL-CASE-Statement" class="headerlink" title="The SQL CASE Statement"></a>The SQL CASE Statement</h2><p>The CASE statement goes through conditions and returns a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause. </p><p>If there is no ELSE part and no conditions are true, it returns NULL.</p><p><strong>CASE Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">    WHEN condition1 THEN result1</span><br><span class="line">    WHEN condition2 THEN result2</span><br><span class="line">    WHEN conditionN THEN resultN</span><br><span class="line">    ELSE result</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><p><strong>Demo Database</strong></p><p>Below is a selection from the “OrderDetails” table in the Northwind sample database:</p><div class="table-container"><table><thead><tr><th style="text-align:left">OrderDetailID</th><th style="text-align:left">OrderID</th><th style="text-align:left">ProductID</th><th style="text-align:left">Quantity</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">10248</td><td style="text-align:left">11</td><td style="text-align:left">12</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">10248</td><td style="text-align:left">42</td><td style="text-align:left">10</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">10248</td><td style="text-align:left">72</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">10249</td><td style="text-align:left">14</td><td style="text-align:left">9</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">10249</td><td style="text-align:left">51</td><td style="text-align:left">40</td></tr></tbody></table></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT OrderID, Quantity,</span><br><span class="line">CASE</span><br><span class="line">    WHEN Quantity &gt; 30 THEN &quot;The quantity is greater than 30&quot;</span><br><span class="line">    WHEN Quantity &#x3D; 30 THEN &quot;The quantity is 30&quot;</span><br><span class="line">    ELSE &quot;The quantity is under 30&quot;</span><br><span class="line">END AS QuantityText</span><br><span class="line">FROM OrderDetails;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">OrderID</td><td style="text-align:left">Quantity</td><td style="text-align:left">QuantityText</td></tr><tr><td style="text-align:left">10248</td><td style="text-align:left">12</td><td style="text-align:left">The quantity is under 30</td></tr><tr><td style="text-align:left">10248</td><td style="text-align:left">10</td><td style="text-align:left">The quantity is under 30</td></tr><tr><td style="text-align:left">10248</td><td style="text-align:left">5</td><td style="text-align:left">The quantity is under 30</td></tr><tr><td style="text-align:left">10249</td><td style="text-align:left">9</td><td style="text-align:left">The quantity is under 30</td></tr><tr><td style="text-align:left">10249</td><td style="text-align:left">40</td><td style="text-align:left">The quantity is greater than 30</td></tr><tr><td style="text-align:left">10250</td><td style="text-align:left">10</td><td style="text-align:left">The quantity is under 30</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">…</td><td style="text-align:left">…</td></tr></tbody></table></div><h2 id="SQL-Stored-Procedures-for-SQL-Server"><a href="#SQL-Stored-Procedures-for-SQL-Server" class="headerlink" title="SQL Stored Procedures for SQL Server"></a>SQL Stored Procedures for SQL Server</h2><p>A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.</p><p>So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.</p><p>You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.</p><p><strong>Stored Procedure Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procedure_name</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">sql_statement</span><br><span class="line"><span class="keyword">GO</span>;</span><br></pre></td></tr></table></figure><p><strong>Execute a Stored Procedure</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC procedure_name;</span><br></pre></td></tr></table></figure><h2 id="SQL-Comments"><a href="#SQL-Comments" class="headerlink" title="SQL Comments"></a>SQL Comments</h2><p>Comments are used to explain sections of SQL statements, or to prevent execution of SQL statements.</p><p><strong>Note: The examples in this chapter will not work in Firefox and Microsoft Edge!</strong></p><p>Comments are not supported in Microsoft Access databases. Firefox and Microsoft Edge are using Microsoft Access database in our examples.</p><p><strong>Single Line Comments</strong></p><ul><li>Single line comments start with —.</li><li>Any text between — and the end of the line will be ignored (will not be executed).</li></ul><p>The following example uses a single-line comment as an explanation:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- Select all:</span><br><span class="line">SELECT * FROM Customers;</span><br></pre></td></tr></table></figure><p>The following example uses a single-line comment to ignore the end of a line:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Customers -- WHERE City&#x3D;&#39;Berlin&#39;;</span><br></pre></td></tr></table></figure><p>The following example uses a single-line comment to ignore a statement:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- SELECT * FROM Customers;</span><br><span class="line">SELECT * FROM Products;</span><br></pre></td></tr></table></figure><h1 id="SQL-Data-Types"><a href="#SQL-Data-Types" class="headerlink" title="SQL - Data Types"></a>SQL - Data Types</h1><p>Note that each column or attribute has a datatype. </p><p>Some of these are numeric, text and date.</p><p><strong>Specified by SQL:</strong> </p><ul><li>bigint, bit, bit varying, boolean, char, character varying, character, varchar, date, double precision, integer, interval, numeric, decimal, real, smallint, time (with or without time zone), timestamp (with or without time zone), xml.</li></ul><p><strong>You need to be aware of:</strong></p><ul><li>character, varchar, numeric, float, double time, timestamp</li></ul><h1 id="MySQL-Functions"><a href="#MySQL-Functions" class="headerlink" title="MySQL Functions"></a>MySQL Functions</h1><p>MySQL has many built-in functions.</p><p>This reference contains string, numeric, date, and some advanced functions in MySQL.</p><h2 id="MySQL-String-Functions"><a href="#MySQL-String-Functions" class="headerlink" title="MySQL String Functions"></a>MySQL String Functions</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">ASCII</td><td style="text-align:left">Returns the ASCII value for the specific character</td></tr><tr><td style="text-align:left">CHAR_LENGTH</td><td style="text-align:left">Returns the length of a string (in characters)</td></tr><tr><td style="text-align:left">CHARACTER_LENGTH</td><td style="text-align:left">Returns the length of a string (in characters)</td></tr><tr><td style="text-align:left">CONCAT</td><td style="text-align:left">Adds two or more expressions together</td></tr><tr><td style="text-align:left">CONCAT_WS</td><td style="text-align:left">Adds two or more expressions together with a separator</td></tr><tr><td style="text-align:left">FIELD</td><td style="text-align:left">Returns the index position of a value in a list of values</td></tr><tr><td style="text-align:left">FIND_IN_SET</td><td style="text-align:left">Returns the position of a string within a list of strings</td></tr><tr><td style="text-align:left">FORMAT</td><td style="text-align:left">Formats a number to a format like “#,###,###.##”, rounded to a specified number of decimal places</td></tr><tr><td style="text-align:left">INSERT</td><td style="text-align:left">Inserts a string within a string at the specified position and for a certain number of characters</td></tr><tr><td style="text-align:left">INSTR</td><td style="text-align:left">Returns the position of the first occurrence of a string in another string</td></tr><tr><td style="text-align:left">LCASE</td><td style="text-align:left">Converts a string to lower-case</td></tr><tr><td style="text-align:left">LEFT</td><td style="text-align:left">Extracts a number of characters from a string (starting from left)</td></tr><tr><td style="text-align:left">LENGTH</td><td style="text-align:left">Returns the length of a string (in bytes)</td></tr><tr><td style="text-align:left">LOCATE</td><td style="text-align:left">Returns the position of the first occurrence of a substring in a string</td></tr><tr><td style="text-align:left">LOWER</td><td style="text-align:left">Converts a string to lower-case</td></tr><tr><td style="text-align:left">LPAD</td><td style="text-align:left">Left-pads a string with another string, to a certain length</td></tr><tr><td style="text-align:left">LTRIM</td><td style="text-align:left">Removes leading spaces from a string</td></tr><tr><td style="text-align:left">MID</td><td style="text-align:left">Extracts a substring from a string (starting at any position)</td></tr><tr><td style="text-align:left">POSITION</td><td style="text-align:left">Returns the position of the first occurrence of a substring in a string</td></tr><tr><td style="text-align:left">REPEAT</td><td style="text-align:left">Repeats a string as many times as specified</td></tr><tr><td style="text-align:left">REPLACE</td><td style="text-align:left">Replaces all occurrences of a substring within a string, with a new substring</td></tr><tr><td style="text-align:left">REVERSE</td><td style="text-align:left">Reverses a string and returns the result</td></tr><tr><td style="text-align:left">RIGHT</td><td style="text-align:left">Extracts a number of characters from a string (starting from right)</td></tr><tr><td style="text-align:left">RPAD</td><td style="text-align:left">Right-pads a string with another string, to a certain length</td></tr><tr><td style="text-align:left">RTRIM</td><td style="text-align:left">Removes trailing spaces from a string</td></tr><tr><td style="text-align:left">SPACE</td><td style="text-align:left">Returns a string of the specified number of space characters</td></tr><tr><td style="text-align:left">STRCMP</td><td style="text-align:left">Compares two strings</td></tr><tr><td style="text-align:left">SUBSTR</td><td style="text-align:left">Extracts a substring from a string (starting at any position)</td></tr><tr><td style="text-align:left">SUBSTRING</td><td style="text-align:left">Extracts a substring from a string (starting at any position)</td></tr><tr><td style="text-align:left">SUBSTRING_INDEX</td><td style="text-align:left">Returns a substring of a string before a specified number of delimiter occurs</td></tr><tr><td style="text-align:left">TRIM</td><td style="text-align:left">Removes leading and trailing spaces from a string</td></tr><tr><td style="text-align:left">UCASE</td><td style="text-align:left">Converts a string to upper-case</td></tr><tr><td style="text-align:left">UPPER</td><td style="text-align:left">Converts a string to upper-case</td></tr></tbody></table></div><h2 id="MySQL-Numeric-Functions"><a href="#MySQL-Numeric-Functions" class="headerlink" title="MySQL Numeric Functions"></a>MySQL Numeric Functions</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">ABS</td><td style="text-align:left">Returns the absolute value of a number</td></tr><tr><td style="text-align:left">ACOS</td><td style="text-align:left">Returns the arc cosine of a number</td></tr><tr><td style="text-align:left">ASIN</td><td style="text-align:left">Returns the arc sine of a number</td></tr><tr><td style="text-align:left">ATAN</td><td style="text-align:left">Returns the arc tangent of one or two numbers</td></tr><tr><td style="text-align:left">ATAN2</td><td style="text-align:left">Returns the arc tangent of two numbers</td></tr><tr><td style="text-align:left">AVG</td><td style="text-align:left">Returns the average value of an expression</td></tr><tr><td style="text-align:left">CEIL</td><td style="text-align:left">Returns the smallest integer value that is &gt;= to a number</td></tr><tr><td style="text-align:left">CEILING</td><td style="text-align:left">Returns the smallest integer value that is &gt;= to a number</td></tr><tr><td style="text-align:left">COS</td><td style="text-align:left">Returns the cosine of a number</td></tr><tr><td style="text-align:left">COT</td><td style="text-align:left">Returns the cotangent of a number</td></tr><tr><td style="text-align:left">COUNT</td><td style="text-align:left">Returns the number of records returned by a select query</td></tr><tr><td style="text-align:left">DEGREES</td><td style="text-align:left">Converts a value in radians to degrees</td></tr><tr><td style="text-align:left">DIV</td><td style="text-align:left">Used for integer division</td></tr><tr><td style="text-align:left">EXP</td><td style="text-align:left">Returns e raised to the power of a specified number</td></tr><tr><td style="text-align:left">FLOOR</td><td style="text-align:left">Returns the largest integer value that is &lt;= to a number</td></tr><tr><td style="text-align:left">GREATEST</td><td style="text-align:left">Returns the greatest value of the list of arguments</td></tr><tr><td style="text-align:left">LEAST</td><td style="text-align:left">Returns the smallest value of the list of arguments</td></tr><tr><td style="text-align:left">LN</td><td style="text-align:left">Returns the natural logarithm of a number</td></tr><tr><td style="text-align:left">LOG</td><td style="text-align:left">Returns the natural logarithm of a number, or the logarithm of a number to a specified base</td></tr><tr><td style="text-align:left">LOG10</td><td style="text-align:left">Returns the natural logarithm of a number to base 10</td></tr><tr><td style="text-align:left">LOG2</td><td style="text-align:left">Returns the natural logarithm of a number to base 2</td></tr><tr><td style="text-align:left">MAX</td><td style="text-align:left">Returns the maximum value in a set of values</td></tr><tr><td style="text-align:left">MIN</td><td style="text-align:left">Returns the minimum value in a set of values</td></tr><tr><td style="text-align:left">MOD</td><td style="text-align:left">Returns the remainder of a number divided by another number</td></tr><tr><td style="text-align:left">PI</td><td style="text-align:left">Returns the value of PI</td></tr><tr><td style="text-align:left">POW</td><td style="text-align:left">Returns the value of a number raised to the power of another number</td></tr><tr><td style="text-align:left">POWER</td><td style="text-align:left">Returns the value of a number raised to the power of another number</td></tr><tr><td style="text-align:left">RADIANS</td><td style="text-align:left">Converts a degree value into radians</td></tr><tr><td style="text-align:left">RAND</td><td style="text-align:left">Returns a random number</td></tr><tr><td style="text-align:left">ROUND</td><td style="text-align:left">Rounds a number to a specified number of decimal places</td></tr><tr><td style="text-align:left">SIGN</td><td style="text-align:left">Returns the sign of a number</td></tr><tr><td style="text-align:left">SIN</td><td style="text-align:left">Returns the sine of a number</td></tr><tr><td style="text-align:left">SQRT</td><td style="text-align:left">Returns the square root of a number</td></tr><tr><td style="text-align:left">SUM</td><td style="text-align:left">Calculates the sum of a set of values</td></tr><tr><td style="text-align:left">TAN</td><td style="text-align:left">Returns the tangent of a number</td></tr><tr><td style="text-align:left">TRUNCATE</td><td style="text-align:left">Truncates a number to the specified number of decimal places</td></tr></tbody></table></div><h2 id="MySQL-Date-Functions"><a href="#MySQL-Date-Functions" class="headerlink" title="MySQL Date Functions"></a>MySQL Date Functions</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">ADDDATE</td><td style="text-align:left">Adds a time/date interval to a date and then returns the date</td></tr><tr><td style="text-align:left">ADDTIME</td><td style="text-align:left">Adds a time interval to a time/datetime and then returns the time/datetime</td></tr><tr><td style="text-align:left">CURDATE</td><td style="text-align:left">Returns the current date</td></tr><tr><td style="text-align:left">CURRENT_DATE</td><td style="text-align:left">Returns the current date</td></tr><tr><td style="text-align:left">CURRENT_TIME</td><td style="text-align:left">Returns the current time</td></tr><tr><td style="text-align:left">CURRENT_TIMESTAMP</td><td style="text-align:left">Returns the current date and time</td></tr><tr><td style="text-align:left">CURTIME</td><td style="text-align:left">Returns the current time</td></tr><tr><td style="text-align:left">DATE</td><td style="text-align:left">Extracts the date part from a datetime expression</td></tr><tr><td style="text-align:left">DATEDIFF</td><td style="text-align:left">Returns the number of days between two date values</td></tr><tr><td style="text-align:left">DATE_ADD</td><td style="text-align:left">Adds a time/date interval to a date and then returns the date</td></tr><tr><td style="text-align:left">DATE_FORMAT</td><td style="text-align:left">Formats a date</td></tr><tr><td style="text-align:left">DATE_SUB</td><td style="text-align:left">Subtracts a time/date interval from a date and then returns the date</td></tr><tr><td style="text-align:left">DAY</td><td style="text-align:left">Returns the day of the month for a given date</td></tr><tr><td style="text-align:left">DAYNAME</td><td style="text-align:left">Returns the weekday name for a given date</td></tr><tr><td style="text-align:left">DAYOFMONTH</td><td style="text-align:left">Returns the day of the month for a given date</td></tr><tr><td style="text-align:left">DAYOFWEEK</td><td style="text-align:left">Returns the weekday index for a given date</td></tr><tr><td style="text-align:left">DAYOFYEAR</td><td style="text-align:left">Returns the day of the year for a given date</td></tr><tr><td style="text-align:left">EXTRACT</td><td style="text-align:left">Extracts a part from a given date</td></tr><tr><td style="text-align:left">FROM_DAYS</td><td style="text-align:left">Returns a date from a numeric datevalue</td></tr><tr><td style="text-align:left">HOUR</td><td style="text-align:left">Returns the hour part for a given date</td></tr><tr><td style="text-align:left">LAST_DAY</td><td style="text-align:left">Extracts the last day of the month for a given date</td></tr><tr><td style="text-align:left">LOCALTIME</td><td style="text-align:left">Returns the current date and time</td></tr><tr><td style="text-align:left">LOCALTIMESTAMP</td><td style="text-align:left">Returns the current date and time</td></tr><tr><td style="text-align:left">MAKEDATE</td><td style="text-align:left">Creates and returns a date based on a year and a number of days value</td></tr><tr><td style="text-align:left">MAKETIME</td><td style="text-align:left">Creates and returns a time based on an hour, minute, and second value</td></tr><tr><td style="text-align:left">MICROSECOND</td><td style="text-align:left">Returns the microsecond part of a time/datetime</td></tr><tr><td style="text-align:left">MINUTE</td><td style="text-align:left">Returns the minute part of a time/datetime</td></tr><tr><td style="text-align:left">MONTH</td><td style="text-align:left">Returns the month part for a given date</td></tr><tr><td style="text-align:left">MONTHNAME</td><td style="text-align:left">Returns the name of the month for a given date</td></tr><tr><td style="text-align:left">NOW</td><td style="text-align:left">Returns the current date and time</td></tr><tr><td style="text-align:left">PERIOD_ADD</td><td style="text-align:left">Adds a specified number of months to a period</td></tr><tr><td style="text-align:left">PERIOD_DIFF</td><td style="text-align:left">Returns the difference between two periods</td></tr><tr><td style="text-align:left">QUARTER</td><td style="text-align:left">Returns the quarter of the year for a given date value</td></tr><tr><td style="text-align:left">SECOND</td><td style="text-align:left">Returns the seconds part of a time/datetime</td></tr><tr><td style="text-align:left">SEC_TO_TIME</td><td style="text-align:left">Returns a time value based on the specified seconds</td></tr><tr><td style="text-align:left">STR_TO_DATE</td><td style="text-align:left">Returns a date based on a string and a format</td></tr><tr><td style="text-align:left">SUBDATE</td><td style="text-align:left">Subtracts a time/date interval from a date and then returns the date</td></tr><tr><td style="text-align:left">SUBTIME</td><td style="text-align:left">Subtracts a time interval from a datetime and then returns the time/datetime</td></tr><tr><td style="text-align:left">SYSDATE</td><td style="text-align:left">Returns the current date and time</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">Extracts the time part from a given time/datetime</td></tr><tr><td style="text-align:left">TIME_FORMAT</td><td style="text-align:left">Formats a time by a specified format</td></tr><tr><td style="text-align:left">TIME_TO_SEC</td><td style="text-align:left">Converts a time value into seconds</td></tr><tr><td style="text-align:left">TIMEDIFF</td><td style="text-align:left">Returns the difference between two time/datetime expressions</td></tr><tr><td style="text-align:left">TIMESTAMP</td><td style="text-align:left">Returns a datetime value based on a date or datetime value</td></tr><tr><td style="text-align:left">TO_DAYS</td><td style="text-align:left">Returns the number of days between a date and date “0000-00-00”</td></tr><tr><td style="text-align:left">WEEK</td><td style="text-align:left">Returns the week number for a given date</td></tr><tr><td style="text-align:left">WEEKDAY</td><td style="text-align:left">Returns the weekday number for a given date</td></tr><tr><td style="text-align:left">WEEKOFYEAR</td><td style="text-align:left">Returns the week number for a given date</td></tr><tr><td style="text-align:left">YEAR</td><td style="text-align:left">Returns the year part for a given date</td></tr><tr><td style="text-align:left">YEARWEEK</td><td style="text-align:left">Returns the year and week number for a given date</td></tr></tbody></table></div><hr><h2 id="MySQL-Advanced-Functions"><a href="#MySQL-Advanced-Functions" class="headerlink" title="MySQL Advanced Functions"></a>MySQL Advanced Functions</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">BIN</td><td style="text-align:left">Returns a binary representation of a number</td></tr><tr><td style="text-align:left">BINARY</td><td style="text-align:left">Converts a value to a binary string</td></tr><tr><td style="text-align:left">CASE</td><td style="text-align:left">Goes through conditions and return a value when the first condition is met</td></tr><tr><td style="text-align:left">CAST</td><td style="text-align:left">Converts a value (of any type) into a specified datatype</td></tr><tr><td style="text-align:left">COALESCE</td><td style="text-align:left">Returns the first non-null value in a list</td></tr><tr><td style="text-align:left">CONNECTION_ID</td><td style="text-align:left">Returns the unique connection ID for the current connection</td></tr><tr><td style="text-align:left">CONV</td><td style="text-align:left">Converts a number from one numeric base system to another</td></tr><tr><td style="text-align:left">CONVERT</td><td style="text-align:left">Converts a value into the specified datatype or character set</td></tr><tr><td style="text-align:left">CURRENT_USER</td><td style="text-align:left">Returns the user name and host name for the MySQL account that the server used to authenticate the current client</td></tr><tr><td style="text-align:left">DATABASE</td><td style="text-align:left">Returns the name of the current database</td></tr><tr><td style="text-align:left">IF</td><td style="text-align:left">Returns a value if a condition is TRUE, or another value if a condition is FALSE</td></tr><tr><td style="text-align:left">IFNULL</td><td style="text-align:left">Return a specified value if the expression is NULL, otherwise return the expression</td></tr><tr><td style="text-align:left">ISNULL</td><td style="text-align:left">Returns 1 or 0 depending on whether an expression is NULL</td></tr><tr><td style="text-align:left">LAST_INSERT_ID</td><td style="text-align:left">Returns the AUTO_INCREMENT id of the last row that has been inserted or updated in a table</td></tr><tr><td style="text-align:left">NULLIF</td><td style="text-align:left">Compares two expressions and returns NULL if they are equal. Otherwise, the first expression is returned</td></tr><tr><td style="text-align:left">SESSION_USER</td><td style="text-align:left">Returns the current MySQL user name and host name</td></tr><tr><td style="text-align:left">SYSTEM_USER</td><td style="text-align:left">Returns the current MySQL user name and host name</td></tr><tr><td style="text-align:left">USER</td><td style="text-align:left">Returns the current MySQL user name and host name</td></tr><tr><td style="text-align:left">VERSION</td><td style="text-align:left">Returns the current version of the MySQL database</td></tr></tbody></table></div><h1 id="SQL-Create-Table"><a href="#SQL-Create-Table" class="headerlink" title="SQL - Create Table"></a>SQL - Create Table</h1><p>The CREATE TABLE statement is used to create a new table in a database.</p><p><strong>Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">  column1 datatype,</span><br><span class="line">  column2 datatype,</span><br><span class="line">  column3 datatype,</span><br><span class="line">  ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The column parameters specify the names of the columns of the table.</p><p>The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.).</p><p><strong>Tip:</strong> For an overview of the available data types, go to our complete Data Type Reference.</p><p>The following example creates a table called “Persons” that contains five columns: PersonID, LastName, FirstName, Address, and City:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">      PersonID int,</span><br><span class="line">      LastName varchar(255),</span><br><span class="line">      FirstName varchar(255),</span><br><span class="line">      Address varchar(255),</span><br><span class="line">      City varchar(255) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Create Table Using Another Table</strong></p><p>A copy of an existing table can also be created using CREATE TABLE.</p><p>The new table gets the same column definitions. All columns or specific columns can be selected.</p><p>If you create a new table using an existing table, the new table will be filled with the existing values from the old table.</p><p><strong>Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE new_table_name AS</span><br><span class="line">SELECT column1, column2,...</span><br><span class="line">FROM existing_table_name</span><br><span class="line">WHERE ....;</span><br></pre></td></tr></table></figure><p>The following SQL creates a new table called “TestTables” (which is a copy of the “Customers” table): </p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE TestTable AS</span><br><span class="line">SELECT customername, contactname</span><br><span class="line">FROM customers;</span><br></pre></td></tr></table></figure><h1 id="Normalisation"><a href="#Normalisation" class="headerlink" title="Normalisation"></a>Normalisation</h1><h2 id="Linking-Information"><a href="#Linking-Information" class="headerlink" title="Linking Information"></a>Linking Information</h2><p>Storing all the information in the same table leads to redundancy.</p><p>This is avoided by “normalising” tables and linking information across tables.</p><p><strong>An Example of Normalisation</strong></p><p>visualizer $\rightarrow$ Add your notes below</p><h1 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h1><p>SQL provides a way of imposing certain rules (or Constraints) to tables.</p><p>For example, you might want students to have unique student ids.</p><p>List of Constraints:</p><ul><li><p>NOT NULL</p></li><li><p>UNIQUE</p></li><li><p>PRIMARY KEY $\rightarrow$ Identify a row uniquely</p></li><li><p>FOREIGN KEY</p></li><li><p>CHECK</p></li><li><p>DEFAULT</p></li><li><p>INDEX</p></li></ul><h2 id="SQL-Create-Constraints"><a href="#SQL-Create-Constraints" class="headerlink" title="SQL Create Constraints"></a>SQL Create Constraints</h2><p>Constraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.</p><p><strong>Syntax</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">  column1 datatype constraint,</span><br><span class="line">  column2 datatype constraint,</span><br><span class="line">  column3 datatype constra int,</span><br><span class="line">  ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="SQL-constraints"><a href="#SQL-constraints" class="headerlink" title="SQL constraints"></a>SQL constraints</h2><p>SQL constraints are used to specify rules for the data in a table.</p><p>Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.</p><p>Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.</p><p>The following constraints are commonly used in SQL:</p><ul><li>NOT NULL - Ensures that a column cannot have a NULL value</li><li>UNIQUE - Ensures that all values in a column are different</li><li>PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table</li><li>FOREIGN KEY - Uniquely identifies a row/record in another table</li><li>CHECK - Ensures that all values in a column satisfies a specific condition</li><li>DEFAULT - Sets a default value for a column when no value is specified</li><li>INDEX - Used to create and retrieve data from the database very quickly</li></ul><h3 id="SQL-NOT-NULL-Constraint"><a href="#SQL-NOT-NULL-Constraint" class="headerlink" title="SQL NOT NULL Constraint"></a>SQL NOT NULL Constraint</h3><p>By default, a column can hold NULL values.</p><p>The NOT NULL constraint enforces a column to NOT accept NULL values.</p><p>This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.</p><h4 id="SQL-NOT-NULL-on-CREATE-TABLE"><a href="#SQL-NOT-NULL-on-CREATE-TABLE" class="headerlink" title="SQL NOT NULL on CREATE TABLE"></a>SQL NOT NULL on CREATE TABLE</h4><p>The following SQL ensures that the “ID”, “LastName”, and “FirstName” columns will NOT accept NULL values when the “Persons” table is created:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255) NOT NULL,</span><br><span class="line">  Age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="SQL-NOT-NULL-on-ALTER-TABLE"><a href="#SQL-NOT-NULL-on-ALTER-TABLE" class="headerlink" title="SQL NOT NULL on ALTER TABLE"></a>SQL NOT NULL on ALTER TABLE</h4><p>To create a NOT NULL constraint on the “Age” column when the “Persons” table is already created, use the following SQL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">MODIFY Age int NOT NULL;</span><br></pre></td></tr></table></figure><h3 id="SQL-UNIQUE-Constraint"><a href="#SQL-UNIQUE-Constraint" class="headerlink" title="SQL UNIQUE Constraint"></a>SQL UNIQUE Constraint</h3><p>The UNIQUE constraint ensures that all values in a column are different.</p><p>Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.</p><p>A PRIMARY KEY constraint automatically has a UNIQUE constraint.</p><p>However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.</p><hr><h4 id="SQL-UNIQUE-Constraint-on-CREATE-TABLE"><a href="#SQL-UNIQUE-Constraint-on-CREATE-TABLE" class="headerlink" title="SQL UNIQUE Constraint on CREATE TABLE"></a>SQL UNIQUE Constraint on CREATE TABLE</h4><p>The following SQL creates a UNIQUE constraint on the “ID” column when the “Persons” table is created:</p><p><strong>SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL UNIQUE,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int,</span><br><span class="line">  UNIQUE (ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int,</span><br><span class="line">  CONSTRAINT UC_Person UNIQUE (ID,LastName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="SQL-UNIQUE-Constraint-on-ALTER-TABLE"><a href="#SQL-UNIQUE-Constraint-on-ALTER-TABLE" class="headerlink" title="SQL UNIQUE Constraint on ALTER TABLE"></a>SQL UNIQUE Constraint on ALTER TABLE</h4><p>To create a UNIQUE constraint on the “ID” column when the table is already created, use the following SQL:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD UNIQUE (ID);</span><br></pre></td></tr></table></figure><p>To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);</span><br></pre></td></tr></table></figure><h4 id="DROP-a-UNIQUE-Constraint"><a href="#DROP-a-UNIQUE-Constraint" class="headerlink" title="DROP a UNIQUE Constraint"></a>DROP a UNIQUE Constraint</h4><p>To drop a UNIQUE constraint, use the following SQL:</p><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP INDEX UC_Person;</span><br></pre></td></tr></table></figure><p><strong>SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP CONSTRAINT UC_Person;</span><br></pre></td></tr></table></figure><h3 id="SQL-PRIMARY-KEY-Constraint"><a href="#SQL-PRIMARY-KEY-Constraint" class="headerlink" title="SQL PRIMARY KEY Constraint"></a>SQL PRIMARY KEY Constraint</h3><p>The PRIMARY KEY constraint uniquely identifies each record in a table.</p><p>Primary keys must contain UNIQUE values, and cannot contain NULL values.</p><p>A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).</p><h4 id="SQL-PRIMARY-KEY-on-CREATE-TABLE"><a href="#SQL-PRIMARY-KEY-on-CREATE-TABLE" class="headerlink" title="SQL PRIMARY KEY on CREATE TABLE"></a>SQL PRIMARY KEY on CREATE TABLE</h4><p>The following SQL creates a PRIMARY KEY on the “ID” column when the “Persons” table is created:</p><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int,</span><br><span class="line">  PRIMARY KEY (ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL PRIMARY KEY,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int,</span><br><span class="line">  CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).</p><h4 id="SQL-PRIMARY-KEY-on-ALTER-TABLE"><a href="#SQL-PRIMARY-KEY-on-ALTER-TABLE" class="headerlink" title="SQL PRIMARY KEY on ALTER TABLE"></a>SQL PRIMARY KEY on ALTER TABLE</h4><p>To create a PRIMARY KEY constraint on the “ID” column when the table is already created, use the following SQL:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD PRIMARY KEY (ID);</span><br></pre></td></tr></table></figure><p>To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> If you use the ALTER TABLE statement to add a primary key, the primary key column(s) must already have been declared to not contain NULL values (when the table was first created).</p><h4 id="DROP-a-PRIMARY-KEY-Constraint"><a href="#DROP-a-PRIMARY-KEY-Constraint" class="headerlink" title="DROP a PRIMARY KEY Constraint"></a>DROP a PRIMARY KEY Constraint</h4><p>To drop a PRIMARY KEY constraint, use the following SQL:</p><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><p><strong>SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP CONSTRAINT PK_Person;</span><br></pre></td></tr></table></figure><h3 id="SQL-FOREIGN-KEY-Constraint"><a href="#SQL-FOREIGN-KEY-Constraint" class="headerlink" title="SQL FOREIGN KEY Constraint"></a>SQL FOREIGN KEY Constraint</h3><p>A FOREIGN KEY is a key used to link two tables together.</p><p>A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.</p><p>The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.</p><p>Look at the following two tables:</p><p>“Persons” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">PersonID</th><th style="text-align:left">LastName</th><th style="text-align:left">FirstName</th><th style="text-align:left">Age</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Hansen</td><td style="text-align:left">Ola</td><td style="text-align:left">30</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Svendson</td><td style="text-align:left">Tove</td><td style="text-align:left">23</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Pettersen</td><td style="text-align:left">Kari</td><td style="text-align:left">20</td></tr></tbody></table></div><p>“Orders” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">OrderID</th><th style="text-align:left">OrderNumber</th><th style="text-align:left">PersonID</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">77895</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">44678</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">22456</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">24562</td><td style="text-align:left">1</td></tr></tbody></table></div><ul><li>Notice that the “PersonID” column in the “Orders” table points to the “PersonID” column in the “Persons” table.</li><li>The “PersonID” column in the “Persons” table is the PRIMARY KEY in the “Persons” table.</li><li>The “PersonID” column in the “Orders” table is a FOREIGN KEY in the “Orders” table.</li><li>The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.</li><li>The FOREIGN KEY constraint also prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the table it points to.</li></ul><h4 id="SQL-FOREIGN-KEY-on-CREATE-TABLE"><a href="#SQL-FOREIGN-KEY-on-CREATE-TABLE" class="headerlink" title="SQL FOREIGN KEY on CREATE TABLE"></a>SQL FOREIGN KEY on CREATE TABLE</h4><p>The following SQL creates a FOREIGN KEY on the “PersonID” column when the “Orders” table is created:</p><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders (</span><br><span class="line">  OrderID int NOT NULL,</span><br><span class="line">  OrderNumber int NOT NULL,</span><br><span class="line">  PersonID int,</span><br><span class="line">  PRIMARY KEY (OrderID),</span><br><span class="line">  FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders (</span><br><span class="line">  OrderID int NOT NULL PRIMARY KEY,</span><br><span class="line">  OrderNumber int NOT NULL,</span><br><span class="line">  PersonID int FOREIGN KEY REFERENCES Persons(PersonID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders (</span><br><span class="line">  OrderID int NOT NULL,</span><br><span class="line">  OrderNumber int NOT NULL,</span><br><span class="line">  PersonID int,</span><br><span class="line">  PRIMARY KEY (OrderID),</span><br><span class="line">  CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)</span><br><span class="line">  REFERENCES Persons(PersonID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="SQL-FOREIGN-KEY-on-ALTER-TABLE"><a href="#SQL-FOREIGN-KEY-on-ALTER-TABLE" class="headerlink" title="SQL FOREIGN KEY on ALTER TABLE"></a>SQL FOREIGN KEY on ALTER TABLE</h4><p>To create a FOREIGN KEY constraint on the “PersonID” column when the “Orders” table is already created, use the following SQL:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders</span><br><span class="line">ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);</span><br></pre></td></tr></table></figure><p>To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders</span><br><span class="line">ADD CONSTRAINT FK_PersonOrder</span><br><span class="line">FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);</span><br></pre></td></tr></table></figure><h4 id="DROP-a-FOREIGN-KEY-Constraint"><a href="#DROP-a-FOREIGN-KEY-Constraint" class="headerlink" title="DROP a FOREIGN KEY Constraint"></a>DROP a FOREIGN KEY Constraint</h4><p>To drop a FOREIGN KEY constraint, use the following SQL:</p><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders</span><br><span class="line">DROP FOREIGN KEY FK_PersonOrder;</span><br></pre></td></tr></table></figure><p><strong>SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders</span><br><span class="line">DROP CONSTRAINT FK_PersonOrder;</span><br></pre></td></tr></table></figure><h3 id="SQL-CHECK-Constraint"><a href="#SQL-CHECK-Constraint" class="headerlink" title="SQL CHECK Constraint"></a>SQL CHECK Constraint</h3><p>The CHECK constraint is used to limit the value range that can be placed in a column.</p><p>If you define a CHECK constraint on a single column it allows only certain values for this column.</p><p>If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.</p><h4 id="SQL-CHECK-on-CREATE-TABLE"><a href="#SQL-CHECK-on-CREATE-TABLE" class="headerlink" title="SQL CHECK on CREATE TABLE"></a>SQL CHECK on CREATE TABLE</h4><p>The following SQL creates a CHECK constraint on the “Age” column when the “Persons” table is created. The CHECK constraint ensures that you can not have any person below 18 years:</p><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int,</span><br><span class="line">  CHECK (Age&gt;&#x3D;18)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int CHECK (Age&gt;&#x3D;18)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int,</span><br><span class="line">  City varchar(255),</span><br><span class="line">  CONSTRAINT CHK_Person CHECK (Age&gt;&#x3D;18 AND City&#x3D;&#39;Sandnes&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="SQL-CHECK-on-ALTER-TABLE"><a href="#SQL-CHECK-on-ALTER-TABLE" class="headerlink" title="SQL CHECK on ALTER TABLE"></a>SQL CHECK on ALTER TABLE</h4><p>To create a CHECK constraint on the “Age” column when the table is already created, use the following SQL:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CHECK (Age&gt;&#x3D;18);</span><br></pre></td></tr></table></figure><p>To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:</p><p><strong>MySQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CONSTRAINT CHK_PersonAge CHECK (Age&gt;&#x3D;18 AND City&#x3D;&#39;Sandnes&#39;);</span><br></pre></td></tr></table></figure><h4 id="DROP-a-CHECK-Constraint"><a href="#DROP-a-CHECK-Constraint" class="headerlink" title="DROP a CHECK Constraint"></a>DROP a CHECK Constraint</h4><p>To drop a CHECK constraint, use the following SQL:</p><p><strong>SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP CONSTRAINT CHK_PersonAge;</span><br></pre></td></tr></table></figure><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP CHECK CHK_PersonAge;</span><br></pre></td></tr></table></figure><h3 id="SQL-DEFAULT-Constraint"><a href="#SQL-DEFAULT-Constraint" class="headerlink" title="SQL DEFAULT Constraint"></a>SQL DEFAULT Constraint</h3><p>The DEFAULT constraint is used to provide a default value for a column.</p><p>The default value will be added to all new records IF no other value is specified.</p><h4 id="SQL-DEFAULT-on-CREATE-TABLE"><a href="#SQL-DEFAULT-on-CREATE-TABLE" class="headerlink" title="SQL DEFAULT on CREATE TABLE"></a>SQL DEFAULT on CREATE TABLE</h4><p>The following SQL sets a DEFAULT value for the “City” column when the “Persons” table is created:</p><p><strong>My SQL / SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int,</span><br><span class="line">  City varchar(255) DEFAULT &#39;Sandnes&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  OrderNumber int NOT NULL,</span><br><span class="line">  OrderDate date DEFAULT GETDATE()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="SQL-DEFAULT-on-ALTER-TABLE"><a href="#SQL-DEFAULT-on-ALTER-TABLE" class="headerlink" title="SQL DEFAULT on ALTER TABLE"></a>SQL DEFAULT on ALTER TABLE</h4><p>To create a DEFAULT constraint on the “City” column when the table is already created, use the following SQL:</p><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ALTER City SET DEFAULT &#39;Sandnes&#39;;</span><br></pre></td></tr></table></figure><p><strong>SQL Server:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CONSTRAINT df_City </span><br><span class="line">DEFAULT &#39;Sandnes&#39; FOR City;</span><br></pre></td></tr></table></figure><p><strong>MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ALTER COLUMN City SET DEFAULT &#39;Sandnes&#39;;</span><br></pre></td></tr></table></figure><p><strong>Oracle:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">MODIFY City DEFAULT &#39;Sandnes&#39;;</span><br></pre></td></tr></table></figure><h4 id="DROP-a-DEFAULT-Constraint"><a href="#DROP-a-DEFAULT-Constraint" class="headerlink" title="DROP a DEFAULT Constraint"></a>DROP a DEFAULT Constraint</h4><p>To drop a DEFAULT constraint, use the following SQL:</p><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ALTER City DROP DEFAULT;</span><br></pre></td></tr></table></figure><p><strong>SQL Server / Oracle / MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ALTER COLUMN City DROP DEFAULT;</span><br></pre></td></tr></table></figure><h3 id="SQL-CREATE-INDEX-Statement"><a href="#SQL-CREATE-INDEX-Statement" class="headerlink" title="SQL CREATE INDEX Statement"></a>SQL CREATE INDEX Statement</h3><p>The CREATE INDEX statement is used to create indexes in tables.</p><p>Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.</p><p><strong>Note:</strong> Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.</p><h4 id="CREATE-INDEX-Syntax"><a href="#CREATE-INDEX-Syntax" class="headerlink" title="CREATE INDEX Syntax"></a>CREATE INDEX Syntax</h4><p>Creates an index on a table. Duplicate values are allowed:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name</span><br><span class="line">ON table_name (column1, column2, ...);</span><br></pre></td></tr></table></figure><h4 id="CREATE-UNIQUE-INDEX-Syntax"><a href="#CREATE-UNIQUE-INDEX-Syntax" class="headerlink" title="CREATE UNIQUE INDEX Syntax"></a>CREATE UNIQUE INDEX Syntax</h4><p>Creates a unique index on a table. Duplicate values are not allowed:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX index_name</span><br><span class="line">ON table_name (column1, column2, ...);</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.</p><h4 id="CREATE-INDEX-Example"><a href="#CREATE-INDEX-Example" class="headerlink" title="CREATE INDEX Example"></a>CREATE INDEX Example</h4><p>The SQL statement below creates an index named “idx_lastname” on the “LastName” column in the “Persons” table:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_lastname</span><br><span class="line">ON Persons (LastName);</span><br></pre></td></tr></table></figure><p>If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_pname</span><br><span class="line">ON Persons (LastName, FirstName);</span><br></pre></td></tr></table></figure><h4 id="DROP-INDEX-Statement"><a href="#DROP-INDEX-Statement" class="headerlink" title="DROP INDEX Statement"></a>DROP INDEX Statement</h4><p>The DROP INDEX statement is used to delete an index in a table.</p><p><strong>MS Access:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name ON table_name;</span><br></pre></td></tr></table></figure><p><strong>SQL Server:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX table_name.index_name;</span><br></pre></td></tr></table></figure><p><strong>DB2/Oracle:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name;</span><br></pre></td></tr></table></figure><p><strong>MySQL:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">DROP INDEX index_name;</span><br></pre></td></tr></table></figure><h3 id="AUTO-INCREMENT-Field"><a href="#AUTO-INCREMENT-Field" class="headerlink" title="AUTO INCREMENT Field"></a>AUTO INCREMENT Field</h3><p>Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.</p><p>Often this is the primary key field that we would like to be created automatically every time a new record is inserted.</p><h4 id="Syntax-for-MySQL"><a href="#Syntax-for-MySQL" class="headerlink" title="Syntax for MySQL"></a>Syntax for MySQL</h4><p>The following SQL statement defines the “Personid” column to be an auto-increment primary key field in the “Persons” table:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  Personid int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int,</span><br><span class="line">  PRIMARY KEY (Personid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.</p><p>By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.</p><p>To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons AUTO_INCREMENT&#x3D;100;</span><br></pre></td></tr></table></figure><p>To insert a new record into the “Persons” table, we will NOT have to specify a value for the “Personid” column (a unique value will be added automatically):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Persons (FirstName,LastName)</span><br><span class="line">VALUES (&#39;Lars&#39;,&#39;Monsen&#39;);</span><br></pre></td></tr></table></figure><p>The SQL statement above would insert a new record into the “Persons” table. The “Personid” column would be assigned a unique value. The “FirstName” column would be set to “Lars” and the “LastName” column would be set to “Monsen”.</p><h4 id="Syntax-for-SQL-Server"><a href="#Syntax-for-SQL-Server" class="headerlink" title="Syntax for SQL Server"></a>Syntax for SQL Server</h4><p>The following SQL statement defines the “Personid” column to be an auto-increment primary key field in the “Persons” table:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  Personid int IDENTITY(1,1) PRIMARY KEY,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The MS SQL Server uses the IDENTITY keyword to perform an auto-increment feature. </p><p>In the example above, the starting value for IDENTITY is 1, and it will increment by 1 for each new record.</p><p><strong>Tip:</strong> To specify that the “Personid” column should start at value 10 and increment by 5, change it to IDENTITY(10,5).</p><p>To insert a new record into the “Persons” table, we will NOT have to specify a value for the “Personid” column (a unique value will be added automatically):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Persons (FirstName,LastName)</span><br><span class="line">VALUES (&#39;Lars&#39;,&#39;Monsen&#39;);</span><br></pre></td></tr></table></figure><p>The SQL statement above would insert a new record into the “Persons” table. The “Personid” column would be assigned a unique value. The “FirstName” column would be set to “Lars” and the “LastName” column would be set to “Monsen”.</p><h4 id="Syntax-for-Access"><a href="#Syntax-for-Access" class="headerlink" title="Syntax for Access"></a>Syntax for Access</h4><p>The following SQL statement defines the “Personid” column to be an auto-increment primary key field in the “Persons” table:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  Personid AUTOINCREMENT PRIMARY KEY,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The MS Access uses the AUTOINCREMENT keyword to perform an auto-increment feature. </p><p>By default, the starting value for AUTOINCREMENT is 1, and it will increment by 1 for each new record.</p><p><strong>Tip:</strong> To specify that the “Personid” column should start at value 10 and increment by 5, change the autoincrement to AUTOINCREMENT(10,5).</p><p>To insert a new record into the “Persons” table, we will NOT have to specify a value for the “Personid” column (a unique value will be added automatically):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Persons (FirstName,LastName)</span><br><span class="line">VALUES (&#39;Lars&#39;,&#39;Monsen&#39;);</span><br></pre></td></tr></table></figure><p>The SQL statement above would insert a new record into the “Persons” table. The “Personid” column would be assigned a unique value. The “FirstName” column would be set to “Lars” and the “LastName” column would be set to “Monsen”.</p><h4 id="Syntax-for-Oracle"><a href="#Syntax-for-Oracle" class="headerlink" title="Syntax for Oracle"></a>Syntax for Oracle</h4><p>In Oracle the code is a little bit more tricky.</p><p>You will have to create an auto-increment field with the sequence object (this object generates a number sequence).</p><p>Use the following CREATE SEQUENCE syntax:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE SEQUENCE seq_person</span><br><span class="line">MINVALUE 1</span><br><span class="line">START WITH 1</span><br><span class="line">INCREMENT BY 1</span><br><span class="line">CACHE 10;</span><br></pre></td></tr></table></figure><p>The code above creates a sequence object called seq_person, that starts with 1 and will increment by 1. It will also cache up to 10 values for performance. The cache option specifies how many sequence values will be stored in memory for faster access.</p><p>To insert a new record into the “Persons” table, we will have to use the nextval function (this function retrieves the next value from seq_person sequence):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Persons (Personid,FirstName,LastName)</span><br><span class="line">VALUES (seq_person.nextval,&#39;Lars&#39;,&#39;Monsen&#39;);</span><br></pre></td></tr></table></figure><p>The SQL statement above would insert a new record into the “Persons” table. The “Personid” column would be assigned the next number from the seq_person sequence. The “FirstName” column would be set to “Lars” and the “LastName” column would be set to “Monsen”.</p><h1 id="SQL-JOIN"><a href="#SQL-JOIN" class="headerlink" title="SQL JOIN"></a>SQL JOIN</h1><p>A JOIN clause is used to combine rows from two or more tables, based on a related column between them.</p><p>Let’s look at a selection from the “Orders” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">OrderID</th><th style="text-align:left">CustomerID</th><th style="text-align:left">OrderDate</th></tr></thead><tbody><tr><td style="text-align:left">10308</td><td style="text-align:left">2</td><td style="text-align:left">1996-09-18</td></tr><tr><td style="text-align:left">10309</td><td style="text-align:left">37</td><td style="text-align:left">1996-09-19</td></tr><tr><td style="text-align:left">10310</td><td style="text-align:left">77</td><td style="text-align:left">1996-09-20</td></tr></tbody></table></div><p>Then, look at a selection from the “Customers” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">CustomerID</th><th style="text-align:left">CustomerName</th><th style="text-align:left">ContactName</th><th style="text-align:left">Country</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Alfreds Futterkiste</td><td style="text-align:left">Maria Anders</td><td style="text-align:left">Germany</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Ana Trujillo Emparedados y helados</td><td style="text-align:left">Ana Trujillo</td><td style="text-align:left">Mexico</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Antonio Moreno Taquería</td><td style="text-align:left">Antonio Moreno</td><td style="text-align:left">Mexico</td></tr></tbody></table></div><p>Notice that the “CustomerID” column in the “Orders” table refers to the “CustomerID” in the “Customers” table. The relationship between the two tables above is the “CustomerID” column.</p><p>Then, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate</span><br><span class="line">FROM Orders</span><br><span class="line">INNER JOIN Customers ON Orders.CustomerID&#x3D;Customers.CustomerID;</span><br></pre></td></tr></table></figure><p>and it will produce something like this:</p><div class="table-container"><table><thead><tr><th style="text-align:left">OrderID</th><th style="text-align:left">CustomerName</th><th style="text-align:left">OrderDate</th></tr></thead><tbody><tr><td style="text-align:left">10308</td><td style="text-align:left">Ana Trujillo Emparedados y helados</td><td style="text-align:left">9/18/1996</td></tr><tr><td style="text-align:left">10365</td><td style="text-align:left">Antonio Moreno Taquería</td><td style="text-align:left">11/27/1996</td></tr><tr><td style="text-align:left">10383</td><td style="text-align:left">Around the Horn</td><td style="text-align:left">12/16/1996</td></tr><tr><td style="text-align:left">10355</td><td style="text-align:left">Around the Horn</td><td style="text-align:left">11/15/1996</td></tr><tr><td style="text-align:left">10278</td><td style="text-align:left">Berglunds snabbköp</td><td style="text-align:left">8/12/1996</td></tr></tbody></table></div><hr><h2 id="Different-Types-of-SQL-JOINs"><a href="#Different-Types-of-SQL-JOINs" class="headerlink" title="Different Types of SQL  JOINs"></a>Different Types of SQL  JOINs</h2><p>Here are the different types of the JOINs in SQL:</p><ul><li><strong>(INNER) JOIN</strong>: Returns records that have matching values in both tables</li><li><strong>LEFT (OUTER) JOIN</strong>: Returns all records from the left table, and the matched records from the right table</li><li><strong>RIGHT (OUTER) JOIN</strong>: Returns all records from the right table, and the matched records from the left table</li><li><strong>FULL (OUTER) JOIN</strong>: Returns all records when there is a match in either left or right table</li></ul><p><img src="/2020/04/04/Database/03.png" style="zoom:75%;"></p><h2 id="SQL-INNER-JOIN-Keyword"><a href="#SQL-INNER-JOIN-Keyword" class="headerlink" title="SQL INNER JOIN Keyword"></a>SQL INNER JOIN Keyword</h2><p>The INNER JOIN keyword selects records that have matching values in both tables.</p><h3 id="INNER-JOIN-Syntax"><a href="#INNER-JOIN-Syntax" class="headerlink" title="INNER JOIN Syntax"></a>INNER JOIN Syntax</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT *column_name(s)*</span><br><span class="line">FROM *table1*</span><br><span class="line">INNER JOIN *table2</span><br><span class="line">*ON *table1.column_name* &#x3D; *table2.column_name*;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/04/Database/04.png" style="zoom: 67%;"></p><h3 id="Demo-Database"><a href="#Demo-Database" class="headerlink" title="Demo Database"></a>Demo Database</h3><p>In this tutorial we will use the well-known Northwind sample database.</p><p>Below is a selection from the “Orders” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">OrderID</th><th style="text-align:left">CustomerID</th><th style="text-align:left">EmployeeID</th><th style="text-align:left">OrderDate</th><th style="text-align:left">ShipperID</th></tr></thead><tbody><tr><td style="text-align:left">10308</td><td style="text-align:left">2</td><td style="text-align:left">7</td><td style="text-align:left">1996-09-18</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">10309</td><td style="text-align:left">37</td><td style="text-align:left">3</td><td style="text-align:left">1996-09-19</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">10310</td><td style="text-align:left">77</td><td style="text-align:left">8</td><td style="text-align:left">1996-09-20</td><td style="text-align:left">2</td></tr></tbody></table></div><p>And a selection from the “Customers” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">CustomerID</th><th style="text-align:left">CustomerName</th><th style="text-align:left">ConName</th><th style="text-align:left">Address</th><th style="text-align:left">City</th><th style="text-align:left">PostCode</th><th style="text-align:left">Country</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Alfreds Futterkiste</td><td style="text-align:left">Maria Anders</td><td style="text-align:left">Obere Str. 57</td><td style="text-align:left">Berlin</td><td style="text-align:left">12209</td><td style="text-align:left">Germany</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Ana Trujillo Emparedados y helados</td><td style="text-align:left">Ana Trujillo</td><td style="text-align:left">Avda. de la Constitución 2222</td><td style="text-align:left">México D.F.</td><td style="text-align:left">05021</td><td style="text-align:left">Mexico</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Antonio Moreno Taquería</td><td style="text-align:left">Antonio Moreno</td><td style="text-align:left">Mataderos 2312</td><td style="text-align:left">México D.F.</td><td style="text-align:left">05023</td><td style="text-align:left">Mexico</td></tr></tbody></table></div><h3 id="SQL-INNER-JOIN-Example"><a href="#SQL-INNER-JOIN-Example" class="headerlink" title="SQL INNER JOIN Example"></a>SQL INNER JOIN Example</h3><p>The following SQL statement selects all orders with customer information:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Orders.OrderID, Customers.CustomerName</span><br><span class="line">FROM Orders</span><br><span class="line">INNER JOIN Customers ON Orders.CustomerID &#x3D; Customers.CustomerID;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the “Orders” table that do not have matches in “Customers”, these orders will not be shown!</p><h3 id="JOIN-Three-Tables"><a href="#JOIN-Three-Tables" class="headerlink" title="JOIN Three Tables"></a>JOIN Three Tables</h3><p>The following SQL statement selects all orders with customer and shipper information:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName</span><br><span class="line">FROM ((Orders</span><br><span class="line">INNER JOIN Customers ON Orders.CustomerID &#x3D; Customers.CustomerID)</span><br><span class="line">INNER JOIN Shippers ON Orders.ShipperID &#x3D; Shippers.ShipperID);</span><br></pre></td></tr></table></figure><h2 id="SQL-LEFT-JOIN-Keyword"><a href="#SQL-LEFT-JOIN-Keyword" class="headerlink" title="SQL LEFT JOIN Keyword"></a>SQL LEFT JOIN Keyword</h2><p>The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match.</p><h3 id="LEFT-JOIN-Syntax"><a href="#LEFT-JOIN-Syntax" class="headerlink" title="LEFT JOIN Syntax"></a>LEFT JOIN Syntax</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT *column_name(s)*</span><br><span class="line">FROM *table1*</span><br><span class="line">LEFT JOIN *table2</span><br><span class="line">*ON *table1.column_name* &#x3D; *table2.column_name*;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> In some databases LEFT JOIN is called LEFT OUTER JOIN.</p><p><img src="/2020/04/04/Database/15.png" style="zoom: 67%;"></p><h3 id="Demo-Database-1"><a href="#Demo-Database-1" class="headerlink" title="Demo Database"></a>Demo Database</h3><p>In this tutorial we will use the well-known Northwind sample database.</p><p>Below is a selection from the “Customers” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">CustomerID</th><th style="text-align:left">CustomerName</th><th style="text-align:left">ConName</th><th style="text-align:left">Address</th><th style="text-align:left">City</th><th style="text-align:left">PostCode</th><th style="text-align:left">Country</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Alfreds Futterkiste</td><td style="text-align:left">Maria Anders</td><td style="text-align:left">Obere Str. 57</td><td style="text-align:left">Berlin</td><td style="text-align:left">12209</td><td style="text-align:left">Germany</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Ana Trujillo Emparedados y helados</td><td style="text-align:left">Ana Trujillo</td><td style="text-align:left">Avda. de la Constitución 2222</td><td style="text-align:left">México D.F.</td><td style="text-align:left">05021</td><td style="text-align:left">Mexico</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Antonio Moreno Taquería</td><td style="text-align:left">Antonio Moreno</td><td style="text-align:left">Mataderos 2312</td><td style="text-align:left">México D.F.</td><td style="text-align:left">05023</td><td style="text-align:left">Mexico</td></tr></tbody></table></div><p>And a selection from the “Orders” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">OrderID</th><th style="text-align:left">CustomerID</th><th style="text-align:left">EmployeeID</th><th style="text-align:left">OrderDate</th><th style="text-align:left">ShipperID</th></tr></thead><tbody><tr><td style="text-align:left">10308</td><td style="text-align:left">2</td><td style="text-align:left">7</td><td style="text-align:left">1996-09-18</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">10309</td><td style="text-align:left">37</td><td style="text-align:left">3</td><td style="text-align:left">1996-09-19</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">10310</td><td style="text-align:left">77</td><td style="text-align:left">8</td><td style="text-align:left">1996-09-20</td><td style="text-align:left">2</td></tr></tbody></table></div><hr><h3 id="SQL-LEFT-JOIN-Example"><a href="#SQL-LEFT-JOIN-Example" class="headerlink" title="SQL LEFT JOIN Example"></a>SQL LEFT JOIN Example</h3><p>The following SQL statement will select all customers, and any orders they might have:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Customers.CustomerName, Orders.OrderID</span><br><span class="line">FROM Customers</span><br><span class="line">LEFT JOIN Orders ON Customers.CustomerID &#x3D; Orders.CustomerID</span><br><span class="line">ORDER BY Customers.CustomerName;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).</p><h2 id="SQL-RIGHT-JOIN-Keyword"><a href="#SQL-RIGHT-JOIN-Keyword" class="headerlink" title="SQL RIGHT JOIN Keyword"></a>SQL RIGHT JOIN Keyword</h2><p>The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is NULL from the left side, when there is no match.</p><h3 id="RIGHT-JOIN-Syntax"><a href="#RIGHT-JOIN-Syntax" class="headerlink" title="RIGHT JOIN Syntax"></a>RIGHT JOIN Syntax</h3><p>SELECT <em>column_name(s)</em><br>FROM <em>table1</em><br>RIGHT JOIN <em>table2</em>ON <em>table1.column_name</em> = <em>table2.column_name</em>;</p><p><strong>Note:</strong> In some databases RIGHT JOIN is called RIGHT OUTER JOIN.</p><p><img src="/2020/04/04/Database/05.png" style="zoom:67%;"></p><h3 id="Demo-Database-2"><a href="#Demo-Database-2" class="headerlink" title="Demo Database"></a>Demo Database</h3><p>In this tutorial we will use the well-known Northwind sample database.</p><p>Below is a selection from the “Orders” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">OrderID</th><th style="text-align:left">CustomerID</th><th style="text-align:left">EmployeeID</th><th style="text-align:left">OrderDate</th><th style="text-align:left">ShipperID</th></tr></thead><tbody><tr><td style="text-align:left">10308</td><td style="text-align:left">2</td><td style="text-align:left">7</td><td style="text-align:left">1996-09-18</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">10309</td><td style="text-align:left">37</td><td style="text-align:left">3</td><td style="text-align:left">1996-09-19</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">10310</td><td style="text-align:left">77</td><td style="text-align:left">8</td><td style="text-align:left">1996-09-20</td><td style="text-align:left">2</td></tr></tbody></table></div><p>And a selection from the “Employees” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">EmployeeID</th><th style="text-align:left">LastName</th><th style="text-align:left">FirstName</th><th style="text-align:left">BirthDate</th><th style="text-align:left">Photo</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Davolio</td><td style="text-align:left">Nancy</td><td style="text-align:left">12/8/1968</td><td style="text-align:left">EmpID1.pic</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Fuller</td><td style="text-align:left">Andrew</td><td style="text-align:left">2/19/1952</td><td style="text-align:left">EmpID2.pic</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Leverling</td><td style="text-align:left">Janet</td><td style="text-align:left">8/30/1963</td><td style="text-align:left">EmpID3.pic</td></tr></tbody></table></div><hr><h3 id="SQL-RIGHT-JOIN-Example"><a href="#SQL-RIGHT-JOIN-Example" class="headerlink" title="SQL RIGHT JOIN Example"></a>SQL RIGHT JOIN Example</h3><p>The following SQL statement will return all employees, and any orders they might have placed:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Orders.OrderID, Employees.LastName, Employees.FirstName</span><br><span class="line">FROM Orders</span><br><span class="line">RIGHT JOIN Employees ON Orders.EmployeeID &#x3D; Employees.EmployeeID</span><br><span class="line">ORDER BY Orders.OrderID;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).</p><h2 id="SQL-FULL-OUTER-JOIN-Keyword"><a href="#SQL-FULL-OUTER-JOIN-Keyword" class="headerlink" title="SQL FULL OUTER JOIN Keyword"></a>SQL FULL OUTER JOIN Keyword</h2><p>The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.</p><p><strong>Note:</strong> FULL OUTER JOIN can potentially return very large result-sets!</p><p><strong>Tip:</strong> FULL OUTER JOIN and FULL JOIN are the same.</p><h3 id="FULL-OUTER-JOIN-Syntax"><a href="#FULL-OUTER-JOIN-Syntax" class="headerlink" title="FULL OUTER JOIN Syntax"></a>FULL OUTER JOIN Syntax</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT *column_name(s)*</span><br><span class="line">FROM *table1*</span><br><span class="line">FULL OUTER JOIN *table2</span><br><span class="line">*ON *table1.column_name* &#x3D; *table2.column_name</span><br><span class="line">*WHERE *condition*;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/04/Database/06.png" style="zoom:67%;"></p><h3 id="Demo-Database-3"><a href="#Demo-Database-3" class="headerlink" title="Demo Database"></a>Demo Database</h3><p>In this tutorial we will use the well-known Northwind sample database.</p><p>Below is a selection from the “Customers” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">CustomerID</th><th style="text-align:left">CustomerName</th><th style="text-align:left">ConName</th><th style="text-align:left">Address</th><th style="text-align:left">City</th><th style="text-align:left">PostalCode</th><th style="text-align:left">Country</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Alfreds Futterkiste</td><td style="text-align:left">Maria Anders</td><td style="text-align:left">Obere Str. 57</td><td style="text-align:left">Berlin</td><td style="text-align:left">12209</td><td style="text-align:left">Germany</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Ana Trujillo Emparedados y helados</td><td style="text-align:left">Ana Trujillo</td><td style="text-align:left">Avda. de la Constitución 2222</td><td style="text-align:left">México D.F.</td><td style="text-align:left">05021</td><td style="text-align:left">Mexico</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Antonio Moreno Taquería</td><td style="text-align:left">Antonio Moreno</td><td style="text-align:left">Mataderos 2312</td><td style="text-align:left">México D.F.</td><td style="text-align:left">05023</td><td style="text-align:left">Mexico</td></tr></tbody></table></div><p>And a selection from the “Orders” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">OrderID</th><th style="text-align:left">CustomerID</th><th style="text-align:left">EmployeeID</th><th style="text-align:left">OrderDate</th><th style="text-align:left">ShipperID</th></tr></thead><tbody><tr><td style="text-align:left">10308</td><td style="text-align:left">2</td><td style="text-align:left">7</td><td style="text-align:left">1996-09-18</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">10309</td><td style="text-align:left">37</td><td style="text-align:left">3</td><td style="text-align:left">1996-09-19</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">10310</td><td style="text-align:left">77</td><td style="text-align:left">8</td><td style="text-align:left">1996-09-20</td><td style="text-align:left">2</td></tr></tbody></table></div><h3 id="SQL-FULL-OUTER-JOIN-Example"><a href="#SQL-FULL-OUTER-JOIN-Example" class="headerlink" title="SQL FULL OUTER JOIN Example"></a>SQL FULL OUTER JOIN Example</h3><p>The following SQL statement selects all customers, and all orders:</p><p>SELECT Customers.CustomerName, Orders.OrderID<br>FROM Customers<br>FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID<br>ORDER BY Customers.CustomerName;</p><p>A selection from the result set may look like this:</p><div class="table-container"><table><thead><tr><th style="text-align:left">CustomerName</th><th style="text-align:left">OrderID</th></tr></thead><tbody><tr><td style="text-align:left">Alfreds Futterkiste</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ana Trujillo Emparedados y helados</td><td style="text-align:left">10308</td></tr><tr><td style="text-align:left">Antonio Moreno Taquería</td><td style="text-align:left">10365</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">10382</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">10351</td></tr></tbody></table></div><p><strong>Note:</strong> The FULL OUTER JOIN keyword returns all matching records from both tables whether the other table matches or not. So, if there are rows in “Customers” that do not have matches in “Orders”, or if there are rows in “Orders” that do not have matches in “Customers”, those rows will be listed as well.</p><h2 id="SQL-Self-JOIN"><a href="#SQL-Self-JOIN" class="headerlink" title="SQL Self JOIN"></a>SQL Self JOIN</h2><p>A self JOIN is a regular join, but the table is joined with itself.</p><h3 id="Self-JOIN-Syntax"><a href="#Self-JOIN-Syntax" class="headerlink" title="Self JOIN Syntax"></a>Self JOIN Syntax</h3><p>SELECT <em>column_name(s)</em><br>FROM <em>table1 T1, table1 T2</em><br>WHERE <em>condition</em>;</p><p><em>T1</em> and <em>T2</em> are different table aliases for the same table.</p><h3 id="Demo-Database-4"><a href="#Demo-Database-4" class="headerlink" title="Demo Database"></a>Demo Database</h3><p>In this tutorial we will use the well-known Northwind sample database.</p><p>Below is a selection from the “Customers” table:</p><div class="table-container"><table><thead><tr><th style="text-align:left">CustomerID</th><th style="text-align:left">CustomerName</th><th style="text-align:left">ConName</th><th style="text-align:left">Address</th><th style="text-align:left">City</th><th style="text-align:left">PostalCode</th><th style="text-align:left">Country</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Alfreds Futterkiste</td><td style="text-align:left">Maria Anders</td><td style="text-align:left">Obere Str. 57</td><td style="text-align:left">Berlin</td><td style="text-align:left">12209</td><td style="text-align:left">Germany</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Ana Trujillo Emparedados y helados</td><td style="text-align:left">Ana Trujillo</td><td style="text-align:left">Avda. de la Constitución 2222</td><td style="text-align:left">México D.F.</td><td style="text-align:left">05021</td><td style="text-align:left">Mexico</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Antonio Moreno Taquería</td><td style="text-align:left">Antonio Moreno</td><td style="text-align:left">Mataderos 2312</td><td style="text-align:left">México D.F.</td><td style="text-align:left">05023</td><td style="text-align:left">Mexico</td></tr></tbody></table></div><h3 id="SQL-Self-JOIN-Example"><a href="#SQL-Self-JOIN-Example" class="headerlink" title="SQL Self JOIN Example"></a>SQL Self JOIN Example</h3><p>The following SQL statement matches customers that are from the same city:</p><p><strong>Example</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City</span><br><span class="line">FROM Customers A, Customers B</span><br><span class="line">WHERE A.CustomerID &lt;&gt; B.CustomerID</span><br><span class="line">AND A.City &#x3D; B.City </span><br><span class="line">ORDER BY A.City;</span><br></pre></td></tr></table></figure><h1 id="Entity-Relationship-Diagrams"><a href="#Entity-Relationship-Diagrams" class="headerlink" title="Entity Relationship Diagrams"></a>Entity Relationship Diagrams</h1><h2 id="Database-Design"><a href="#Database-Design" class="headerlink" title="Database Design"></a>Database Design</h2><p>Database Design is not exact and is more creative than exact. </p><p><strong>Goals:</strong></p><ul><li>Must work with a predefined business process (or rules)</li><li>Must ensure data consistency and throughput Must contain all the required data. </li><li>Must ensure that data remains readable despite these constraints </li></ul><h3 id="Business-Rules"><a href="#Business-Rules" class="headerlink" title="Business Rules"></a>Business Rules</h3><p><strong>Some examples:</strong></p><ul><li><p>Order must be placed before it is shipped</p></li><li><p>Timetables for the same student must not overlap</p></li></ul><p>Notice how these can be implemented using “Database Constraints” </p><p>Having the correct information with the required constraints constitutes data quality.</p><p>Having the correct information with the required constraints constitutes data quality.</p><p>Data quality is critical to ensuring the smooth running of an organisation </p><p>​    e.g. timetabling!</p><h3 id="Database-Throughput"><a href="#Database-Throughput" class="headerlink" title="Database Throughput"></a>Database Throughput</h3><p>Having all the required information is useful if the database is too slow.</p><p>We need a balance between throughput and business requirements.</p><h3 id="Elements-of-Database-Design"><a href="#Elements-of-Database-Design" class="headerlink" title="Elements of Database Design"></a>Elements of Database Design</h3><ul><li><p>Conceptual Modelling</p></li><li><p>Logical Design of the Database</p></li><li><p>Distributed Database Design</p></li><li><p>Physical Database Design</p></li></ul><p>We will study:</p><ul><li><p>Conceptual Modelling</p></li><li><p>Logical Design of the Database</p></li></ul><p>We will NOT study:</p><ul><li>Distributed Database Design</li><li>Physical Database Design</li></ul><h2 id="Entity-Relationship-Diagrams-1"><a href="#Entity-Relationship-Diagrams-1" class="headerlink" title="Entity Relationship Diagrams"></a>Entity Relationship Diagrams</h2><p>This is the “language” for describing database design.</p><p>It is a prerequisite for designing databases</p><p>We will walk through the notation for ERDs and simultaneously talk about how to design databases and convert ERDs to tables.</p><p><strong>WARNING:</strong></p><p>There is no standard for ERDs - You must use what is provided in these lectures.</p><p>We use <strong><u><em>one variation</em></u></strong> of the Crow’s Feet Notation</p><p><img src="/2020/04/04/Database/07.png" style="zoom:30%;"></p><p><img src="/2020/04/04/Database/08.png" style="zoom:60%;"></p><p>Rectangles Denote Entities</p><ul><li>Often Physical things <ul><li>Nouns (Film) or Events (Payment)</li></ul></li></ul><p>The relation is written on the line connecting entities.</p><ul><li>Often a Verb</li></ul><p>ERDs have an Language Correspondence</p><p>Attributes associated with an Entity are listed within the rectangle.</p><p>The primary attribute (which uniquely identifies an entity) is underlined.</p><p>Relations are NAMED associations between Entities.</p><p>Relationships provide associations in BOTH directions</p><h3 id="Cardinality"><a href="#Cardinality" class="headerlink" title="Cardinality"></a>Cardinality</h3><p>This provides constraints on the number of entities that participate in a relationship.</p><ul><li>e.g.<ul><li>SEVERAL Films can have ONE category ONE Module is taught by SEVERAL lecturers</li></ul></li></ul><p><img src="/2020/04/04/Database/09.png" style="zoom:30%;"></p><p><img src="/2020/04/04/Database/10.png" style="zoom:30%;"></p><script type="math/tex; mode=display">A ~Many~ to~ One~ Relationship</script><p><img src="/2020/04/04/Database/11.png" style="zoom:30%;"></p><p><img src="/2020/04/04/Database/12.png" style="zoom:30%;"></p><script type="math/tex; mode=display">A ~Many~ to~ Many~ Relationship</script><p><img src="/2020/04/04/Database/13.png" style="zoom:30%;"></p><div class="table-container"><table><thead><tr><th>Mandatory</th><th>Minimum cardinality ≥ 1</th></tr></thead><tbody><tr><td>Optional</td><td>Minimum cardinality = 0</td></tr><tr><td>Functional or single-valued</td><td>Minimum cardinality = 1</td></tr><tr><td>1-M</td><td>Maximum cardinality = 1 in one direction; maximum cardinality &gt; 1 in the other direction</td></tr><tr><td>M-N</td><td>Maximum cardinality &gt; 1 in both directions</td></tr><tr><td>1-1</td><td>Maximum cardinality = 1 in both directions</td></tr></tbody></table></div><h3 id="Entity-Relationship-Diagrams-to-Tables"><a href="#Entity-Relationship-Diagrams-to-Tables" class="headerlink" title="Entity Relationship Diagrams to Tables"></a>Entity Relationship Diagrams to Tables</h3><p>Relations become tables <u>Foreign Keys</u> when creating tables</p><p>So, the Film table could have the CategoryID iff it is a many (Films) to one (Category) relationship.</p><p>NOT if it is a many to many relationship!</p><h3 id="ERDs-Weak-Entities"><a href="#ERDs-Weak-Entities" class="headerlink" title="ERDs - Weak Entities"></a>ERDs - Weak Entities</h3><ul><li><p>These are entities that do not have a primary key.</p></li><li><p>They must borrow a part or all of it from another entity</p><ul><li>e.g.<ul><li>Rooms in a building </li><li>Marks on a module</li></ul></li></ul></li></ul><p>An Identification Relationship provides ONE component of a Weak Entity’s Primary Key</p><p>An Identifying Dependency consists of one or more Identification Relationships to provide ALL of a Weak Entity’s Primary Key.</p><p>Sometimes, they are equivalent.</p><p><img src="/2020/04/04/Database/14.png" style="zoom:30%;"></p><p>Weak Entities are represented using rounded rectangles.</p><p>The underlined attribute is NOT the primary key, but is a key which when added to the key of one or more entities provides a primary key.</p><p>Converting to Tables:</p><ul><li>The primary key of a Weak Entity consists of the combination of the Key of that entity and Foreign keys of one or more other Entities.</li></ul><h3 id="ERDs-Many-to-Many-Relations"><a href="#ERDs-Many-to-Many-Relations" class="headerlink" title="ERDs - Many to Many Relations"></a>ERDs - Many to Many Relations</h3><p><img src="/2020/04/04/Database/30.png" style="zoom:30%;"></p><p>There are several instances where many elements of one entity are associated with many elements of another.</p><p>More examples:</p><ul><li>Student to Module </li><li>Supplier to Part</li></ul><p>In Many to Many relationships, relationships can have attributes.</p><p>Examples:</p><ul><li>Film to Actor              $\rightarrow$ Actor Role </li><li>Student to Module   $\rightarrow$ Module Mark </li><li>Supplier to Part        $\rightarrow$ Quantity of part</li></ul><p>In Many to Many relationships, relationships can have attributes.</p><p>These attributes are listed below the relationship in an ERD with an arrow pointing to them.</p><p><img src="/2020/04/04/Database/16.png" style="zoom:30%;"></p><p><strong>Rule:</strong> </p><ul><li>You can replace a many to many relationship (n-m) with:<ul><li>An Associate Entity and </li><li>TWO one to many relations</li></ul></li></ul><p><img src="/2020/04/04/Database/17.png" style="zoom:30%;"></p><p>Associative Entities provide additional information about the many to many association between entities. </p><p>They are necessarily Weak Entities, borrowing their primary key from the entities they provide an association between</p><p>Converting to Tables:</p><ul><li>Many to many relations can be shown in ERDs but need to be converted to many to one relations before creating the necessary tables.</li></ul><h3 id="ERDs-N-Way-Relations"><a href="#ERDs-N-Way-Relations" class="headerlink" title="ERDs: N-Way Relations"></a>ERDs: N-Way Relations</h3><p>Sometimes - very rarely - more than two entities are related to each other.</p><p>Example</p><ul><li>A module is taught by two lecturers and a student registered gets a different mark on each of the two parts.</li></ul><p>If we only need to record pairs of facts then an N-Way relation is NOT required.</p><p>Example:</p><ul><li>Which lectueres teach which modules Which students are enroled in which modules</li></ul><p>We use an N-Way relation iff we need to record information associated with 3 or more entities</p><p>Example:</p><ul><li><p>What is a student’s mark in Lecturer A’s section of a given module?</p></li><li><p>What is a student’s attendance for one of the two lecturer’s lectures?</p></li></ul><p><img src="/2020/04/04/Database/18.png" style="zoom:30%;"></p><h3 id="ERDs-Self-Identifying-Relations"><a href="#ERDs-Self-Identifying-Relations" class="headerlink" title="ERDs: Self Identifying Relations"></a>ERDs: Self Identifying Relations</h3><p>Self Identifying OR Self Referencing OR Reflexive relationships are relationships between an Entity and itself.</p><p><img src="/2020/04/04/Database/19.png" style="zoom:30%;"></p><p><img src="/2020/04/04/Database/20.png" style="zoom:30%;"></p><script type="math/tex; mode=display">Many~to~One</script><p><img src="/2020/04/04/Database/21.png" style="zoom:30%;"></p><p><img src="/2020/04/04/Database/22.png" style="zoom:30%;"></p><script type="math/tex; mode=display">Many ~to~Many</script><p>Notice how all hierarchies are of this form:</p><ul><li>Biological Classifications</li><li>Organisational hierarchies </li><li>Topic Categories</li></ul><p>So as to decide on the cardinality of these relationships, it is useful to draw in “Instance Diagram”.</p><p>Self Identifying Relations might need an Associate Entity depending on the cardinality.</p><p>All these can be converted to tables if many to many relations are replaced by Associate Entities and one to many relations.</p><h1 id="Advanced-SQL-Concepts"><a href="#Advanced-SQL-Concepts" class="headerlink" title="Advanced SQL Concepts"></a>Advanced SQL Concepts</h1><h2 id="Basic-Joins"><a href="#Basic-Joins" class="headerlink" title="Basic Joins"></a>Basic Joins</h2><p>Let’s first create some tables that will help us with understanding basic joins: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE COURSE(</span><br><span class="line">    ID SERIAL PRIMARY KEY,</span><br><span class="line">    COURSENAME VARCHAR( 20 ),</span><br><span class="line">    DETAILS VARCHAR( 100 ) </span><br><span class="line">) ;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE STUDENT(</span><br><span class="line">    STUDENTID SERIAL PRIMARY KEY,</span><br><span class="line">    NAME VARCHAR( 30 ),</span><br><span class="line">    COURSEID INT REFERENCES COURSE( ID )  </span><br><span class="line">) ;</span><br></pre></td></tr></table></figure><p>Notice how the keyword “REFERENCES” has been used to define a foreign key. </p><p>Insert some values into both tables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO COURSE</span><br><span class="line">    ( COURSENAME, DETAILS ) </span><br><span class="line">VALUES </span><br><span class="line">    (&#39;MSc&#39;, &#39;The MSc CS Course&#39; ), </span><br><span class="line">    ( &#39;BSc&#39;, &#39;The BSc CS Course&#39; ) ;</span><br><span class="line"></span><br><span class="line">INSERT INTO STUDENT</span><br><span class="line">    ( NAME, COURSEID ) </span><br><span class="line">VALUES </span><br><span class="line">    ( &#39;S1&#39;, 1 ),</span><br><span class="line">    ( &#39;S2&#39;, 2 ), </span><br><span class="line">    ( &#39;S3&#39;, 1 ) ;</span><br></pre></td></tr></table></figure><p><strong>WARNING:</strong> Insert will fail if you use double quotes in postgres.</p><p>The tables now contain: </p><p>postgis_test=# SELECT * FROM STUDENT;</p><p>studentid | name | courseid </p><p>—————-+———+—————</p><p>​     1 | S1  |    1</p><p>​     2 | S2  |    2</p><p>​     3 | S3  |    1</p><p>(3 rows)</p><p>postgis_test=# SELECT * FROM COURSE;</p><p>id | coursename |   details    </p><p>——+——————+—————————-</p><p> 1 | MSc    | The MSc CS Course</p><p> 2 | BSc    | The BSc CS Course</p><p>(2 rows)</p><p><strong>Here is what a basic cross product looks like:</strong> </p><p>postgis_test=# SELECT * FROM STUDENT, COURSE ;</p><p>studentid | name | courseid | id | coursename |   details    </p><p>—————-+———+—————+——+——————+—————————-</p><p>​     1 | S1  |    1 | 1 | MSc    | The MSc CS Course</p><p>​     1 | S1  |    1 | 2 | BSc    | The BSc CS Course</p><p>​     2 | S2  |    2 | 1 | MSc    | The MSc CS Course</p><p>​     2 | S2  |    2 | 2 | BSc    | The BSc CS Course</p><p>​     3 | S3  |    1 | 1 | MSc    | The MSc CS Course</p><p>​     3 | S3  |    1 | 2 | BSc    | The BSc CS Course</p><p>(6 rows)</p><p><strong>Notice the following:</strong> </p><ul><li>All columns from BOTH the tables are now part of this cross product.</li><li>There are 6 rows - which is 3 * 2 </li></ul><p>Question: How many rows will the cross product of two tables that have 20 and 10 rows each have?</p><p>Let us now link these tables based on the logic used to build them: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM STUDENT, COURSE </span><br><span class="line">WHERE STUDENT.COURSEID &#x3D; COURSE.ID ;</span><br></pre></td></tr></table></figure><p>studentid | name | courseid | id | coursename |   details    </p><p>—————-+———+—————+——+——————+—————————-</p><p>​     1 | S1  |    1 | 1 | MSc    | The MSc CS Course</p><p>​     2 | S2  |    2 | 2 | BSc    | The BSc CS Course</p><p>​     3 | S3  |    1 | 1 | MSc    | The MSc CS Course</p><p>(3 rows)</p><p><strong>WARNING</strong>: The foreign key constraint that is built into these tables will only be triggered during inserts. Do not confuse that with what takes place when you select entities. </p><p>In essence selecting multiple tables will provide the cross product of those tables. The rest of the SQL query (where, groupby and so on) can still be applied as in the case of simpler queries. </p><h3 id="Using-Joins"><a href="#Using-Joins" class="headerlink" title="Using Joins"></a>Using Joins</h3><p>A Join provides an implicit way of simultaneously selecting the cross product AND applying the where condition to filter out the rows we are not interested in. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM STUDENT, COURSE </span><br><span class="line">WHERE STUDENT.COURSEID &#x3D; COURSE.ID ;</span><br><span class="line"></span><br><span class="line">SELECT *  </span><br><span class="line">FROM STUDENT </span><br><span class="line">JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID );</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title=" "></a> </h2><h2 id="Group-by"><a href="#Group-by" class="headerlink" title="Group by"></a>Group by</h2><p>Grouping rows based on some criterion is an important aspect of SQL. We must understand what is going on when we group rows. </p><p>In essence, we can think of grouping rows as a way of combining multiple rows that share the values of some column(s) (determined by the group by clause) into a single column. Of course, columns that are NOT grouped by are likely to have different values across these rows and the only way to “select” them is by using an aggregate function (such as min, max, count, …). </p><p>It is important to understand the difference between the where clause and the group by clause. </p><p>Examples: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT ID, COUNT( NAME ) </span><br><span class="line">FROM STUDENT, COURSE </span><br><span class="line">WHERE STUDENT.COURSEID &#x3D; COURSE.ID </span><br><span class="line">GROUP BY ID ;</span><br><span class="line"></span><br><span class="line">SELECT NAME </span><br><span class="line">FROM STUDENT, COURSE </span><br><span class="line">WHERE STUDENT.COURSEID &#x3D; COURSE.ID AND COURSEID &#x3D; 1;</span><br></pre></td></tr></table></figure><p>Notice how the following works in PostGres, but not in other database systems. These are minor peculiarities that you should be aware of. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT ID, COURSENAME, COUNT( NAME ) </span><br><span class="line">FROM STUDENT, COURSE </span><br><span class="line">WHERE STUDENT.COURSEID &#x3D; COURSE.ID </span><br><span class="line">GROUP BY ID ;    -- We assume you cannot do this.</span><br><span class="line"></span><br><span class="line">SELECT ID, COURSENAME, COUNT( NAME ) </span><br><span class="line">FROM STUDENT, COURSE </span><br><span class="line">WHERE STUDENT.COURSEID &#x3D; COURSE.ID </span><br><span class="line">GROUP BY ID, COURSENAME ;</span><br></pre></td></tr></table></figure><p>To avoid confusion, we are going to assume that when using group by, you must only select those columns that you are grouping by OR a column you have applied an aggregate function on. </p><h2 id="Complex-queries-Selecting-from-a-Select"><a href="#Complex-queries-Selecting-from-a-Select" class="headerlink" title="Complex queries: Selecting from a Select"></a>Complex queries: Selecting from a Select</h2><p>We’ve talked about how the result of a query is always a table and so we can select from a select. Here is a trivial example: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM ( </span><br><span class="line">    SELECT * FROM COURSE </span><br><span class="line">) AS A;</span><br></pre></td></tr></table></figure><p>This query will result in the same as the inner query, but it is a good demonstration of what needs to be done. Once again, different database systems expect a slightly different syntax here, but we will assume that we ALWAYS need to name our subquery (the “as A” bit). </p><p>Let us assume that there is a difficulty assigned to each course. We include this information using: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE COURSE ADD COLUMN DIFFICULTY INT ;</span><br><span class="line"></span><br><span class="line">UPDATE COURSE SET DIFFICULTY &#x3D; 5 WHERE ID &#x3D; 1;</span><br><span class="line">UPDATE COURSE SET DIFFICULTY &#x3D; 1 WHERE ID &#x3D; 2;</span><br></pre></td></tr></table></figure><p>Notice how the following query will select the difficulty of the course being done by each student: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT NAME, DIFFICULTY </span><br><span class="line">FROM STUDENT </span><br><span class="line">JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID );</span><br></pre></td></tr></table></figure><p>We now want to allocate students to pairs so they might do a project together. However, we want to ensure that they are picked from courses of the same difficulty. How do we do this?</p><p>We are going to build up this solution to understand how that might be done. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT STUDENTID, NAME, DIFFICULTY </span><br><span class="line">FROM STUDENT </span><br><span class="line">JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID ) ;</span><br></pre></td></tr></table></figure><p>Add the first part of the complex query: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM ( </span><br><span class="line">     SELECT STUDENTID, NAME, DIFFICULTY </span><br><span class="line">    FROM STUDENT </span><br><span class="line">    JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID ) </span><br><span class="line">) AS A ;</span><br></pre></td></tr></table></figure><p>Now let’s add the second bit of the complex query as a cross product: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM ( </span><br><span class="line">    SELECT STUDENTID, NAME, DIFFICULTY </span><br><span class="line">    FROM STUDENT </span><br><span class="line">    JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID ) </span><br><span class="line">) AS A, ( </span><br><span class="line">    SELECT STUDENTID, NAME, DIFFICULTY </span><br><span class="line">    FROM STUDENT </span><br><span class="line">    JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID ) </span><br><span class="line">) AS B;</span><br></pre></td></tr></table></figure><p>We are now going to write this as a join to limit the rows based on the condition we want (difficulty is equal): </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM ( </span><br><span class="line">    SELECT STUDENTID, NAME, DIFFICULTY </span><br><span class="line">    FROM STUDENT </span><br><span class="line">    JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID ) ) AS A </span><br><span class="line">JOIN ( </span><br><span class="line">    SELECT STUDENTID, NAME, DIFFICULTY </span><br><span class="line">    FROM STUDENT </span><br><span class="line">    JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID ) </span><br><span class="line">) AS B ON( A.DIFFICULTY &#x3D; B.DIFFICULTY ) ;</span><br></pre></td></tr></table></figure><p>Of course, as discussed in the previous lecture, we must now get rid of the duplicates ( Students matched to themselves and we must ensure that if we have student1 and student2 as a pair, we must not have student2, student1). The key is to include the where clause “where A.STUDENTID &lt; B.STUDENTID ;” as follows: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM ( </span><br><span class="line">    SELECT STUDENTID, NAME, DIFFICULTY </span><br><span class="line">    FROM STUDENT </span><br><span class="line">    JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID ) </span><br><span class="line">) AS A JOIN (</span><br><span class="line">    SELECT STUDENTID, NAME, DIFFICULTY </span><br><span class="line">    FROM STUDENT </span><br><span class="line">    JOIN COURSE ON ( STUDENT.COURSEID &#x3D; COURSE.ID ) </span><br><span class="line">) AS B ON( A.DIFFICULTY &#x3D; B.DIFFICULTY ) </span><br><span class="line">WHERE A.STUDENTID &lt; B.STUDENTID ;</span><br></pre></td></tr></table></figure><p>You should spent as long as you need to on these queries to make sure you understand them and understand how to build them. </p><p>Here are some pointers for building queries when you practice for your exams: </p><ol><li>The only way to understand how to build queries is to practice</li><li>When you are practicing, first type out your queries in a document so you understand the logic behind the creation of the query. </li><li>Remember that you will not be able to check for syntax errors and correctness during your exams. </li><li>Always indent your queries - remember that indentation allows you to think through a query logically in addition to making the query readable to other people</li></ol><h1 id="Relational-Algebra"><a href="#Relational-Algebra" class="headerlink" title="Relational Algebra"></a>Relational Algebra</h1><h2 id="Basic-Terminology"><a href="#Basic-Terminology" class="headerlink" title="Basic Terminology"></a>Basic Terminology</h2><p><strong>Database</strong> = A Collection of relations (Tables)</p><p><strong>Relations</strong> = Consist of <strong>Attributes</strong> (Columns)</p><p>Data consists of <strong>Tuples</strong> (Rows) and each tuple has a value associated with each attribute. </p><p>Each Attribute has a <strong>Domain</strong> (Type) </p><p>The <strong>Schema</strong> is the structure of the database and includes the Name, Attributes and the Type of each Attribute associated with every relation in a database. </p><p>The <strong>Instance</strong> is the CONTENTS of the tables at a given point in time. </p><p>All values have a type, but there is a special value that is part of all types - <strong>NULL</strong> (Undefined, unknown)</p><p>A <strong>Key</strong> is an Attribute of a relation the value of which is unique for each tuple.</p><h2 id="Example-Tables"><a href="#Example-Tables" class="headerlink" title="Example Tables"></a>Example Tables</h2><p>Through this session we will make use of the following tables: </p><p><strong>Students:</strong> </p><div class="table-container"><table><thead><tr><th>sID</th><th>sName</th><th>sFirstDegree</th><th>sFDMarks</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>English</td><td>77</td></tr><tr><td>2</td><td>Bob</td><td>Fine Art</td><td>80</td></tr></tbody></table></div><p><strong>Modules:</strong></p><div class="table-container"><table><thead><tr><th>mID</th><th>mName</th><th>mLecturer</th></tr></thead><tbody><tr><td>1</td><td>Intro to CS</td><td>Harish</td></tr><tr><td>2</td><td>HCI</td><td>Bob</td></tr><tr><td>3</td><td>Intro to AI</td><td>Harish</td></tr></tbody></table></div><p><strong>StudentModules</strong></p><div class="table-container"><table><thead><tr><th>sID</th><th>mID</th><th>CAMarks</th><th>ExamMarks</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>15</td><td>80</td></tr><tr><td>1</td><td>2</td><td>18</td><td>70</td></tr><tr><td>2</td><td>1</td><td>12</td><td>81</td></tr><tr><td>2</td><td>2</td><td>18</td><td>66</td></tr></tbody></table></div><h2 id="Relational-Algebra-1"><a href="#Relational-Algebra-1" class="headerlink" title="Relational Algebra"></a>Relational Algebra</h2><p>Relational Algebra is a formal language that underpins implemented languages such as SQL</p><p>NOTE: Queries operate on Relations and Produce Relations. </p><p>The simplest query in Relational Algebra is the name of a relation, which returns a copy of the relation. </p><p>Relational Algebra provides operators to:</p><ul><li>Filter relations</li><li>Slice relations </li><li>Combine relations </li></ul><h3 id="The-Select-Operator"><a href="#The-Select-Operator" class="headerlink" title="The Select Operator"></a><strong>The Select Operator</strong></h3><p>The select operator is used to pick a subset of the <strong>rows</strong> from a relation. </p><p>The symbol for the Select Operator is:  $\sigma$<strong>(sigma)</strong></p><p>Notice how we use the logical AND operator: $\hat{}$ (Caret) </p><p>The general form: </p><script type="math/tex; mode=display">\sigma_{(condition \hat{} condition~...)}<TableName></script><p>For example: </p><script type="math/tex; mode=display">\sigma _{sFDMarks > 77} Students</script><p>SQL Equivalent: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM STUDENTS WHERE sFDMarks &gt; 77;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\sigma _{sFDMarks > 77 \hat{} sID > 1} Students</script><p>SQL Equivalent:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM STUDENTS WHERE sFDMarks &gt; 77 AND sID &gt; 1;</span><br></pre></td></tr></table></figure><h3 id="The-Project-Operator"><a href="#The-Project-Operator" class="headerlink" title="The Project Operator"></a><strong>The Project Operator</strong></h3><p>While the select operator picks a subset of rows, the project operator <strong>picks a subset of columns</strong>.</p><p>The symbol for the Project operator is: $\pi$ <strong>(pi)</strong></p><p>The general form is: </p><script type="math/tex; mode=display">\pi_{Attribute,~ Attribute,~ ...} Relation</script><p>For example: </p><script type="math/tex; mode=display">\pi _{sID,~ ExamMarks} StudentModules</script><p>SQL Equivalent:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT sID, ExamMarks from StudentModules;</span><br></pre></td></tr></table></figure><p>Notice how this returns a relation with two cols. It will however have all the Tuples of StudentModules.</p><h3 id="Combining-Operators"><a href="#Combining-Operators" class="headerlink" title="Combining Operators"></a><strong>Combining Operators</strong></h3><p>Since every operator returns a relation we can combine operators as follows: </p><script type="math/tex; mode=display">\pi _{sID,~ ExamMarks} ( \sigma _{ExamMarks > 70} StudentModules )</script><p>SQL Equivalent:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT sID, ExamMarks </span><br><span class="line">FROM ( </span><br><span class="line">    SELECT * </span><br><span class="line">    FROM StudentModules </span><br><span class="line">    WHERE ExamMarks &gt; 70 </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>So notice how the actual <strong>general forms</strong> of these two operators are: </p><script type="math/tex; mode=display">\sigma_{(condition \hat{} condition ...)} (Expression)\\\pi _{Attribute,~ Attribute,~ ... }(Expression)</script><h3 id="Duplicates"><a href="#Duplicates" class="headerlink" title="Duplicates"></a>Duplicates</h3><p>It is important to remember that SQL is based on what are called “multisets” or “bags” and so does allow duplicates whereas Relational Algebra is based on sets and so does NOT allow duplicates. </p><p>The result of every Relational Algebraic expression is distinct. </p><h3 id="Cross-Product-or-Cartesian-Product-Operator"><a href="#Cross-Product-or-Cartesian-Product-Operator" class="headerlink" title="Cross-Product or Cartesian Product Operator"></a>Cross-Product or Cartesian Product Operator</h3><p>This is an operator that is used to combine two relations. </p><p>The schema of the result of a cross product between two relations is a relation whose attributes consists of the union of the two relations and whose contents consists of the cross product of a tuples. </p><p>As a notational requirement, when the <strong>same column name exists in both the relations</strong> then the columns in the result are prefixed by the name of the relation they come from. </p><p>NOTE: The way to think about this is that one needs to explicitly state this in SQL whereas it is the “default” behaviour in Relational Algebra. </p><p>The cross-product of two relations Students and StudentModules is written as: </p><script type="math/tex; mode=display">Students \times StudentModules</script><p>SQL Equivalent:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    Students.sID, sName, sFirstDegree, sFDMarks, mID, </span><br><span class="line">    StudentModules.sID, CAMarks, ExamMarks  </span><br><span class="line">FROM Students, StudentModules;</span><br></pre></td></tr></table></figure><p>WARNING: sID from students is named students.sID and that from StudentModules is called StudentModules.sID which requires explicitly stating this in SQL</p><p>Notice that, just as in SQL, the cross-product is not useful if we do not filter it based on what makes sense. </p><p>In this case, we do this as follows: </p><script type="math/tex; mode=display">\sigma_{(students.sID = StudentModules.sID)} (Students \times StudentModules)</script><p>SQL Equivalent: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    Students.sID, sName, sFirstDegree, sFDMarks, mID, </span><br><span class="line">    StudentModules.sID, CAMarks, ExamMarks  </span><br><span class="line">FROM Students, StudentModules </span><br><span class="line">WHERE Students.sID &#x3D; StudentModules.sID</span><br></pre></td></tr></table></figure><h3 id="Theta-Join"><a href="#Theta-Join" class="headerlink" title="Theta Join"></a>Theta Join</h3><p>The Theta Join operator performs the cross product of two expressions while additionally implementing a condition. </p><p>It is written:  $\Join_{\Theta}$ (bowtie subscript Theta)</p><p>The general form of the Theta Join is:</p><script type="math/tex; mode=display">Exp1 \Join_{<condition>} Exp2</script><p>SQL Equivalent: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM EXP1 JOIN EXP2 ON( &lt;condition&gt; );</span><br></pre></td></tr></table></figure><p>Notice how the following are equivalent: </p><script type="math/tex; mode=display">Exp1 \Join_{\Theta} Exp2</script><p><em>is equivalent to:</em> </p><script type="math/tex; mode=display">\sigma_{\Theta} (Exp1 \times Exp2)</script><h3 id="Natural-Join-Relational-Algebra"><a href="#Natural-Join-Relational-Algebra" class="headerlink" title="Natural Join (Relational Algebra)"></a>Natural Join (Relational Algebra)</h3><p>The Natural Join operator in Relational Algebra, performs the cross-product between two relations and additionally: </p><ol><li>Enforces the equality on all attributes with the same name, and</li><li>Eliminates one copy of the duplicate attribute. </li></ol><p>The symbol for the Natural Join operator is:  $\Join $<strong>(bowtie)</strong></p><p>This operator allows us to write: </p><script type="math/tex; mode=display">\sigma _{(students.sID = StudentModules.sID)} (Students \times StudentModules)</script><p>as</p><script type="math/tex; mode=display">(Students \Join StudentModules)</script><h3 id="More-on-Combining-Operators"><a href="#More-on-Combining-Operators" class="headerlink" title="(More on) Combining Operators"></a><strong>(More on) Combining Operators</strong></h3><p>List the names of the students who secured a score of more than 80 in the final exam in modules taught by Bob. </p><script type="math/tex; mode=display">\pi_{sName} ( \sigma _{ExamMarks > 80 \hat{} mLecturer = 'Bob'} ( (Students \Join StudentModules) \Join Modules) )</script><p>SQL Equivalent: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT sName </span><br><span class="line">FROM (Students Natural Join StudentModules) Natural Join Modules</span><br><span class="line">WHERE ExamMarks &gt; 80 and mLecturer &#x3D; &#39;Bob&#39;;</span><br></pre></td></tr></table></figure><p>Notice that the parenthesis is not required but joins are binary operators. </p><p>The Natural Join does NOT add expressive power to Relational Algebra because it can be rewritten using a combination of projection, selection and cross-product. </p><p><strong>EXERCISE</strong>: Write the equivalent Relational Algebraic expression for the Natural Join above, without using a Natural Join. </p><h3 id="Rename-Operator"><a href="#Rename-Operator" class="headerlink" title="Rename Operator"></a><strong>Rename Operator</strong></h3><p>The rename operator allows one to rename a relation and/or it’s attributes. </p><p>The rename operator is written as: $\rho$ <strong>(Rho)</strong></p><p>The general form of the rename operator is: </p><script type="math/tex; mode=display">\rho _{R( A1,~ A2,~ ... ~An)} (E)</script><p>SQL Equivalent: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT EA1 AS A1, EA2 AS A2 ... EAn AS An </span><br><span class="line">FROM E AS R</span><br></pre></td></tr></table></figure><p>Shortened versions</p><p>If we only want to rename the relation and keep the original Attribute names we write it as: </p><script type="math/tex; mode=display">\rho_R (E)</script><p>Similarly, if we only want to rename the Attributes but not the relation AND there is more than one attribute we want to rename , we exwrite this as: </p><script type="math/tex; mode=display">\rho _{A1,~ A2,~ ...~ An} (E)</script><h3 id="Self-Joins"><a href="#Self-Joins" class="headerlink" title="Self Joins"></a><strong>Self Joins</strong></h3><p>While the rename operator is used for various kinds of queries, the most important is the self join which would not be possible without this. </p><p>Example: List the pairs of modules taught by the same lecturer. </p><p>The only way to do this is to use a self join. </p><script type="math/tex; mode=display">\sigma_{( mLecturer = mLecturer)} (Modules \times Modules)</script><p>Since this does not clearly tell us which mName to equate to which, we must rename the two relations and the corresponding attributes. </p><p>So we have: </p><script type="math/tex; mode=display">\begin{align}&\rho _{M1( M1.mID,~ M1.mName,~ mLecturer )}(Modules ) ⋈\\&\rho _{M2( M2.mID,~ M2.mName,~ mLecturer )}(Modules )\end{align}</script><p>Of course, to avoid duplicates and A, B; B, A we must have: </p><script type="math/tex; mode=display">\begin{align}&\pi_{( M1.mLecturer ,~ M2.mLecturer )} (\\&~~~~\sigma_{( M1.mName < M2.mName )} (\\&~~~~~~~~\rho _{M1( M1.mID,~ M1.mName,~ mLecturer )}(Modules ) ⋈\\&~~~~~~~~\rho _{M2( M2.mID,~ M2.mName,~ mLecturer )}(Modules )\\&~~~~)\\&)\end{align}</script><h3 id="Set-Operators"><a href="#Set-Operators" class="headerlink" title="Set Operators"></a><strong>Set Operators</strong></h3><p>The three set operators are:</p><p>Union: $\cup$</p><p>Difference: $-$</p><p>Intersection: $\cap$</p><h3 id="Special-Notes"><a href="#Special-Notes" class="headerlink" title="Special Notes:"></a>Special Notes:</h3><p>In relational Algebra these three set operators MUST be applied on the SAME schema. This means that if you want to find the union of lecture names and student names you MUST first rename them. </p><p>Notice also that the Intersection operator does NOT add expressive power to Relational Algebra: </p><script type="math/tex; mode=display">E1 \cap E2</script><p><em>is equivalent to</em></p><script type="math/tex; mode=display">E1 - ( E1 - E2 )</script><p>Also: </p><script type="math/tex; mode=display">E1 \cap E2</script><p><em>is equivalent to</em></p><script type="math/tex; mode=display">E1 \Join E2</script><h3 id="Relational-Expression-Trees"><a href="#Relational-Expression-Trees" class="headerlink" title="Relational Expression Trees"></a>Relational Expression Trees</h3><p>Often, relational expressions are drawn as expression trees. </p><ul><li>Each node in the tree represents an operator</li><li>The leaves are relations</li><li>Any subtrees are subqueries. </li></ul><h1 id="Design-Theory-of-Relational-Databases"><a href="#Design-Theory-of-Relational-Databases" class="headerlink" title="Design Theory of Relational Databases"></a>Design Theory of Relational Databases</h1><h2 id="Relational-Design-by-Decomposition"><a href="#Relational-Design-by-Decomposition" class="headerlink" title="Relational Design by Decomposition"></a>Relational Design by Decomposition</h2><p>In its simplest form, all data can be stored in one “mega” table with several columns. </p><p>The problem with this is: a) The redundancy in data will lead to a tremendous amount of wasted space, and b) retrieving data becomes slower because of the increased size of the table (relation). </p><p>To get around this we “decompose” (break down) this “mega” table into several smaller tables. </p><p>We have studied two important concepts which help with maintaining data AFTER breaking down data: a) constraints to ensure data consistency and b) joins (and the cross-product) to retrieve data from multiple tables. </p><p>We are now going to look at a method that requires this mega table defined <em>along with some properties that we want the “decomposed” tables to maintain</em>. Once we do this, the methods we are about to look at will automatically decompose the mega table into smaller tables for us. It is important that this process results in tables that have no lost information or inconsistencies.</p><p>The following table provides details on methods of decomposition and resultant normal forms:</p><div class="table-container"><table><thead><tr><th><strong>Dependencies defined at</strong></th><th><strong>Resultant decomposition</strong></th><th><strong>In Syllabus</strong></th></tr></thead><tbody><tr><td>Functional Dependencies</td><td>First Normal Form</td><td>Yes</td></tr><tr><td>Functional Dependencies</td><td>Second Normal Form</td><td>NO</td></tr><tr><td>Functional Dependencies</td><td>Third Normal Form</td><td>NO</td></tr><tr><td>Functional Dependencies</td><td>Boyce-Codd Normal Form</td><td>Yes</td></tr><tr><td>Multivalued Dependencies</td><td>4th Normal Form</td><td>NO</td></tr></tbody></table></div><h2 id="Functional-Dependencies"><a href="#Functional-Dependencies" class="headerlink" title="Functional Dependencies"></a>Functional Dependencies</h2><p>Function dependencies are a generalisation of the idea of <em>keys</em>. As such they are generally useful in other aspects of databases such as in reasoning about queries. </p><p>They are dependencies :</p><ul><li>that are based on knowledge of the real world (similar to what we had in defining ERDs)</li><li>such that all instances of a relation must adhere to them. </li></ul><h3 id="Tables-used-for-studying-FD"><a href="#Tables-used-for-studying-FD" class="headerlink" title="Tables used for studying FD"></a>Tables used for studying FD</h3><p><strong>Students</strong></p><div class="table-container"><table><thead><tr><th><strong>sID</strong></th><th><strong>sName</strong></th><th><strong>sAddress</strong></th><th><strong>FDUniCode</strong></th><th><strong>FDUniName</strong></th><th><strong>FDUniCity</strong></th><th><strong>FDMark</strong></th><th><strong>FDGrade</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p><strong>Courses</strong></p><div class="table-container"><table><thead><tr><th><strong>sID</strong></th><th><strong>cName</strong></th><th><strong>cSchool</strong></th><th><strong>StartDate</strong></th><th><strong>cSpecialisation</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table></div><h3 id="Functional-Dependencies-Motivation-and-Notation"><a href="#Functional-Dependencies-Motivation-and-Notation" class="headerlink" title="Functional Dependencies - Motivation and Notation"></a>Functional Dependencies - Motivation and Notation</h3><p>Consider the attribute “FDGrade” from the students’ table. This column (attribute) is based on the Student’s mark. For example, the a mark of 90 could translate to a grade of A+, 80 to A, and so on. </p><p><strong>So, suppose FDGrade is determined by FDMark</strong></p><p>then, <strong>any two tuples that have the same FDMark have the same FDGrade.</strong></p><p> Formally, </p><p>$\forall~ t,~ u \in Students:$</p><script type="math/tex; mode=display">t.FDMark = u.FDMark \Rightarrow t.FDGrade = u.FDGrade</script><p>This is the formal definition of relational dependencies and is read: <strong>For every</strong> t, u which are <strong>elements of</strong> Students, t.FDMark = u.FDMark <strong>implies</strong>t.FDGrade = u.FDGrade. </p><p>This functional dependency is written: </p><script type="math/tex; mode=display">FDMark \rightarrow FDGrade</script><p>In General, the definition of a functional dependency is: </p><p>$A \rightarrow B$   on a Relation <strong>R</strong> (read: <em>A</em> functionally determines <em>B</em> in relation R)</p><p>is: </p><p>$\forall~ t,~ u \in R$:</p><script type="math/tex; mode=display">t.A = u.A \Rightarrow t.B = u.B</script><p>We can <strong>generalise this further</strong>, because there is no restriction on having just one attribute on the left and the right of a functional dependency. </p><script type="math/tex; mode=display">A_1,~A_2,~ A_3,~ ...,~ A_n \rightarrow B_1,~ B_2,~ B_3,~ ...,~ B_m</script><p>is defined as: </p><p>$\forall~ t,~ u \in R$:</p><script type="math/tex; mode=display">\begin{align}&t.[A1 ,A2, A3, ..., An] = u.[A1 ,A2, A3, ..., An] \\\Rightarrow ~~ &t.[B1, B2, B3, ..., Bm ] = u.[B1, B2, B3, ..., Bm ]\end{align}</script><h3 id="More-notation"><a href="#More-notation" class="headerlink" title="More notation:"></a>More notation:</h3><p>For simplicity, we will sometimes write $A_1,~A_2,~ A_3,~ …,~ A_n$ as $\bar A$ and $B_1,~ B_2,~ B_3,~ …,~ B_m$ as $\bar B$</p><p>So we have: </p><script type="math/tex; mode=display">\bar A \rightarrow \bar B</script><p><em>(read: a set of attributes $ \bar A $  functionally determines a set of attributes $ \bar B $ in relation R)</em></p><p>is defined as: </p><p>$\forall~ t,~ u \in R$:</p><script type="math/tex; mode=display">t.\bar A = u.\bar A \rightarrow t.\bar B = u.\bar B</script><h3 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h3><h3 id="Interpreting-Functional-Dependencies"><a href="#Interpreting-Functional-Dependencies" class="headerlink" title="Interpreting Functional Dependencies"></a>Interpreting Functional Dependencies</h3><p>The functional dependency </p><script type="math/tex; mode=display">\bar A \rightarrow \bar B</script><p>can be visualised as </p><div class="table-container"><table><thead><tr><th>$\bar A$</th><th>$\bar B$</th><th>$\bar C$</th></tr></thead><tbody><tr><td>$\bar a$</td><td>$\bar b$</td><td>$\bar {c1}$</td></tr><tr><td>$\bar a$</td><td>$\bar b$</td><td>$\bar {c2}$</td></tr></tbody></table></div><p><strong>Note</strong> that in the above representation $\bar A,~\bar B$ and $\bar C$ can be more than one column. </p><p>Understanding Functional Dependencies with an Example</p><p>Let’s consider the Students relation that we introduced earlier. </p><p><strong>Students</strong></p><div class="table-container"><table><thead><tr><th><strong>sID</strong></th><th><strong>sName</strong></th><th><strong>sAddress</strong></th><th><strong>FDUniCode</strong></th><th><strong>FDUniName</strong></th><th><strong>FDUniCity</strong></th><th><strong>FDMark</strong></th><th><strong>FDGrade</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>Here are the functional dependencies associated with this table (based on assumptions we make about the real word):</p><p><strong>sID $\rightarrow$ sName</strong> <em>(We assume no two students can have the same name)</em></p><p><strong>sID $\rightarrow$ sAddress</strong> <em>(We assume that a student does not move)</em></p><p><strong>FDUniCode $\rightarrow$ FDUniName, FDUniCity</strong> <em>(The first degree university code uniquely identifies the name of the university and the city that it is in.)</em></p><p><strong>FDUniName, FDUniCity $\rightarrow$ FDUniCode</strong></p><p><strong>sID $\rightarrow$ FDMark</strong> <em>(We assume that every student has one combined mark)</em></p><p><strong>FDMark $\rightarrow$ FDGrade</strong> (We’ve seen this already)</p><p><strong>sID $\rightarrow$ FDGrade</strong> (Looks very much like transitivity!)</p><h2 id="Rules-for-Functional-Dependencies"><a href="#Rules-for-Functional-Dependencies" class="headerlink" title="Rules for Functional Dependencies"></a>Rules for Functional Dependencies</h2><h3 id="Functional-Dependencies-and-Keys"><a href="#Functional-Dependencies-and-Keys" class="headerlink" title="Functional Dependencies and Keys"></a>Functional Dependencies and Keys</h3><p>If we have a relation, R, with no duplicates then:</p><p>if $\bar A$ $\rightarrow$ all attributes of $R$, then $\bar  A$ is a Key</p><p>Recall the definition of a Key: </p><p>$\bar a$ is said to be a key iff (if and only if) there are no two tuples with the exact same values of $\bar a$</p><p><strong>Proof:</strong> </p><p>Consider the visualisation of the relation R(A,B) : </p><div class="table-container"><table><thead><tr><th>$\bar A $</th><th>$ \bar B $</th></tr></thead><tbody><tr><td>$\bar a $</td><td>$\bar {b1}$</td></tr><tr><td>$ \bar a $</td><td>$\bar {b2}$</td></tr></tbody></table></div><p>We know that $\bar A$ $\rightarrow$ all attributes of $R$</p><p>So it must be the case that $\bar {b1}=\bar {b2}$</p><p>So the table MUST be: </p><div class="table-container"><table><thead><tr><th>$\bar A $</th><th>$ \bar B $</th></tr></thead><tbody><tr><td>$\bar a $</td><td>$\bar {b}$</td></tr><tr><td>$ \bar a $</td><td>$\bar {b}$</td></tr></tbody></table></div><p>We additionally, know that there are no duplicate values in R. Therefore the above values in the relation are absurd. </p><p>Proved by <em>reductio ad absurdum</em>. </p><h3 id="Trivial-Functional-Dependencies"><a href="#Trivial-Functional-Dependencies" class="headerlink" title="Trivial Functional Dependencies"></a>Trivial Functional Dependencies</h3><p>A functional dependency $\bar A \rightarrow \bar B$ is said to be a Trivial Functional Dependency if $\bar B ⊆ \bar A$</p><p><img src="/2020/04/04/Database/23.png" style="zoom:50%;"></p><p><strong>Warning:</strong> This illustration makes it appear like there is nothing more than A and B - that need not be the case. There might be columns not part of A or B. This table also writes$\bar A,~\bar B$ as $A,~B$. </p><h3 id="Nontrivial-Functional-Dependencies"><a href="#Nontrivial-Functional-Dependencies" class="headerlink" title="Nontrivial Functional Dependencies"></a>Nontrivial Functional Dependencies</h3><p>A functional dependency $\bar A \rightarrow \bar B$ is said to be a nontrivial Functional Dependency if it is NOT the case that $\bar B ⊆ \bar A$</p><p><img src="/2020/04/04/Database/24.png" style="zoom:50%;"></p><p><strong>Warning:</strong> This illustration makes it appear like there is nothing more than A and B - that need not be the case. There might be columns not part of A or B. This table also writes $\bar A,~\bar B$ as $A,~B$. </p><h3 id="Completely-Nontrivial-Functional-Dependencies"><a href="#Completely-Nontrivial-Functional-Dependencies" class="headerlink" title="Completely Nontrivial Functional Dependencies"></a>Completely Nontrivial Functional Dependencies</h3><p>A functional dependency $\bar A \rightarrow \bar B$ is said to be a completely nontrivial Functional Dependency if $A \cap B = \empty$</p><p><img src="/2020/04/04/Database/25.png" style="zoom:50%;"></p><p><strong>Warning:</strong> This illustration makes it appear like there is nothing more than A and B - that need not be the case. There might be columns not part of A or B. This table also writes $\bar A,~\bar B$ as $A,~B$.  </p><p>These are the most interesting kinds of functional dependencies and we will study them in the most detail.</p><h3 id="Splitting-Rule-for-Functional-Dependencies"><a href="#Splitting-Rule-for-Functional-Dependencies" class="headerlink" title="Splitting Rule for Functional Dependencies."></a>Splitting Rule for Functional Dependencies.</h3><p>The splitting rules states that if </p><script type="math/tex; mode=display">\bar A \rightarrow B_1,~ B_2,~ B_3,~ ... ,~ B_m</script><p><strong>Then it follows that:</strong></p><script type="math/tex; mode=display">\bar A \rightarrow B_1 ,~ \bar A \rightarrow B_2 ,~ \bar A \rightarrow B_3 ,~ ... ,~  \bar A \rightarrow B_m</script><p><strong>WARNING</strong>: The splitting rule does NOT work the other way. i.e you cannot split the right hand side of a functional dependency. </p><p><strong>Here is why not:</strong> </p><p><strong>Students</strong></p><div class="table-container"><table><thead><tr><th><strong>sID</strong></th><th><strong>sName</strong></th><th><strong>sAddress</strong></th><th><strong>FDUniCode</strong></th><th><strong>FDUniName</strong></th><th><strong>FDUniCity</strong></th><th><strong>FDMark</strong></th><th><strong>FDGrade</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>Notice that we had: </p><p><strong>FDUniName, FDUniCity $\rightarrow$ FDUniCode</strong></p><p>Clearly it is not the case that: </p><p><strong>FDUniCity</strong> <strong>$\rightarrow$</strong> <strong>FDUniCode</strong> <em>(there could be more than one</em> <em>university in a city)</em></p><h3 id="Combining-Rule-for-Functional-Dependencies"><a href="#Combining-Rule-for-Functional-Dependencies" class="headerlink" title="Combining Rule for Functional Dependencies"></a>Combining Rule for Functional Dependencies</h3><p>The combining rule is the opposite of the splitting rule and states that if </p><script type="math/tex; mode=display">\bar A \rightarrow B_1 ,~ \bar A \rightarrow B_2 ,~ \bar A \rightarrow B_3 ,~ ... ,~  \bar A \rightarrow B_m</script><p><strong>Then it follows that:</strong></p><script type="math/tex; mode=display">\bar A \rightarrow B_1,~ B_2,~ B_3,~ ... ,~ B_m</script><h3 id="Trivial-Dependency-Rules"><a href="#Trivial-Dependency-Rules" class="headerlink" title="Trivial Dependency Rules"></a>Trivial Dependency Rules</h3><p>Reminder: A functional dependency $\bar A \rightarrow \bar B$ is said to be a Trivial Functional Dependency if $\bar B ⊆ \bar A$.</p><p><strong>Rule 1</strong></p><p>if $\bar A \rightarrow \bar B$ is a Trivial Dependency, then$\bar A \rightarrow \bar A \cup \bar B$ is a Dependency</p><p><strong>Rule 2</strong></p><p>if $\bar A \rightarrow \bar B$ is a Trivial Dependency, then  $\bar A \rightarrow \bar A \cap \bar B$is a Dependency</p><h3 id="Transitive-Rule-for-Functional-Dependencies"><a href="#Transitive-Rule-for-Functional-Dependencies" class="headerlink" title="Transitive Rule for Functional Dependencies"></a>Transitive Rule for Functional Dependencies</h3><p>The Transitive Rule for functional Dependencies states: </p><p>if </p><script type="math/tex; mode=display">\bar A \rightarrow \bar B~~and~~\bar B \rightarrow \bar C</script><p>then </p><script type="math/tex; mode=display">\bar A \rightarrow \bar C</script><p>Consider the following illustration of a relation to prove this. Once again we do not use the bar on top in the illustration. </p><p><img src="/2020/04/04/Database/26.png" style="zoom:50%;"></p><p>Given that two tuples have the same values for A (namely ‘a’), we know from the first functional dependency that b1 must be equal to b2. </p><p>From the second functional dependency, we know that if b1 and b2 are equal then c1 and c2 must be equal. </p><p>Therefore, if there are two equal values in the column A, then the corresponding values in the column C must be equal. </p><p>And so, we can say that A functionally determines C. </p><p><strong>Exercise</strong>: Similarly prove the rest of the rules stated above. </p><h3 id="Closure-of-Attributes"><a href="#Closure-of-Attributes" class="headerlink" title="Closure of Attributes"></a>Closure of Attributes</h3><p>The closure of attributes $\bar A$, given a relation and functional dependencies is ALL $\bar B$ such that $\bar A \rightarrow \bar B$</p><p>It is written $\bar {A^+} $ (a superscript +)</p><p>The following is an Algorithm to calculate the closure: </p><ul><li>Start with a result set that initially contains all attributes in $\bar A$</li><li>Repeat until no change:<ul><li>If $\bar A \rightarrow \bar B$ and $\bar A$ (all elements in $\bar A$ are) part of our result set, then add all elements of $\bar B$ to the result set. </li></ul></li></ul><h3 id="An-Example-of-using-these-rules"><a href="#An-Example-of-using-these-rules" class="headerlink" title="An Example of using these rules"></a>An Example of using these rules</h3><p><strong>Students</strong></p><div class="table-container"><table><thead><tr><th><strong>sID</strong></th><th><strong>sName</strong></th><th><strong>sAddress</strong></th><th><strong>FDUniCode</strong></th><th><strong>FDUniName</strong></th><th><strong>FDUniCity</strong></th><th><strong>FDMark</strong></th><th><strong>FDGrade</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>Here are the functional dependencies associated with this table (based on assumptions we make about the real word):</p><ol><li><strong>sID $\rightarrow$ sName</strong> <em>(We assume no two students can have the same name)</em></li><li><strong>sID $\rightarrow$ sAddress</strong> <em>(We assume that a student does not move)</em></li><li><strong>FDUniCode $\rightarrow$ FDUniName, FDUniCity</strong> <em>(The first degree university code uniquely identifies the name of the university and the city that it is in.)</em></li><li><strong>FDUniName, FDUniCity $\rightarrow$ FDUniCode</strong></li><li><strong>sID $\rightarrow$ FDMark</strong> <em>(We assume that every student has one combined mark)</em></li><li><strong>FDMark $\rightarrow$ FDGrade</strong> (We’ve seen this already)</li></ol><p>Notice how the functional dependencies 5 and 6 also imply:</p><ol><li><strong>sID $\rightarrow$</strong>FDGrade <em>(Transitivity)</em></li></ol><p>Also, rules 1, 2 and 6 above imply: </p><ol><li><strong>sID $\rightarrow$ sName, sAddress, FDMark</strong> <em>(Combining Rule)</em></li></ol><p>Let us consider the following subset of these functional dependencies: </p><ul><li><strong>sID $\rightarrow$ sName, sAddress, FDMark</strong> </li><li><strong><em>FDMark $\rightarrow$ FDGrade</em></strong></li><li><strong>FDUniCode $\rightarrow$ FDUniName, FDUniCity</strong></li></ul><p>Now use the let’s use the algorithm for finding the closure to find: </p><script type="math/tex; mode=display">\{ sID,~ FDUniCode \}^+ (The closure)</script><p>Recall that when a set of attributes functionally determine all the attributes of a relation, then those attributes are the key. </p><h3 id="Closure-and-Keys"><a href="#Closure-and-Keys" class="headerlink" title="Closure and Keys"></a>Closure and Keys</h3><p>To check if $\bar A$ is a key for $R$ (given some FDs): </p><p>Computer $\bar {A^+}$ and if that is equal to all attributes, then $\bar A$ is a key for $R$</p><p>More generally, how do we find all the keys for a relation R (given some FDs)?</p><ul><li>We must compute the closure for all subsets, $\bar A$ , of the attributes in R and check if that is equal to all the attributes. </li><li>A simplification is to start with the smaller subsets and if we find a key we can ignore all sets that contain this set. </li></ul><h3 id="What-do-we-want-after-Decomposition"><a href="#What-do-we-want-after-Decomposition" class="headerlink" title="What do we want after Decomposition?"></a>What do we want after Decomposition?</h3><p>We want a minimal set of completely non-trivial functional dependencies such that all functional dependencies that hold on the relation follow from this set. </p><h1 id="Boyce-Codd-Normal-Form"><a href="#Boyce-Codd-Normal-Form" class="headerlink" title="Boyce-Codd Normal Form"></a>Boyce-Codd Normal Form</h1><h2 id="Decomposition-of-a-Relational-Schema"><a href="#Decomposition-of-a-Relational-Schema" class="headerlink" title="Decomposition of a Relational Schema"></a>Decomposition of a Relational Schema</h2><p>Fundamentally, the decomposition of a relational schema implies that we start with: </p><p>a relation $R$ with attributes $A_1,~ … ~A_m$ (Represented by $\bar A $)</p><p>We must create two new relations </p><p>$R_1$ with attributes $B_1,~ … ~B_n$ (Represented by $\bar B $)</p><p>$R_2$ with attributes $C_1,~ … ~C_o$ (Represented by $\bar C $)</p><p>Such that: </p><p>The $\bar B \cup \bar C=\bar A $  (i.e. $R_1$ and $R_2$ together contain all the attributes in $\bar  A $) </p><p>AND</p><p>$R_1 \Join R_2 = R$</p><h3 id="This-can-be-illustrated-as"><a href="#This-can-be-illustrated-as" class="headerlink" title="This can be illustrated as:"></a>This can be illustrated as:</h3><p><img src="/2020/04/04/Database/27.png" style="zoom:50%;"></p><p>Using Relational Algebra, we can write this as: </p><script type="math/tex; mode=display">R_1=\pi_{\bar B}(R)\\R_2=\pi_{\bar C}(R)</script><h2 id="Boyce-Codd-Normal-Form-1"><a href="#Boyce-Codd-Normal-Form-1" class="headerlink" title="Boyce-Codd Normal Form"></a>Boyce-Codd Normal Form</h2><p>Relation R with associated Functional Dependencies are in Boyce-Codd Normal Form (BCNF) if: </p><p>For each $\bar A \rightarrow \bar B$ , $\bar A $ is a Key. </p><h3 id="Example-Relations-NOT-in-BCNF"><a href="#Example-Relations-NOT-in-BCNF" class="headerlink" title="Example: Relations NOT in BCNF"></a>Example: Relations NOT in BCNF</h3><p>Let’s consider a <strong>BAD</strong> example when there exist relations where the left hand side is NOT a key. </p><p>Notice that the following is possible when A is not a key:</p><p><img src="/2020/04/04/Database/28.png" style="zoom:50%;"></p><p>$\bar A \rightarrow \bar B$</p><p>Notice also, that the relation a, b is being captured multiple times leading to redundancy. It is for these reasons that this is BAD. </p><p>This is NOT in BCNF form and the functional dependency $\bar A \rightarrow \bar B$ where $\bar A $ is not a Key is called a <strong>BCNF violation.</strong></p><p><strong>NOTE:</strong> This does not mean that the left hand side of every functional dependency must be declared as a primary key of that table. </p><h3 id="Concrete-Example-1"><a href="#Concrete-Example-1" class="headerlink" title="Concrete Example 1"></a>Concrete Example 1</h3><p>Let us consider an example we’ve seen before: </p><p><strong>Students</strong></p><div class="table-container"><table><thead><tr><th><strong>sID</strong></th><th><strong>sName</strong></th><th><strong>sAddress</strong></th><th><strong>FDUniCode</strong></th><th><strong>FDUniName</strong></th><th><strong>FDUniCity</strong></th><th><strong>FDMark</strong></th><th><strong>FDGrade</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>With the associated Functional Dependencies:</p><ul><li><strong>sID $\rightarrow$ sName, sAddress, FDMark</strong> </li><li><strong><em>FDMark $\rightarrow$ FDGrade</em></strong></li><li><strong>FDUniCode $\rightarrow$ FDUniName, FDUniCity</strong></li></ul><h3 id="Is-this-in-BCNF"><a href="#Is-this-in-BCNF" class="headerlink" title="Is this in BCNF?"></a>Is this in BCNF?</h3><p>Keys: </p><p>Remember (from Closure) that they key is {sID, FDUniCode}</p><p>Does every Functional Dependency have a key on the left hand side?</p><p><strong>NO</strong></p><p>And so this is NOT in BCNF. </p><h3 id="Concrete-Example-2"><a href="#Concrete-Example-2" class="headerlink" title="Concrete Example 2"></a>Concrete Example 2</h3><p>Let us now consider: </p><p><strong>Courses</strong></p><div class="table-container"><table><thead><tr><th><strong>sID</strong></th><th><strong>cName</strong></th><th><strong>cSchool</strong></th><th><strong>StartDate</strong></th><th><strong>cSpecialisation</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>And the associated functional dependencies: </p><ul><li><strong>sID, cSchool, cName $\rightarrow$ StartDate, cSpecialisation</strong></li></ul><p>What this says is: A single student having taken a course at a particular school (CS, Physics, … ) has a given start date and specialisation. The student cannot take two specialisations at the same school on the same course!</p><p>It is clear here that the left hand side of the only relation that we have is a Key because they determine ALL the other attributes in the relation. </p><p>This IS in BCNF.</p><h2 id="BCNF-Decomposition-Algorithm"><a href="#BCNF-Decomposition-Algorithm" class="headerlink" title="BCNF Decomposition Algorithm"></a>BCNF Decomposition Algorithm</h2><p>The following is the algorithm to decompose a relation into a set of relations that are in BCNF for a given set of functional dependencies. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: The relation R and the set of functional dependencies for that relation</span><br><span class="line">Output: Decomposition or R into BCNF relations</span><br><span class="line"></span><br><span class="line">Compute Keys for R</span><br><span class="line">Repeat until all relations are in BCNF: </span><br><span class="line">     Pick any R&#39; with A $\rightarrow$ B that violates BCNF</span><br><span class="line">     Decompose R&#39; into R1( A, B ) and R2( A, Rest ) </span><br><span class="line">     Compute functional dependencies for R1 and R2</span><br><span class="line">     Compute Keys for R1 and R2</span><br></pre></td></tr></table></figure><p>This can be visualised as: </p><p><img src="/2020/04/04/Database/29.png" style="zoom:50%;"></p><p>Notice that this ensures that the union of the attributes from R1 and R2 will give the attributes in R. </p><p><strong>WARNING:</strong> Computing the functional dependencies for R1 and R2 requires the computation of the closure! There might be implied relations that do apply to R1 or R2 which the explicitly written out dependencies do not cover. </p><h3 id="BCNF-Decomposition-Algorithm-Example"><a href="#BCNF-Decomposition-Algorithm-Example" class="headerlink" title="BCNF Decomposition Algorithm, Example"></a>BCNF Decomposition Algorithm, Example</h3><p>Let’s convert the following to BCNF: </p><p><strong>Students</strong></p><div class="table-container"><table><thead><tr><th><strong>sID</strong></th><th><strong>sName</strong></th><th><strong>sAddress</strong></th><th><strong>FDUniCode</strong></th><th><strong>FDUniName</strong></th><th><strong>FDUniCity</strong></th><th><strong>FDMark</strong></th><th><strong>FDGrade</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>With the associated Functional Dependencies:</p><ol><li><strong>sID $\rightarrow$ sName, sAddress, FDMark</strong> </li><li><strong><em>FDMark $\rightarrow$ FDGrade</em></strong></li><li><strong>FDUniCode $\rightarrow$ FDUniName, FDUniCity</strong></li></ol><p>Note that the key for this is {sID, FDUniCode}</p><p>The complete list of attributes is</p><div class="table-container"><table><thead><tr><th><strong>sID</strong></th><th><strong>sName</strong></th><th><strong>sAddress</strong></th><th><strong>FDUniCode</strong></th><th><strong>FDUniName</strong></th><th><strong>FDUniCity</strong></th><th><strong>FDMark</strong></th><th><strong>FDGrade</strong></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>Let’s start with FDUniCode $\rightarrow$ FDUniName, FDUniCity which violates BCNF. </p><p><strong>S1</strong>: [FDUniCode, FDUniName, FDUniCity]</p><p><strong>S2</strong>: [sID, sNames, Address, FDUniCode, FDMark, FDGrade]</p><p>The only functional dependency for S1 is 3 and the left andside of it is the key in this relation, so S1 satisfies BCNF</p><p>S2, however is not in BCNF and the following functional dependencies hold for this relation</p><ol><li><strong>sID $\rightarrow$ sName, sAddress, FDMark</strong> </li><li><strong><em>FDMark $\rightarrow$ FDGrade</em></strong></li></ol><p>Let’s now consider the violating dependency (2) above. </p><p>Using the above algorithm, we get the following decomposition for</p><p><strong>S2</strong>: [sID, sNames, Address, FDUniCode, FDMark, FDGrade]</p><p><strong>S3</strong>: [ FDMark, FDGrade ]</p><p><strong>S4</strong>: [sID, sNames, Address, FDUniCode, FDMark]</p><p>S3 is now in BCNF, however, S4 isn’t. </p><p>Once again, we decompose S4: [sID, sNames, Address, FDUniCode, FDMark]</p><p>S4 still has <strong>both elements of the key</strong> and so is in violation of functional dependency (1) above.</p><p>We decompose this using the as follows: </p><p><strong>S5</strong>: [sID, sName, sAddress, FDMark]</p><p><strong>S6</strong>: [sID, FDUniCode]</p><p>Both of these are in BCNF. So the final relation schema consists of S1, S3, S5 and S6</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The ne
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Introduction to AI -  Naive Bayes and Logic</title>
    <link href="http://yoursite.com/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/"/>
    <id>http://yoursite.com/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/</id>
    <published>2020-04-04T11:27:56.020Z</published>
    <updated>2020-04-04T15:29:43.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bayes-Theorem-and-Naive-Bayes"><a href="#Bayes-Theorem-and-Naive-Bayes" class="headerlink" title="Bayes Theorem and Naive Bayes"></a>Bayes Theorem and Naive Bayes</h1><h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><ul><li>Bayes theorem </li><li>Naive Bayes</li><li>Naive Bayes in machine learning</li><li>Naive Bayes for continuous input attributes</li><li>Advantages and disadvantages</li><li>Applications</li></ul><h2 id="Bayes-Theorem-everywhere-in-our-life"><a href="#Bayes-Theorem-everywhere-in-our-life" class="headerlink" title="Bayes Theorem everywhere in our life"></a>Bayes Theorem everywhere in our life</h2><blockquote><p>What the chance of getting wet on our way to the university?</p></blockquote><h2 id="Probability"><a href="#Probability" class="headerlink" title="Probability"></a>Probability</h2><p>Probability gives a numerical description of how likely an event is to occur:</p><ul><li><p>Probability of event(outcome)A:P(A) </p><ul><li>P(rainy) = 0.3</li><li>P(snowy) = 0.05</li><li>P(a coin lands on its head) = 0.5</li></ul></li><li><p>P(A) + P(^A)=1.0</p><ul><li>P(rainy) + P(notrainy)=1,so P(notrainy)=0.7</li></ul></li></ul><h2 id="Random-variables"><a href="#Random-variables" class="headerlink" title="Random variables"></a>Random variables</h2><p>A random variable is avariable to describe the outcome of a random experiment</p><p>Consider a discrete random variable Weather </p><ul><li>P(Weather = rainy) = 0.3</li><li>P(Weather = snowy) = 0.05</li><li>P(Weather = sunny) = 0.4</li><li>P(Weather = cloudy) = 0.25</li></ul><p>Sum of the probabilities of all the outcomes is 1</p><script type="math/tex; mode=display">\sum { }_{Weather~ \in ~\{rainy,~sonwy,~sunny,~cloudy\}} P(Weather) = 1</script><h2 id="Probability-of-multiple-random-variables"><a href="#Probability-of-multiple-random-variables" class="headerlink" title="Probability of multiple random variables"></a>Probability of multiple random variables</h2><p>We may want to know the probability of two or more events occurring, e.g.,</p><ul><li>P(Weather = rainy, Season = winter) = 0.1</li><li>P(Weather = rainy, Season = spring) = 0.15</li><li>P(Weather = snowy, Season = summer) = 0</li></ul><p>Joint probability of events A and B: P(A,B) or P(A B)</p><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/01.png" style="zoom:25%;"></p><h2 id="Conditional-Probability"><a href="#Conditional-Probability" class="headerlink" title="Conditional Probability"></a>Conditional Probability</h2><p>We may also be interested in the probability of an event given the occurrence of another event: P(A given B) or P(A $\mid$ B)</p><ul><li>P(Weather = rainy $\mid$ Season = winter) = 0.2</li><li>P(Weather = rainy $\mid$ Season = spring) = 0.3</li><li>P(Weather = snowy $\mid$ Season = winter) = 0.5</li></ul><script type="math/tex; mode=display">P(A \mid B) = \cfrac{P(A,B)}{P(B)}</script><script type="math/tex; mode=display">P(A \mid B) + P( \hat A \mid B) = 1</script><script type="math/tex; mode=display">P(A \mid B) = \cfrac{P(A,B)}{P(B)} \Longrightarrow P(A,B) = P(A \mid B) P(B)</script><h3 id="Calculating-a-conditional-probability-without-the-joint-probability"><a href="#Calculating-a-conditional-probability-without-the-joint-probability" class="headerlink" title="Calculating a conditional probability without the joint probability"></a>Calculating a conditional probability without the joint probability</h3><script type="math/tex; mode=display">P(A \mid B) = \cfrac{P(A) \cdot P(B \mid A)}{P(B)}</script><p>Where:</p><ul><li>$A$: Hypothesis</li><li>$B$: Evidence</li><li>$P(A \mid B)$: Posterior Probability</li><li>$P(A)$: Prior Probability</li><li>$P(B \mid A$: Likelihood</li><li>$P(B)$: Evidence Probability</li></ul><script type="math/tex; mode=display">P(H \mid E) = \cfrac{P(H) \cdot P(E \mid H)}{P(E)}</script><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>What the chance of getting wet on our way to the university?</p><ul><li>Probability of raining at Birmingham in March is 0.4</li><li>Probability of taking an umbrella when raining is 0.9</li><li>Probability of taking an umbrella when not raining is 0.2</li></ul><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>$P(raining \mid \hat {umbrella}) = ?$</p><h3 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h3><ul><li>$H = raining,\: E = \hat{umbrella}$</li><li>$P(raining) = 0.4, \: P(\hat {raining} = 0.6)$</li><li>$P(umbrella \mid raining) = 0.9, \: P(\hat{umbrella}\mid raining) = 0.1$</li><li>$P(umbrella\mid \hat{raining}) = 0.2, \: P(\hat{umbrella} \mid \hat{raining}) = 0.8$</li></ul><p>$\therefore \: $ </p><script type="math/tex; mode=display">\begin{aligned}        &P(raining \mid \hat {umbrella}) \\= \quad &P(raining) \cdot P(\hat{umbrella}\mid raining) \: / \: P(\hat{umbrella})\\= \quad &0.4 \times 0.1  \: / \:  P(\hat{umbrella})\\\approx \quad &0.08\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}P(\hat{umbrella}) &\quad= P(raining) \cdot P(\hat{umbrella} \mid raining) + P(\hat{raining})\cdot P(\hat{umbrella}\mid \hat{raining}) \\&\quad= 0.4 \times 0.1 + 0.6 \times 0.8 \\&\quad= 0.52\end{aligned}</script><h2 id="Bayes-Theorem"><a href="#Bayes-Theorem" class="headerlink" title="Bayes Theorem"></a>Bayes Theorem</h2><script type="math/tex; mode=display">\begin{aligned}P(E) &\quad = P(H) \cdot P(E \mid H) + P(\hat{H})\cdot P(E\mid \hat{H}) \\&\quad= P(H,E) + P(\hat{H},E)\end{aligned}</script><script type="math/tex; mode=display">P(H\mid E) = \cfrac {P(H)P(E\mid H)}{P(H) \cdot P(E \mid H) + P(\hat{H})\cdot P(E\mid \hat{H})}</script><h2 id="Example-2-Drug-Testing"><a href="#Example-2-Drug-Testing" class="headerlink" title="Example 2: Drug Testing"></a>Example 2: Drug Testing</h2><p>Suppose that a drug test will produce 99% true positive results for drug users and 99% true negative results for non-drug users. Suppose that 0.5% of people are users of the drug. <strong>What is the probability that a randomly selected individual with a positive test is a drug user? What is the probability that a randomly selected individual with a negative test is a drug user?</strong></p><ul><li>Drug user: $drug$</li><li>Non-drug user: $\hat{drug}$</li><li>Positive: $+$</li><li>Negative: $-$</li></ul><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><ul><li>$P(drug\mid +) = ?$</li><li>$P(drug\mid -) = ?$</li></ul><h3 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h3><p>$P(drug\mid +) = ?$</p><ul><li><p>$P(drug\mid +) = P(drug) \cdot P(+\mid drug) \:/\: P(+)$</p></li><li><p>$P(+) = P(drug) \cdot P(+\mid drug) + P(\hat{drug}) \cdot P(+ \mid \hat{drug})=1.49\%$</p></li><li><p>$P(drug\mid +) = 0.5\% \times 99\% \:/\: 1.49\% \approx 33.2\%$</p></li></ul><p>$P(drug\mid -) = ?$</p><ul><li><p>$P(drug\mid -) = P(drug) \cdot P(-\mid drug) \:/\: P(-)$</p></li><li><p>$P(-) = P(drug) \cdot P(-\mid drug) + P(\hat{drug}) \cdot P(- \mid \hat{drug}) = 98.51\%$</p></li><li><p>$P(drug\mid -) = 0.5\% \times 1\% \:/\: 98.51\% \approx 0.005\%$</p></li></ul><h2 id="Revisit-Drug-Testing-Extension"><a href="#Revisit-Drug-Testing-Extension" class="headerlink" title="Revisit Drug Testing - Extension"></a>Revisit Drug Testing - Extension</h2><p>Suppose that a drug test will produce 99% true positive results for drug users and 99% true negative results for non‐drug users. Suppose that 0.5% of people are users of the drug. <strong>What is the probability that a randomly selected individual with two positive tests is a drug user?</strong> </p><p><em>(assume that these two tests are mutually independent given whether if the person is a drug user or not)</em></p><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h3><p>$P(drug\mid ++) = ?$</p><h3 id="Analyse-2"><a href="#Analyse-2" class="headerlink" title="Analyse"></a>Analyse</h3><ul><li><p>$P(drug\mid ++) = P(drug) \cdot P(++\mid drug) \:/\: P(++)$</p></li><li><p>$P(++\mid drug) = P(+\mid drug) \cdot P(+\mid drug) = 99\% \cdot 99\% = 98.01\%$</p></li><li><p>$P(++) = P(drug)\cdot P(++\mid drug) + P(\hat{drug})\cdot P(++\mid \hat{drug}) = 0.5\%$</p></li><li><p>$P(drug\mid ++) = 98.01\%$</p></li></ul><h2 id="Interpretation-of-Bayes-Theorem"><a href="#Interpretation-of-Bayes-Theorem" class="headerlink" title="Interpretation of Bayes Theorem"></a>Interpretation of Bayes Theorem</h2><ul><li>Probability measures a “degree of belief”</li><li>Bayes theorem links the degree of belief in a hypothesis (proposition) before and after accounting for evidence</li><li>$P(H \mid E) = P(H) \cdot P(E \mid H)\:/\:P(E)$, hypothesis $H$ and evidence $E$</li><li>$P(H)$ is the initial degree of belief in $H$ (i.e. prior probability)</li><li>$P(H\mid E)$ is the degree of belief having accounted for $E$</li><li>Bayes theorem is not to determine our belief, but to update our belief</li></ul><h2 id="Bayes-Theorem-for-Classification"><a href="#Bayes-Theorem-for-Classification" class="headerlink" title="Bayes Theorem for Classification"></a>Bayes Theorem for Classification</h2><ul><li>A machine learning model is to predict the relationships in the data, such as the relationship between features (i.e. attributes) (e.g. round, juicy, orange skin) and classes (e.g. orange, apple)</li><li>Bayes theorem provides a probabilistic way to model the relationship in data: evidence = feature (input), hypothesis = class (output)</li><li>It calculates the probability of an object given a number of<br>features (input $f_1,f_2,…, f_n$) belonging to a particular class (output $c$): $P(Y=c \mid X_1 = f_1, X_2 = f_2,…, X_n = f_n)$</li></ul><h2 id="Example-Tooth-cavity-testing"><a href="#Example-Tooth-cavity-testing" class="headerlink" title="Example: Tooth cavity testing"></a>Example: Tooth cavity testing</h2><ul><li>To predict whether people have cavity when they do not do mouth wash by Bayes theorem</li><li>Difference from the previous examples: unknown prior probability, likelihood, etc; need to learn from training examples</li></ul><h3 id="Analyse-3"><a href="#Analyse-3" class="headerlink" title="Analyse"></a>Analyse</h3><ul><li>Input variable: Wash</li><li>Output variable: Cavity</li></ul><h4 id="Training-Set"><a href="#Training-Set" class="headerlink" title="Training Set"></a>Training Set</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Wash</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">no</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">no</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">yes</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">yes</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr></tbody></table></div><h4 id="Frequency-Table"><a href="#Frequency-Table" class="headerlink" title="Frequency Table"></a>Frequency Table</h4><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Cavity = no</th><th style="text-align:center">Cavity = yes</th><th style="text-align:center">Total</th></tr></thead><tbody><tr><td style="text-align:center">Wash = no</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">Wash = yes</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">Total</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">6</td></tr></tbody></table></div><h4 id="Probabilities-based-on-frequency-table"><a href="#Probabilities-based-on-frequency-table" class="headerlink" title="Probabilities based on frequency table"></a>Probabilities based on frequency table</h4><ul><li><p>$P(\hat{wash} \mid vacity) = \cfrac{2}{3}$</p></li><li><p>$P(wash \mid vacity) = \cfrac{1}{3}$</p></li><li><p>$P(cavity) = \cfrac{3}{6}$</p></li><li><p>$P(\hat{cavity}) = \cfrac{3}{6}$</p></li><li><p>$P(wash) = \cfrac{3}{6}$</p></li><li><p>$P(\hat{wash}) = \cfrac{3}{6}$</p></li></ul><p>Now we can predict whether people have cavity when not doing mouth wash.</p><ul><li><p>$P(cavity \mid \hat{wash})<br> = P(cavity) \cdot P(\hat{wash}\mid cavity) \:/\: P(\hat{wash})<br> \approx 67\%$</p></li><li><p>$P(\hat{cavity} \mid \hat{wash}) \approx 33\%$</p></li></ul><h2 id="Bayes-Theorem-for-multiple-input-attributes"><a href="#Bayes-Theorem-for-multiple-input-attributes" class="headerlink" title="Bayes Theorem for multiple input attributes"></a>Bayes Theorem for multiple input attributes</h2><p>To predict whether people have cavity when they do not do<br>mouth wash and have pain: $P(Y=cavity\mid X1=\hat{wash}, X2=pain)$</p><ul><li>Input variables: Wash, Pain</li><li>Output variable: Cavity</li></ul><h3 id="Frequency-table-of-joint-input-attributes"><a href="#Frequency-table-of-joint-input-attributes" class="headerlink" title="Frequency table of joint input attributes"></a>Frequency table of joint input attributes</h3><h4 id="Training-Set-1"><a href="#Training-Set-1" class="headerlink" title="Training Set"></a>Training Set</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Wash</th><th style="text-align:center">Pain</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">no</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">no</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">no</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr></tbody></table></div><h4 id="Frequency-Table-1"><a href="#Frequency-Table-1" class="headerlink" title="Frequency Table"></a>Frequency Table</h4><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Cavity = no</th><th style="text-align:center">Cavity = yes</th><th style="text-align:center">Total</th></tr></thead><tbody><tr><td style="text-align:center">Wash = no, Pain = no</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Wash = no, Pain = yes</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">Wash = yes, Pain = no</td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">Wash = yes, Pain = yes</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Total</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">6</td></tr></tbody></table></div><script type="math/tex; mode=display">\begin{aligned} &P(cavity \mid \hat{wash}, pain) \\= \quad &\cfrac{P(cavity) \cdot P(\hat{wash}, pain \mid cavity)}{P(\hat{wash}, pain)} \\= \quad &  \cfrac{P(cavity)\cdot P(\hat{wash}, pain\mid cavity)}{(P(cavity) \cdot P(\hat{wash}, pain \mid cavity) + P(\hat{cavity}) \cdot P(\hat{wash}, pain\mid \hat{cavity}))}\\= \quad & \cfrac{\cfrac{3}{6} \times \cfrac{2}{3}}   {\cfrac{3}{6} \times \cfrac{2}{3} + \cfrac{3}{6} \times 0}  \\= \quad & 100\%\end{aligned}</script><ul><li><strong>Downside</strong>: Number of possible combinations of input attributes can become very large</li></ul><h2 id="Naive-Bayes"><a href="#Naive-Bayes" class="headerlink" title="Naive Bayes"></a>Naive Bayes</h2><p>Naive Bayes = Bayes Theorem + Independence Assumption</p><ul><li><p>Bayes Theorem: </p><script type="math/tex; mode=display">P(c \mid f_1, ..., f_n) = \cfrac{P( c )  \cdot P(f_1, ..., f_n \mid c)}{P(f_1, ..., f_n)}</script></li><li><p>Independence Assumption: Input attributes $f_1, …, f_n$ are mutually independent, conditional on any output, that is </p></li></ul><script type="math/tex; mode=display">P(f_1, ..., f_n \mid c) = P(f_1 \mid c) \cdot P(f_2 \mid c) ... P(f_n \mid c)</script><ul><li>Naive Bayes</li></ul><script type="math/tex; mode=display">P(c \mid f_1, ..., f_n) = \cfrac{P( c ) \cdot P(f_1 \mid c) \cdot P(f_2 \mid c) ... P(f_n \mid c)}{P(f_1, ..., f_n)}</script><p>If there are m possible classes: $c_1, c_2, …, c_m$, based on the independent assumption we have</p><script type="math/tex; mode=display">P(f_1, ..., f_n) =    \sum_{j=1}^{m} P(c_j)    \cdot \prod _{i=1}^{n}P(f_1 \mid c_j)</script><p>As $P(f_1, …, f_n)$ is the same (i.e. a constant) for any class $c$, we can denote $P(f_1, …, f_n) = \cfrac{1}{\alpha}$,<br>where $\alpha$ is a normalised factor</p><script type="math/tex; mode=display">\alpha = \cfrac{1}{\sum_{j=1}^{m} P(c_j) \cdot \prod _{i=1}^{n}P(f_1 \mid c_j)}</script><p>Therefore </p><script type="math/tex; mode=display">P(c \mid f_1, ..., f_n) = \alpha \cdot P( c ) \cdot P(f_1 \mid c)   \cdot P(f_2 \mid c) ... P(f_n \mid c)</script><h3 id="Frequency-table-of-joint-input-attributes-1"><a href="#Frequency-table-of-joint-input-attributes-1" class="headerlink" title="Frequency table of joint input attributes"></a>Frequency table of joint input attributes</h3><h4 id="Training-Set-2"><a href="#Training-Set-2" class="headerlink" title="Training Set"></a>Training Set</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Wash</th><th style="text-align:center">Pain</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">no</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">no</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">no</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr></tbody></table></div><h4 id="Frequency-Table-2"><a href="#Frequency-Table-2" class="headerlink" title="Frequency Table"></a>Frequency Table</h4><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Cavity = no</th><th style="text-align:center">Cavity = yes</th><th style="text-align:center">Total</th></tr></thead><tbody><tr><td style="text-align:center">Wash = no, Pain = no</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Wash = no, Pain = yes</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">Wash = yes, Pain = no</td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">Wash = yes, Pain = yes</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Total</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">6</td></tr></tbody></table></div><script type="math/tex; mode=display">\begin{aligned}P(c \mid f_1, ..., f_n) &= \alpha \cdot P( c ) \cdot P(f_1 \mid c)   \cdot P(f_2 \mid c) ... P(f_n \mid c)\\&= \alpha \cdot P( c ) \cdot \prod _{i=1}^{n}P(f_i \mid c)\end{aligned}</script><p>Therefore</p><script type="math/tex; mode=display">P(cavity \mid \hat{wash}, pain) = \alpha \cdot P( cavity ) \cdot P(\hat{wasgh} \mid cavity)   \cdot P(pain \mid cavity)</script><h4 id="Frequency-Table-3"><a href="#Frequency-Table-3" class="headerlink" title="Frequency Table"></a>Frequency Table</h4><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Cavity = no</th><th style="text-align:center">Cavity = yes</th><th style="text-align:center">Total</th></tr></thead><tbody><tr><td style="text-align:center">Wash = no</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">Wash = yes</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">Total</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">6</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Cavity = no</th><th style="text-align:center">Cavity = yes</th><th style="text-align:center">Total</th></tr></thead><tbody><tr><td style="text-align:center">Pain = no</td><td style="text-align:center">3</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">Pain = yes</td><td style="text-align:center">0</td><td style="text-align:center">3</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">Total</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">6</td></tr></tbody></table></div><h3 id="Naive-Bayes-classifier"><a href="#Naive-Bayes-classifier" class="headerlink" title="Naive Bayes classifier"></a>Naive Bayes classifier</h3><script type="math/tex; mode=display">\begin{aligned}&P(cavity \mid \hat{wash}, pain) \\= \quad &\alpha \cdot P( cavity ) \cdot P(\hat{wash} \mid cavity)   \cdot P(pain \mid cavity) \\= \quad &\alpha \times \cfrac{3}{6} \times \cfrac{2}{3} \times \cfrac{3}{3} \\= \quad &\alpha  \times \cfrac{1}{3}\\= \quad &100 \%\end{aligned}</script><p>and</p><script type="math/tex; mode=display">\begin{aligned}&P(\hat{cavity} \mid \hat{wash}, pain) \\= \quad &\alpha \cdot P( \hat{cavity} ) \cdot P(\hat{wash} \mid \hat{cavity})   \cdot P(pain \mid \hat{cavity}) \\= \quad &\alpha \times \cfrac{3}{6} \times \cfrac{1}{3} \times \cfrac{0}{3} \\= \quad &\alpha  \times 0\\= \quad &0 \%\end{aligned}</script><p>Where</p><script type="math/tex; mode=display">\begin{aligned}\alpha &=\cfrac{1}{P(cavity) \cdot P(\hat{wash}\mid cavity)\cdot P(pain\mid cavity) + P(\hat{cavity})\cdot P(\hat{wash}\mid \hat{cavity})\cdot P(pain\mid \hat{cavity})} \\ &=3\end{aligned}</script><h2 id="Categorical-naive-Bayes"><a href="#Categorical-naive-Bayes" class="headerlink" title="Categorical naive Bayes"></a>Categorical naive Bayes</h2><p><strong>Categorical naive Bayes</strong>: all the input attributes are categorical variables.</p><ul><li>A categorical variable is a variable that can take on one of a limited number of possible values</li><li>This contrasts with numerical (continuous) naive Bayes, where<br>some input variable can be represented by real numbers (i.e. infinite possible attribute values)</li></ul><h3 id="Categorical-vs-Numerical-attributes"><a href="#Categorical-vs-Numerical-attributes" class="headerlink" title="Categorical vs Numerical attributes"></a>Categorical vs Numerical attributes</h3><h4 id="Training-Set-3"><a href="#Training-Set-3" class="headerlink" title="Training Set"></a>Training Set</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Wash</th><th style="text-align:center">Pain</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">no</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">no</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">yes</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">no</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr></tbody></table></div><h4 id="Categorical"><a href="#Categorical" class="headerlink" title="Categorical"></a>Categorical</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Wash</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">no</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">no</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">yes</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">yes</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr></tbody></table></div><h4 id="Numerical"><a href="#Numerical" class="headerlink" title="Numerical"></a>Numerical</h4><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Sugar (grams)</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">40</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">35</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">60</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">20</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">30</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">17</td><td style="text-align:center">no</td></tr></tbody></table></div><h3 id="Deal-with-numerical-input-attributes-by-discretising-values"><a href="#Deal-with-numerical-input-attributes-by-discretising-values" class="headerlink" title="Deal with numerical input attributes by discretising values"></a>Deal with numerical input attributes by discretising values</h3><ul><li><p>Transform numerical input values into categories (i.e., discrete values)</p></li><li><p>E.g.: Sugar $\rightarrow$ small, medium, large</p></li><li><p>However, a person may consider large as &gt;30g. Another may consider it as &gt;25g</p></li><li><p>If the amount of sugar is large when $\ge$ 30g, should 29.9g be considered medium? Not large?</p></li><li><p>This level of subjectiveness and crispiness may lead to loss of information</p></li></ul><h3 id="Probability-Function"><a href="#Probability-Function" class="headerlink" title="Probability Function"></a>Probability Function</h3><p>Probability Function describes the probability distribution of a random variable, i.e., the probabilities of occurrence of different possible outcomes in an experiment.</p><p><strong>Probability Mass Function</strong>: the random variable is discrete</p><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Wash</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">no</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">no</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">yes</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">yes</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">no</td><td style="text-align:center">no</td></tr></tbody></table></div><p>Probability Mass Function for P(Wash|cavity):<br><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/02.png" style="zoom:75%;"></p><ul><li>X axis represents possible values of the feature</li><li>Y axis represents the probability of the feature being a value given a particular class</li></ul><h3 id="Probability-Density-Function"><a href="#Probability-Density-Function" class="headerlink" title="Probability Density Function"></a>Probability Density Function</h3><p>Probability Density Function is a probability function where the variable is continuous.</p><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Sugar (grams)</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">40</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">35</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">60</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">20</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">30</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">17</td><td style="text-align:center">no</td></tr></tbody></table></div><ul><li>Shape of the function: Assume the examples drawn from Gaussian Distribution (aka normal Distribution).</li><li>Shape is controlled by two parameters: Mean ($\mu$) and Standard Deviation ($\sigma$), determined by the training examples.</li></ul><p>Gaussian Distribution $N(x \mid \mu , \sigma )$:<br><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/03.png" style="zoom:75%;"></p><h4 id="Gaussian-Distribution"><a href="#Gaussian-Distribution" class="headerlink" title="Gaussian Distribution"></a>Gaussian Distribution</h4><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/04.png" style="zoom:50%;"></p><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/05.png" style="zoom:50%;"></p><h4 id="Probability-Density-Function-calculation-for-people-having-cavity"><a href="#Probability-Density-Function-calculation-for-people-having-cavity" class="headerlink" title="Probability Density Function calculation for people having cavity"></a>Probability Density Function calculation for people having cavity</h4><p>$x_i$ is the amount of the sugar person takes, where is the number of the people having cavity in the training examples.</p><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/06.png" style="zoom:75%;"></p><script type="math/tex; mode=display">\mu = \cfrac{\sum_{i=1}^{n} x_i}{n}</script><script type="math/tex; mode=display">\sigma = \sqrt{\cfrac{\sum_{i=1}^{n} (x_i - \mu)^2}{n}}</script><p>Therefore</p><script type="math/tex; mode=display">\mu = \cfrac{40 + 35 + 60}{3} = 45</script><script type="math/tex; mode=display">\begin{aligned}\sigma ^2 &= \cfrac{1}{3} \times[(40-45)^2 + (35-45)^2 + (60-45)^2] \\&= \cfrac{1}{3} \times [25 + 100 + 225] \\&\approx 116.67\end{aligned}</script><p>Use $\mu$ and $\sigma$ to plot the Gaussian distribution graph:</p><p>Sugar is $x$ and $P(Sugar\mid cavity)$ is $N(x \mid \mu, \sigma)$.</p><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/07.png" style="zoom:50%;"></p><script type="math/tex; mode=display">N(x \mid \mu, \sigma) = \cfrac{1}{\sigma \sqrt{2 \pi}} e^{-\frac{(x-\mu)^2}{2\sigma ^2}}</script><script type="math/tex; mode=display">\mu=45</script><script type="math/tex; mode=display">\sigma ^2 = 116.67</script><h4 id="Probability-Density-Function-calculation-for-people-not-having-cavity"><a href="#Probability-Density-Function-calculation-for-people-not-having-cavity" class="headerlink" title="Probability Density Function calculation for people not having cavity"></a>Probability Density Function calculation for people not having cavity</h4><p>$x_i$ is the amount of the sugar person takes, where is the number of the people not having cavity in the training examples.</p><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/08.png" style="zoom:75%;"></p><script type="math/tex; mode=display">\mu = \cfrac{\sum_{i=1}^{n} x_i}{n}</script><script type="math/tex; mode=display">\sigma = \sqrt{\cfrac{\sum_{i=1}^{n} (x_i - \mu)^2}{n}}</script><p>Therefore</p><script type="math/tex; mode=display">\mu = \cfrac{20 + 30 + 17}{3} \approx 22.33</script><script type="math/tex; mode=display">\sigma ^2  \approx 30.89</script><p>Use $\mu$ and $\sigma$ to plot the Gaussian distribution graph:</p><p>Sugar is $x$ and $P(Sugar\mid \hat{cavity})$ is $N(x \mid \mu, \sigma)$.</p><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/09.png" style="zoom:50%;"></p><script type="math/tex; mode=display">N(x \mid \mu, \sigma) = \cfrac{1}{\sigma \sqrt{2 \pi}} e^{-\frac{(x-\mu)^2}{2\sigma ^2}}</script><script type="math/tex; mode=display">\mu=22.33</script><script type="math/tex; mode=display">\sigma ^2 = 30.89</script><h4 id="Probability-distribution-functions"><a href="#Probability-distribution-functions" class="headerlink" title="Probability distribution functions"></a>Probability distribution functions</h4><p>Probability distribution function of Sugar given cavity or no cavity:</p><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Sugar (grams)</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">40</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">35</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">60</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">20</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">30</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">17</td><td style="text-align:center">no</td></tr></tbody></table></div><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/10.png" style="zoom:50%;"></p><h3 id="General-idea"><a href="#General-idea" class="headerlink" title="General idea"></a>General idea</h3><ul><li><p>Decide on a type of probability density function (usually Gaussian distribution) for each numerical input attribute $X$.</p></li><li><p>Determine the parameters of the probability function for each possible output attribute value (i.e.$c_1, c_2, …, c_m$) according to the training examples.</p></li><li><p>Use the obtained probability function for $c_i$ to calculate $P(X =f \mid Y = c_i)$ for the corresponding input value $f$.</p></li></ul><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><ul><li><p>We want to predict if a person has cavity when they do not do mouth wash and take sugar 20 grams everyday.</p></li><li><p>We need to calculate $P(cavity \mid \hat{wash}, Sugar=20)$ and $P(\hat{cavity}\mid \hat{wash}, Sugar=20)$.</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">Person</th><th style="text-align:center">Wash</th><th style="text-align:center">Sugar (grams)</th><th style="text-align:center">Cavity</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">no</td><td style="text-align:center">40</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">no</td><td style="text-align:center">35</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">yes</td><td style="text-align:center">60</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">yes</td><td style="text-align:center">20</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">yes</td><td style="text-align:center">30</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">P6</td><td style="text-align:center">no</td><td style="text-align:center">17</td><td style="text-align:center">no</td></tr></tbody></table></div><script type="math/tex; mode=display">\begin{aligned}&P(cavity \mid \hat{wash}, Sugar=20)\\= \quad & \alpha \cdot P(cavity) \cdot P(\hat{wash} \mid cavity) \cdot P(Sugar = 20 \mid cavity) \\= \quad & \alpha \times \cfrac{3}{6} \times \cfrac{2}{3} \times P(Sugar = 20 \mid cavity)\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}&P(\hat{cavity} \mid \hat{wash}, Sugar=20)\\= \quad & \alpha \cdot P(\hat{cavity}) \cdot P(\hat{wash} \mid \hat{cavity}) \cdot P(Sugar = 20 \mid \hat{cavity}) \\= \quad & \alpha \times \cfrac{3}{6} \times \cfrac{1}{3} \times P(Sugar = 20 \mid \hat{cavity})\end{aligned}</script><p>Calculate $P(Sugar=20 \mid cavity)$:</p><ul><li>Probability Density Function of the variable Sugar given cavity</li></ul><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/11.png" style="zoom:50%;"></p><p>Calculate $P(Sugar=20 \mid \hat{cavity})$:</p><ul><li>Probability Density Function of the variable Sugar given no cavity</li></ul><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/12.png" style="zoom:50%;"></p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Predict if people have cavity when they do not do mouth wash and take sugar 20 grams everyday.<br>$P(cavity \mid \hat{wash}, Sugar=20)<br>= \alpha \times \cfrac{3}{6} \times \cfrac{2}{3} \times0.0025 = 0.00083\alpha$<br>$P(\hat{cavity} \mid \hat{wash}, Sugar=20)<br>= \alpha \times \cfrac{3}{6} \times \cfrac{1}{3} \times0.0657 = 0.01095\alpha$</p><p><strong>Predicted results: No cavity</strong></p><h2 id="Advantages-and-disadvantages-of-naive-Bayes"><a href="#Advantages-and-disadvantages-of-naive-Bayes" class="headerlink" title="Advantages and disadvantages of naive Bayes"></a>Advantages and disadvantages of naive Bayes</h2><ul><li><p>Advantages:</p><ul><li>Does very well in classification, especially on high‐dimensional dataset</li><li>Requires a small amount of training data; training is very quick</li><li>Easy to build/implement</li></ul></li><li><p>Disadvantages:</p><ul><li>Requires the assumption of independent input attributes</li><li>For continuous input attributes, it assumes a certain probability distribution for input attributes</li><li>Not work very well for regression</li></ul></li></ul><h2 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h2><ul><li><p>To categorise emails, e.g., spam or not spam</p></li><li><p>To check a piece of text expressing positive emotions, or negative emotions</p></li><li><p>To classify a news article about technology, politics, or sports</p></li><li><p>Software defect prediction</p></li><li><p>Medical diagnosis</p></li><li><p>…</p></li></ul><h1 id="Logic"><a href="#Logic" class="headerlink" title="Logic"></a>Logic</h1><h2 id="Outline-1"><a href="#Outline-1" class="headerlink" title="Outline"></a>Outline</h2><ul><li>Propositional Logic</li><li>First Order Logic</li></ul><h2 id="AI-Branches"><a href="#AI-Branches" class="headerlink" title="AI Branches"></a>AI Branches</h2><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/13.png" style="zoom:50%;"></p><h2 id="Propositional-Logic"><a href="#Propositional-Logic" class="headerlink" title="Propositional Logic"></a>Propositional Logic</h2><ul><li>A proposition is simply a statement, either true or false</li><li>There is no concept of a degree of truth</li><li>Propositional logic deals with logical relationships between propositions (statements, claims) taken as wholes</li><li>Such letters are not variables, called propositional constant</li></ul><p><img src="/2020/04/04/Introduction-to-AI-Naive-Bayes-and-Logic/14.png" style="zoom:90%;"></p><p><strong>P = “John is wearing a red coat”</strong></p><h3 id="Compound-proposition"><a href="#Compound-proposition" class="headerlink" title="Compound proposition"></a>Compound proposition</h3><ul><li><p>Compound proposition is constructed by individual propositions and connectives (logical operators)</p></li><li><p>P and Q (conjunction of two propositions, denoted by $\wedge$) </p></li><li><p>John is wearing a red coat and he’s stolen a jeep</p></li><li><p>P or Q (disjunction of two propositions, denoted by $\vee$) </p><ul><li>John is at the library or he is studying</li></ul></li><li><p>If P then Q (conditional of one proposition implying the<br>other, denoted by $\rightarrow$) </p><ul><li>If John is at the library, then he is preparing the exam</li></ul></li><li><p>Not P (contradictory of the proposition, denoted by $\neg$) </p><ul><li>It is not the case that John is at the library</li></ul></li></ul><h3 id="Connectives"><a href="#Connectives" class="headerlink" title="Connectives"></a>Connectives</h3><ul><li><p>If (A or B) then (C and not D)</p><ul><li>$A \vee B \rightarrow C \wedge \neg D$</li></ul></li><li><p>Given the truth value of A, B, C, D, is this compound proposition true or false?</p></li></ul><h3 id="Truth-table"><a href="#Truth-table" class="headerlink" title="Truth table"></a>Truth table</h3><p>A truth table shows how the truth or falsity of a compound statement depends on the truth or falsity of the individual statements from which it’s constructed.</p><div class="table-container"><table><thead><tr><th style="text-align:center">P</th><th style="text-align:center">Q</th><th style="text-align:center">P $\wedge$ Q</th><th style="text-align:center">P $\vee$ Q</th><th style="text-align:center">P$\rightarrow$Q</th><th style="text-align:center">$\neg$P</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">F</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr></tbody></table></div><h3 id="Inclusive-exclusive-OR"><a href="#Inclusive-exclusive-OR" class="headerlink" title="Inclusive/exclusive OR"></a>Inclusive/exclusive OR</h3><ul><li><p>Inclusive or: A triangle can be defined as a polygon with three sides or a polygon with three vertices</p></li><li><p>Exclusive or (denoted xor): The coin landed either heads or tails</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">P</th><th style="text-align:center">Q</th><th style="text-align:center">P $\vee$ Q</th><th style="text-align:center">P$\bigoplus$Q</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">F</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">F</td></tr></tbody></table></div><h3 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h3><ul><li><p>Conditional can be thought of as an “if”statement</p></li><li><p>If I miss the bus, then I will be late for work</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">P</th><th style="text-align:center">Q</th><th style="text-align:center">P $\rightarrow$ Q</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td></tr></tbody></table></div><p><strong>When a conditional is false?</strong></p><p>If I study hard, then I will pass the test</p><p><em>P: I study hard; Q: I pass the test</em></p><ul><li>Case 1: P is true, Q is true <ul><li>I studied hard, I passed the test</li></ul></li><li>Case 2: P is true, Q is false<ul><li>I studied hard, I did not pass the test</li></ul></li><li>Case 3: P is false, Q is true<ul><li>I did not study hard, I passed the test</li></ul></li><li>Case 4: P is false, Q is false<ul><li>I did not study hard, I did not pass the test</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">P</th><th style="text-align:center">Q</th><th style="text-align:center">P $\rightarrow$ Q</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td></tr></tbody></table></div><h3 id="Biconditionals"><a href="#Biconditionals" class="headerlink" title="Biconditionals"></a>Biconditionals</h3><ul><li><p>The bidirectional (denoted P $\leftrightarrow$ Q) implies in both directions</p></li><li><p>“(If P then Q) and (If Q then P)” </p></li><li><p>P iff Q (is read P if and only if Q)</p></li><li><p>(During the day) The sun is shining iff there are no clouds covering the sun</p></li><li><p>If I have a pet goat, then my homework will be eaten (true)</p></li><li><p>If my homework is eaten, then I have a pet goat (not true)</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">P</th><th style="text-align:center">Q</th><th style="text-align:center">P $\leftrightarrow$ Q</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">F</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td></tr></tbody></table></div><h3 id="Contradictories"><a href="#Contradictories" class="headerlink" title="Contradictories"></a>Contradictories</h3><ul><li><p>Contradictory of P (¬P or not P): a claim that always has the opposite truth value of P</p></li><li><p>P: “John is at the movies”</p></li><li><p>It can be read “it is not the case that John is at the movies”</p></li></ul><h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><ul><li><p>An argument is a set of propositions, called the premises, intended to determine the truth of another statement, called the conclusion</p></li><li><p>Multiple statements</p></li><li><p>Premises: Supporting statements</p></li><li><p>Conclusion: Statement that follows from premises</p><ul><li>$P \leftrightarrow Q$</li><li>$\cfrac{Q}{\therefore P}$</li></ul></li><li><p>P: The river is flooded; Q: It rained heavily</p></li></ul><h3 id="Validity"><a href="#Validity" class="headerlink" title="Validity"></a>Validity</h3><ul><li>An argument is valid if the premises lead to the conclusion presented</li></ul><script type="math/tex; mode=display">\begin{aligned}&P \leftrightarrow Q \\\\&\quad \quad \quad \quad \quad \quad \Leftarrow Invalid \: argument \\\\&\cfrac{Q}{\therefore P}\end{aligned}</script><ul><li>P: I run Marathon, Q: I am exhausted</li></ul><h3 id="Soundness"><a href="#Soundness" class="headerlink" title="Soundness"></a>Soundness</h3><ul><li><p>A sound argument is valid and all of its premises are true</p></li><li><p>A unsound argument lacks validity or truth</p></li></ul><script type="math/tex; mode=display">\begin{aligned}&P \leftrightarrow Q \\\\&\quad \quad \quad \quad \quad \quad \Leftarrow Invalid \: argument \\\\&\cfrac{Q}{\therefore P}\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}&P: I \: am \: full \\\\&\quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \Leftarrow But \: unsound \\\\&Q: I \: have \: had \: lunch\end{aligned}</script><h3 id="Common-arguments-Valid-or-not"><a href="#Common-arguments-Valid-or-not" class="headerlink" title="Common arguments: Valid or not"></a>Common arguments: Valid or not</h3><ul><li><p>$((P \rightarrow Q) \wedge Q) \therefore P$</p><ul><li>P implies Q and Q, therefore P</li></ul></li><li><p>$((P \rightarrow Q) \wedge \neg Q) \therefore \neg P$</p><ul><li>P implies Q and not Q, therefore not P</li></ul></li><li><p>$((P \rightarrow Q) \wedge (Q \rightarrow R)) \therefore P \rightarrow R$</p><ul><li>P implies Q and Q implies R, therefore P implies R</li></ul></li><li><p>$(P \leftrightarrow Q) \therefore (P \wedge Q) \vee (\neg P \wedge \neg Q)$</p><ul><li>P iff Q, therefore (P and Q) or (not P and not Q) </li></ul></li></ul><h3 id="Argument-P-rightarrow-Q-wedge-Q-therefore-P"><a href="#Argument-P-rightarrow-Q-wedge-Q-therefore-P" class="headerlink" title="Argument $((P \rightarrow Q) \wedge Q) \therefore P$"></a>Argument $((P \rightarrow Q) \wedge Q) \therefore P$</h3><div class="table-container"><table><thead><tr><th style="text-align:center">P</th><th style="text-align:center">Q</th><th style="text-align:center">$P \rightarrow Q$</th><th style="text-align:center">$(P \rightarrow Q) \wedge Q$</th><th style="text-align:center">$((P \rightarrow Q) \wedge Q) \rightarrow P$</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">F</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">T</td></tr></tbody></table></div><p><strong>Not valid</strong></p><h3 id="Argument-P-rightarrow-Q-wedge-neg-Q-therefore-neg-P"><a href="#Argument-P-rightarrow-Q-wedge-neg-Q-therefore-neg-P" class="headerlink" title="Argument $((P \rightarrow Q) \wedge \neg Q) \therefore \neg P$"></a>Argument $((P \rightarrow Q) \wedge \neg Q) \therefore \neg P$</h3><div class="table-container"><table><thead><tr><th style="text-align:center">P</th><th style="text-align:center">Q</th><th style="text-align:center">$P \rightarrow Q$</th><th style="text-align:center">$\neg Q$</th><th style="text-align:center">$(P \rightarrow Q) \wedge \neg Q$</th><th style="text-align:center">$\neg P$</th><th style="text-align:center">$((P \rightarrow Q) \wedge \neg Q) \rightarrow \neg P$</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">F</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr></tbody></table></div><p><strong>Valid</strong></p><h2 id="First-Order-Logic"><a href="#First-Order-Logic" class="headerlink" title="First Order Logic"></a>First Order Logic</h2><ul><li><p>First-order logic (aka predicate logic) is a generalisation of propositional logic</p></li><li><p>First-order logic is a powerful language that uses quantified variables over objects and allows the use of sentences that contain variables</p></li><li><p>First-order logic adds <strong>predicates</strong> and <strong>quantifiers</strong> to propositional logic</p></li></ul><h3 id="Predicates"><a href="#Predicates" class="headerlink" title="Predicates"></a>Predicates</h3><ul><li><p>“Socrates is a philosopher”</p></li><li><p>“Plato is a philosopher”</p></li><li><p>The predicate “is a philosopher” occurs in both sentences, which have a common structure “𝑥 is a philosopher”, “𝑥” can be Socrates or Plato</p></li><li><p>Such a sentence can be represented as Predicate(term1, term2, …); for example, philosopher(𝑥), philosopher(Socrates) </p></li><li><p>First-order logic uses Predicate(term1, term2…) to represent basic sentences, where terms can be variables/constants</p></li></ul><p>—</p><ul><li><p>Birds fly: </p><ul><li>fly(birds)</li></ul></li><li><p>John respects his parents: </p><ul><li>respect(John, parents) </li></ul></li><li><p>x is greater than y: </p><ul><li>greater(x, y)</li></ul></li><li><p>1 is greater than 2: </p><ul><li>greater(1, 2)</li></ul></li></ul><h4 id="Connectives-1"><a href="#Connectives-1" class="headerlink" title="Connectives"></a>Connectives</h4><p>We can use logic connectives on predicates</p><ul><li><p>$philosopher(x) \rightarrow scholar(x)$</p><ul><li>“x is a philosopher” implies that “x is a scholar”</li></ul></li><li><p>$respect(John, parents) \wedge respect(John, wife)$</p><ul><li>“John respects his parents” and “John respects his wife”</li></ul></li></ul><h3 id="Quantifiers"><a href="#Quantifiers" class="headerlink" title="Quantifiers"></a>Quantifiers</h3><p>A quantifier turns a sentence about something having some property into a sentence about the number (quantity) of things having the property</p><ul><li><p>Universal quantifier is “for all” (i.e. “for every”)</p><ul><li>$\forall x \:\: P(x)$:  “For all x, x is P”.</li><li>$\forall x \:\: philosopher(x)$:  “For all x, x is philosopher”.</li></ul></li><li><p>Existential quantifier is “for some” (i.e. “there exists”)</p><ul><li>$\exists x \:\: P(x)$:  “For some x, x is P”.</li><li>$\exists x \:\: philosopher(x)$:  “For some x, x is philosopher”.</li></ul></li><li><p>Universal quantifier</p><ul><li>All man drink coffee </li><li>$\forall x \:\: man(x) \rightarrow drink(x, coffee)$</li><li>In universal quantifier we use implication “$\rightarrow$”</li></ul></li><li><p>Existential quantifier</p><ul><li>Some boys are intelligent </li><li>$\exists x\:\: boys(x) \wedge intelligent(x)$</li><li>In existential quantifier we use and “$\wedge$”</li></ul></li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul><li><p>All philosophers are scholars</p><ul><li>For all x, where “x is a philosopher” then “x is a scholar”</li><li>$\forall x\:\: philosopher(x) \rightarrow scholar(x)$</li></ul></li><li><p>Every man respects his parents </p><ul><li>$\forall x\:\: man(x) \rightarrow respect(x, parents)$</li></ul></li><li><p>Some boys play football</p><ul><li>$\exists x\:\: boy(x) \wedge play(x, football)$</li></ul></li><li><p>Not all students like both mathematics and science</p><ul><li>$\neg \forall x\:\: [student(x) \rightarrow like(x, mathematics) ∧ like(x, science)]$</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bayes-Theorem-and-Naive-Bayes&quot;&gt;&lt;a href=&quot;#Bayes-Theorem-and-Naive-Bayes&quot; class=&quot;headerlink&quot; title=&quot;Bayes Theorem and Naive Bayes&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
      <category term="Bayes" scheme="http://yoursite.com/tags/Bayes/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to AI - Reinforcement Learning</title>
    <link href="http://yoursite.com/2020/04/04/Introduction-to-AI-Reinforcement-Learning/"/>
    <id>http://yoursite.com/2020/04/04/Introduction-to-AI-Reinforcement-Learning/</id>
    <published>2020-04-04T11:27:44.373Z</published>
    <updated>2020-04-04T14:09:15.339Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
      <category term="Reinforcement Learning" scheme="http://yoursite.com/tags/Reinforcement-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to AI - Supervised Learning</title>
    <link href="http://yoursite.com/2020/04/04/Introduction-to-AI-Supervised-Learning/"/>
    <id>http://yoursite.com/2020/04/04/Introduction-to-AI-Supervised-Learning/</id>
    <published>2020-04-04T11:27:27.734Z</published>
    <updated>2020-04-04T14:10:03.471Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
      <category term="Supervised Learning" scheme="http://yoursite.com/tags/Supervised-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to AI - Search and Optimisation</title>
    <link href="http://yoursite.com/2020/04/04/Introduction-to-AI-Search-and-Optimisation/"/>
    <id>http://yoursite.com/2020/04/04/Introduction-to-AI-Search-and-Optimisation/</id>
    <published>2020-04-04T11:27:06.155Z</published>
    <updated>2020-04-04T14:10:35.758Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
      <category term="Search" scheme="http://yoursite.com/tags/Search/"/>
    
      <category term="Optimisation" scheme="http://yoursite.com/tags/Optimisation/"/>
    
  </entry>
  
  <entry>
    <title>Intro to CS</title>
    <link href="http://yoursite.com/2020/04/04/Intro-to-CS/"/>
    <id>http://yoursite.com/2020/04/04/Intro-to-CS/</id>
    <published>2020-04-04T10:38:14.722Z</published>
    <updated>2020-04-04T19:11:30.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><ul><li><p>Number Systems</p></li><li><p>Computer Architecture</p></li><li><p>Java Virtual Machine</p></li><li><p>Algorithmic Correctness and Complexity</p></li></ul><h1 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h1><h2 id="Binary-conversion"><a href="#Binary-conversion" class="headerlink" title="Binary conversion"></a>Binary conversion</h2><h3 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h3><p>To prove</p><script type="math/tex; mode=display">x^0 = 1</script><script type="math/tex; mode=display">x^0 = x^{y-y}</script><script type="math/tex; mode=display">x^{y-y} = x^y/x^y</script><script type="math/tex; mode=display">x^y/x^y = 1</script><p>Numbers that we generally make use of are written in the decimal number system, which has ten digits (0 … 9).</p><p>In decimal the number 957 can be written as</p><script type="math/tex; mode=display">\begin{aligned}&(9 \times 10^2 ) + (5 \times 10^1 ) + (7 \times 10^0 ) \\=~&900 ~~~~~~~~~~+ 50 ~~~~~~~~~~~~+ 7\end{aligned}</script><p>The number “10” (called the base or radix) can, in fact, be any number.</p><p>It turns out that using Base 2 (or Binary) is easy for computers.</p><p>Base 2 has two digits which can easily be represented on a computer by two states ON and OFF.</p><h3 id="Binary-Base-2"><a href="#Binary-Base-2" class="headerlink" title="Binary (Base 2)"></a>Binary (Base 2)</h3><p>The expanded notation for Binary [Base 2, uses two digits (0,1)]</p><ul><li>Consider: 1011</li></ul><script type="math/tex; mode=display">\begin{aligned}&(1 \times 2^3)+ (0 \times 2^2 ) + (1 \times 2^1 ) + (1 \times 2^0)\\=~&8~~~~~~~~~~~~+0~~~~~~~~~~~~+2~~~~~~~~~~~~+1\\=~&11~~~~~~~~~~~~~decimal\end{aligned}</script><ul><li>Consider: 1010</li></ul><script type="math/tex; mode=display">\begin{aligned}&(1 \times 2^3)+ (0 \times 2^2 ) + (1 \times 2^1 ) + (0 \times 2^0)\\=~&8~~~~~~~~~~~~+0~~~~~~~~~~~~+2~~~~~~~~~~~~+0\\=~&10~~~~~~~~~~~~~decimal\end{aligned}</script><h3 id="Octal-Base-8"><a href="#Octal-Base-8" class="headerlink" title="Octal (Base 8)"></a>Octal (Base 8)</h3><p>The expanded notation for Octal [Base 8, which uses 8 digits (0,1,2,3,4,5,6,7)</p><ul><li>Consider: 1237</li></ul><script type="math/tex; mode=display">\begin{aligned}&(1 \times 8^3)+ (2 \times 8^2 ) + (3 \times 8^1 ) + (7 \times 8^0)\\=~&512~~~~~~~~+128~~~~~~~~+24~~~~~~~~~~+7\\=~&671~~~~~~~~~~~~~decimal\end{aligned}</script><ul><li>Consider: 7717</li></ul><script type="math/tex; mode=display">\begin{aligned}&(7 \times 8^3)+ (7 \times 8^2 ) + (1 \times 8^1 ) + (7 \times 8^0)\\=~&3584~~~~~~+448~~~~~~~~+8~~~~~~~~~~~~+7\\=~&4047~~~~~~~~~~~~~decimal\end{aligned}</script><h3 id="Hexadecimal-Base-16"><a href="#Hexadecimal-Base-16" class="headerlink" title="Hexadecimal (Base 16)"></a>Hexadecimal (Base 16)</h3><p>The expanded notation for Hexadecimal [Base 16], which uses 16 digits <strong>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F).</strong></p><ul><li>Consider: CBF</li></ul><script type="math/tex; mode=display">\begin{aligned}&(C \times 16^2)+ (B \times 16^1 ) + (F \times 16^0 ) \\=~&3072~~~~~~~~~+176~~~~~~~~~~~+15\\=~&3263~~~~~~~~~~~~~decimal\end{aligned}</script><h3 id="Converting"><a href="#Converting" class="headerlink" title="Converting"></a>Converting</h3><p><strong>Converting Base 10 to Base 2</strong></p><p>Some form of division …</p><ul><li>Convert <script type="math/tex">40_{10}</script>to Binary</li></ul><script type="math/tex; mode=display">\begin{aligned}2&|&40&|&0&\\2&|&20&|&0&\\2&|&10&|&0&\\2&|&5& |&1&\\2&|&2& |&0&\\2&|&1& |&1&\\&&0&|&  &\\\end{aligned}</script><script type="math/tex; mode=display">40_{10} = 101000_2</script><p><strong>Converting Base 10 to Base 8 and Base 16</strong></p><ul><li>Divide by 8 or 16 instead of 2</li></ul><p><strong>Converting Base 2 to Base 8</strong></p><p>What is the largest number of “things” you can count using 3 digits in Binary</p><script type="math/tex; mode=display">\begin{aligned}&111\\&{[111]}_2={[7]}_{10}\end{aligned}</script><p>Max number of “things” you can count using one digit in Base 8</p><script type="math/tex; mode=display">\begin{aligned}&7\\&{[7]}_8={[7]}_{10}\end{aligned}</script><p>How many digits in Base 8 are needed to represent 3 digits of base 2</p><ul><li>Consider <script type="math/tex">100111_2</script> to Base 8</li></ul><script type="math/tex; mode=display">\begin{aligned}&100&111& \\&4&7&\end{aligned}</script><p>Therefore <script type="math/tex">100111_2 = 47_8</script></p><ul><li>Consider <script type="math/tex">1100111_2</script> to Base 8</li></ul><script type="math/tex; mode=display">\begin{aligned}&001&&100&&111&\\&1&&4&&7&\end{aligned}</script><p>Therefore <script type="math/tex">1100111_2 = 147_8</script></p><script type="math/tex; mode=display">\begin{aligned}{[1100111]} _2~=~&2^6+2^5+0+0+2^2+2^1+2^0\\=~&64+32+0+0+4+2+1\\=~&{[103]}_{10}\\\\{[147]}_8=~&1\times8^2+4\times8^1+7\times8^0\\=~&1\times64+4\times8+7\\=~&[103]_{10}\end{aligned}</script><p><strong>Converting Base 8 to Base 2</strong></p><ul><li>Consider 333 8 to Base 2</li></ul><script type="math/tex; mode=display">\begin{aligned}&3&&3&&3&\\&011&&011&&011&\end{aligned}</script><p>Therefore <script type="math/tex">333_8 = 11011011_2</script></p><p><strong>Converting Base 2 to Base 16</strong></p><ul><li>4 ‘places’ instead of 3</li></ul><h3 id="Positive-Real-Numbers-Converting"><a href="#Positive-Real-Numbers-Converting" class="headerlink" title="Positive Real Numbers Converting"></a>Positive Real Numbers Converting</h3><p><strong>Convert <script type="math/tex">0.1011_2</script> to Decimal</strong></p><ul><li>Expanded notation of <script type="math/tex">0.53_{10}</script></li></ul><script type="math/tex; mode=display">\begin{aligned}&(5 \times 10^{-1})+ (3 \times 10^{-2} ) \\=&.5~~~~~~~~~~~~~~~+.03\\\end{aligned}</script><p>Similarly using the expanded notation for $0.1011_2$.</p><script type="math/tex; mode=display">\begin{aligned}&(1 \times 2^{-1})+ (0 \times 2^{-2} ) + (1 \times 2^{-3} ) + (1 \times 2^{-4})\\=~&1/2~~~~~~~~~~+0/4~~~~~~~~~~+1/8~~~~~~~~~~+1/16\\=~&11/16\\=~&0.6875~~~~~~~~~~~~~~~decimal\end{aligned}</script><p><strong>Converting 0.625 to Binary</strong></p><script type="math/tex; mode=display">\begin{aligned}&&(0.625)&|&\times2&\\1&&(0.250)&|&\times2&\\0&&(0.500)&|&\times2&\\1&&(0.000)&|&&\\\end{aligned}</script><p>So <script type="math/tex">0.625_{10} = 0.101_2</script></p><h2 id="Binary-Arithmetic"><a href="#Binary-Arithmetic" class="headerlink" title="Binary Arithmetic"></a>Binary Arithmetic</h2><h3 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h3><p><strong>Remember to carry 1</strong></p><script type="math/tex; mode=display">\begin{aligned}&&0111\\&&+0001\\Carry&&1110\\&&=1000\end{aligned}</script><h3 id="Subtraction"><a href="#Subtraction" class="headerlink" title="Subtraction"></a>Subtraction</h3><p><strong>Remember to borrow at 1</strong></p><p>1000 - 0001</p><script type="math/tex; mode=display">\begin{aligned}&&1000\\After~Borrow&&100(10)\\-&&0001\\=&&0111\end{aligned}</script><h3 id="Physical-Storage"><a href="#Physical-Storage" class="headerlink" title="Physical Storage"></a>Physical Storage</h3><ul><li><p>These numbers are stored in the computer’s memory.</p></li><li><p>Each number represents one ‘bit’.</p></li><li><p>Computers used to use 8 bits (called a byte) but now use much larger memory units.</p></li><li><p>The largest binary number you can represent using a byte is 1111 1111 or <script type="math/tex">255_{10}</script>.</p></li></ul><ul><li>What if we had to add the following numbers on a computer which stores numbers as bytes:<ul><li>0111 1111 + 1    </li><li>1111 1111 + 1</li></ul></li><li>This is called overflow.</li><li>Notice how you will always have an overflow regardless of the number of bits available.</li></ul><h3 id="More-Arithmetic"><a href="#More-Arithmetic" class="headerlink" title="More Arithmetic"></a>More Arithmetic</h3><p>What if we had to subtract the following numbers:</p><ul><li><script type="math/tex; mode=display">0111 1111 - 1111 1111</script></li></ul><p>We need a way of storing negative numbers.</p><p>Simplest way to do this could be to assign the first bit to represent sign, called the sign bit. </p><p>Differentiating between overflow and negative numbers?</p><ul><li><p>What is the problem?</p></li><li><p>Overflow flag</p></li></ul><h3 id="Representing-Fractions"><a href="#Representing-Fractions" class="headerlink" title="Representing Fractions"></a>Representing Fractions</h3><ul><li>Decide where the fraction begins:<ul><li>[sign] xxxx.xxx </li><li>[sign] xxx.xxxx</li></ul></li><li>Called ‘fixed point representation’<ul><li>Wastes space</li><li>Trade Off between precision and range</li></ul></li></ul><h3 id="Representing-Characters"><a href="#Representing-Characters" class="headerlink" title="Representing Characters"></a>Representing Characters</h3><ul><li><p>All Characters have an associated numeric value.</p></li><li><p>This is called character encoding.</p></li><li><p>One early character encoding is ASCII </p><ul><li>“American Standard Code for Information Interchange”</li></ul></li><li>This did not contain languages other than English.</li><li>To overcome this, we now use UTF-8</li></ul><p><strong>By now, you should</strong></p><ul><li><p>Know what is binary, octal, hexadecimal</p></li><li><p>Be able to convert numbers from base[2,8,10,16] ⟷ base[2,8,10,16]</p></li><li><p>Be able to add and subtract in binary</p></li><li><p>Know how letters are stored on a computer</p></li><li><p>Know how numbers are stored on a computer (physically).</p></li></ul><h3 id="Storing-Negative-Numbers"><a href="#Storing-Negative-Numbers" class="headerlink" title="Storing Negative Numbers"></a>Storing Negative Numbers</h3><p>The use of a ‘sign bit’ to store negative numbers has problems:</p><p>Let’s use 4 bits (a nibble) to represent numbers with only a sign bit:</p><script type="math/tex; mode=display">\begin{aligned}&&{[+2]}_{10}→[0]{[010]}\\&&{[-2]}_{10}→[1]{[010]}\\&&Sum→[1]{[100]}\\Or&&[-4]_{10}&& Wrong\end{aligned}</script><ul><li><p>The use of a ‘sign bit’ to store negative numbers has problems:</p></li><li><p>Once again, let’s use 4 bits to represent numbers with only a sign bit. What are these numbers:</p><ul><li>[0] [000]</li><li>[1] [000]</li></ul></li><li>Having two representations of the same number (0) should be avoided.</li></ul><h3 id="2’s-complement"><a href="#2’s-complement" class="headerlink" title="2’s complement"></a>2’s complement</h3><ul><li><p>In addition to a sign bit, an n-bit negative number is also stored in 2’s complement</p><ul><li>The 2’s complement of a n-bit number is its complement wrt <script type="math/tex">2^n</script></li><li>which is: <script type="math/tex">2^n - (n~bit~number)</script></li><li>which is: n-bit number with bits “flipped” +1</li></ul></li><li><p>The 2’s complement of a n-bit number is its complement wrt <script type="math/tex">2^n</script></p><ul><li>0001’s 2’s complement is (when using a 4-bit word):<ul><li><script type="math/tex; mode=display">2^4 - 0001 = 10000 - 0001 = 1111</script></li><li>Or <script type="math/tex">0001 → 1110 + 1 = 1111</script></li></ul></li></ul></li><li><p>Another example:</p><ul><li>0101’s 4-bit 2’s complement is:<ul><li><script type="math/tex; mode=display">2^4 - 0101 = 10000 - 0101 = 1011</script></li><li>Or <script type="math/tex">0101 → 1010 + 1 = 1011</script></li></ul></li></ul></li><li><p>Another example 4-bit 2’s complement:</p><ul><li>3 + (-3)</li><li><p>0  011  +</p><p>  1 101</p></li><li><strong>1</strong> 0 000</li></ul></li><li><p>0 000 is zero, what about 1 000?</p></li><li><p>Another example:</p><ul><li><script type="math/tex; mode=display">-2 + -1</script></li><li><script type="math/tex; mode=display">+2 → [0 010]; -2 → [1 101 + 1] → [1 110]</script></li><li><script type="math/tex; mode=display">+1 → [0 001]; -1 → [1 110 + 1] → [1 111]</script></li><li><script type="math/tex; mode=display">  \begin{aligned}  carry&&11100\\  &&1110&+\\  &&1111&\\  &&11101&  \end{aligned}</script></li><li><script type="math/tex; mode=display">-3 → [ 1 100 + 1] → 1 101</script></li></ul></li><li><p>Another example (8-bit word):</p><ul><li><p>-2: 1 1111110</p></li><li><p>-6: 1 1111010</p></li><li><p>-2 + -6 :</p></li><li><script type="math/tex; mode=display">  \begin{aligned}  &&1 &&1111110&+\\  &&1 &&1111010&\\  carry&&1 1 &&1111100&\\  &&1 1 &&1111000&  \end{aligned}</script></li><li><p>-8: 1 1111000</p></li></ul></li><li><p>It is important to differentiate between an overflow and a carry.</p><ul><li>This can be done using the XOR of the two numbers.</li></ul></li></ul><h3 id="Fixed-Point-Representation"><a href="#Fixed-Point-Representation" class="headerlink" title="Fixed Point Representation"></a>Fixed Point Representation</h3><ul><li><p>Numerical precision</p><ul><li>The precision of a numeric value describes the number of digits that are used to show that value.</li><li>Only values that are an integer multiple of the smallest power of two can be represented exactly.</li></ul></li><li><p>Numerical range</p><ul><li>Increase in precision is at the expense of range (given the same word).</li></ul></li></ul><h3 id="Floating-point-representation"><a href="#Floating-point-representation" class="headerlink" title="Floating point representation"></a>Floating point representation</h3><ul><li>A method that prevents the architecture of the system from deciding on the tradeoff between precision and range<ul><li>This is left to the programmer</li></ul></li></ul><h3 id="Standard-Form-Scientific-Notation-Decimal"><a href="#Standard-Form-Scientific-Notation-Decimal" class="headerlink" title="Standard Form (Scientific Notation) - Decimal"></a>Standard Form (Scientific Notation) - Decimal</h3><ul><li><script type="math/tex; mode=display">100 = 1 \times 10^2</script><ul><li>(significand or mantissa) <script type="math/tex">\times</script> 10 <script type="math/tex">^ {(exponent)}</script></li></ul></li></ul><p><strong>NOTE:</strong> Do not confuse this mantissa with the mantissa in logarithms.</p><ul><li><script type="math/tex; mode=display">100=1\times10^2</script></li><li><script type="math/tex; mode=display">123=1.23\times10^2</script></li><li><script type="math/tex; mode=display">123.4=1.234\times10^2</script></li><li><script type="math/tex; mode=display">0.002=2\times10^{-3}</script></li></ul><h3 id="Standard-Form-Binary"><a href="#Standard-Form-Binary" class="headerlink" title="Standard Form - Binary"></a>Standard Form - Binary</h3><ul><li><script type="math/tex">100=1\times2^2</script>      ←MUST be in Binary</li><li><script type="math/tex; mode=display">100=1\times2^{10}</script></li><li><script type="math/tex; mode=display">101.01=1.0101\times2^{10}</script></li><li><script type="math/tex; mode=display">0.001=1\times2^{-11}</script></li></ul><h3 id="Floating-point-Binary"><a href="#Floating-point-Binary" class="headerlink" title="Floating point - Binary"></a>Floating point - Binary</h3><ul><li>Consider an 8-bit word:<ul><li>[sign bit] [sign of exponent] <ul><li>[exponent]                     →3 bits</li><li>[(fractional) mantissa]  →3 bits</li></ul></li></ul></li><li>The official IEEE definition is for 32 and 64 bits。</li><li>The exponent is an offset - We do NOT consider this.</li><li><script type="math/tex; mode=display">0.001=1\times2^{-11}</script><ul><li>01 011 000</li></ul></li><li><script type="math/tex; mode=display">0.0011 = 1.1 \times 2 ^{-11}</script><ul><li>0 1 011 100</li></ul></li><li><script type="math/tex; mode=display">101.01 = 1.0101 \times 2^{10}</script><ul><li>0 0 010 010</li></ul></li><li><p>sign sign [Zeros at Start] [Zeros at End]</p></li><li><p>WRONG!!! Zero</p><ul><li>0 0 000 000</li><li>1 0 000 000</li></ul></li><li>Zero → Correct<ul><li>0 1 000 000</li><li>1 1 000 000</li></ul></li><li>There are two representations for zero</li></ul><h3 id="Floating-point-Binary-Addition"><a href="#Floating-point-Binary-Addition" class="headerlink" title="Floating point - Binary (Addition)"></a>Floating point - Binary (Addition)</h3><ul><li><p>0 1 011 000 + 0 1 010 100 = 0 1 001 000</p></li><li><script type="math/tex; mode=display">0.001 = 1 \times 2^{-11}</script><ul><li>0 1 011 000</li></ul></li><li><script type="math/tex; mode=display">0.011 = 1.1 \times 2^{-10}</script><ul><li>0 1 010 100</li></ul></li><li><script type="math/tex; mode=display">0.100 = 1.0 \times 2^{-01}</script><ul><li>0 1 001 000</li></ul></li></ul><h3 id="Overflow-vs-Carry-in-2’s-complement"><a href="#Overflow-vs-Carry-in-2’s-complement" class="headerlink" title="Overflow vs Carry in 2’s complement"></a>Overflow vs Carry in 2’s complement</h3><p>Carry:</p><script type="math/tex; mode=display">\begin{aligned}&1~111~~+ \\&1~100  \\(1)&1~011\end{aligned}</script><p>Overflow:</p><script type="math/tex; mode=display">\begin{aligned}(-7)~~1001& \\+~(-6)~~1010& \\(-13)~~0011&~=~3\end{aligned}</script><h1 id="Computer-Architecture"><a href="#Computer-Architecture" class="headerlink" title="Computer Architecture"></a>Computer Architecture</h1><h2 id="From-Circuits-to-Binary"><a href="#From-Circuits-to-Binary" class="headerlink" title="From Circuits to Binary"></a>From Circuits to Binary</h2><h3 id="Summing-two-binary-numbers"><a href="#Summing-two-binary-numbers" class="headerlink" title="Summing two binary numbers:"></a>Summing two binary numbers:</h3><p>0 + 0 = (0) 0 </p><p>1 + 0 = (0) 1</p><p>0 + 1 = (0) 1</p><p>1 + 1 = (1) 0</p><h3 id="From-Circuits-to-Binary-1"><a href="#From-Circuits-to-Binary-1" class="headerlink" title="From Circuits to Binary"></a>From Circuits to Binary</h3><ul><li>Summing two binary numbers:<ul><li>0 + 0 = (0) 0         (series) parallel</li><li>1 + 0 = (0) 1         (and) or</li><li>0 + 1 = (0) 1</li><li>1 + 1 = (1) 1</li></ul></li><li>1 + 1 = (1) 1<ul><li>Using only series and parallel circuits would not work as shown by this last case. This last case also requires something called “NOT”. What we have explored, however, is an illustration of how circuits can be used for binary arithmetic.</li></ul></li></ul><h4 id="Non-numbers"><a href="#Non-numbers" class="headerlink" title="Non-numbers"></a>Non-numbers</h4><ul><li><p>Non-numbers are represented as numbers before storing.</p></li><li><p>A common mapping is called the ASCII table.</p></li><li><p>The extended ASCII table and UTF-8 includes non-english characters.</p></li></ul><h2 id="Little-man-computer"><a href="#Little-man-computer" class="headerlink" title="Little man computer"></a>Little man computer</h2><p>The Little Man Computer (LMC) is an instructional model of a computer, created by Dr. Stuart Madnick in 1965. The LMC is generally used to teach students, because it models a simple von Neumann architecture computer—which has all of the basic features of a modern computer. It can be programmed in machine code (albeit in decimal rather than binary) or assembly code.</p><p>The LMC model is based on the concept of a little man shut in a closed mail room (analogous to a computer in this scenario). At one end of the room, there are 100 mailboxes (memory), numbered 0 to 99, that can each contain a 3 digit instruction or data (ranging from 000 to 999). Furthermore, there are two mailboxes at the other end labeled INBOX and OUTBOX which are used for receiving and outputting data. In the center of the room, there is a work area containing a simple two function (addition and subtraction) calculator known as the Accumulator and a resettable counter known as the Program Counter. The Program Counter holds the address of the next instruction the Little Man will carry out. This Program Counter is normally incremented by 1 after each instruction is executed, allowing the Little Man to work through a program sequentially. Branch instructions allow iteration (loops) and conditional programming structures to be incorporated into a program. The latter is achieved by setting the Program Counter to a non-sequential memory address if a particular condition is met (typically the value stored in the accumulator being zero or positive).</p><p>As specified by the von Neumann architecture, each mailbox (signifying a unique memory location) contains both instructions and data. Care therefore needs to be taken to stop the Program Counter from reaching a memory address containing data - or the Little Man will attempt to treat it as an instruction. One can take advantage of this by writing instructions into mailboxes that are meant to be interpreted as code, to create self-modifying code. To use the LMC, the user loads data into the mailboxes and then signals the Little Man to begin execution, starting with the instruction stored at memory address zero. Resetting the Program Counter to zero effectively restarts the program, albeit in a potentially different state.</p><h3 id="Execution-cycle"><a href="#Execution-cycle" class="headerlink" title="Execution cycle"></a>Execution cycle</h3><p>To execute a program, the little man performs these steps:</p><ol><li>Check the Program Counter for the mailbox number that contains a program instruction (i.e. zero at the start of the program)</li><li>Fetch the instruction from the mailbox with that number. Each instruction contains two fields: An opcode (indicating the operation to perform) and the address field (indicating where to find the data to perform the operation on).</li><li>Increment the Program Counter (so that it contains the mailbox number of the next instruction)</li><li>Decode the instruction. If the instruction utilises data stored in another mailbox then use the address field to find the mailbox number for the data it will work on, e.g. ‘get data from mailbox 42’)</li><li>Fetch the data (from the input, accumulator, or mailbox with the address determined in step 4)</li><li>Execute the instruction based on the opcode given</li><li>Branch or store the result (in the output, accumulator, or mailbox with the address determined in step 4)</li><li>Return to the Program Counter to repeat the cycle or halt</li></ol><h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><p>While the LMC does reflect the actual workings of binary processors, the simplicity of decimal numbers was chosen to minimize the complexity for students who may not be comfortable working in binary / hexadecimal</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>Some LMC simulators are programmed directly using 3-digit numeric instructions and some use 3-letter mnemonic codes and labels. In either case, the instruction set is deliberately very limited (<em>typically about ten instructions</em>) to simplify understanding. If the LMC uses mnemonic codes and labels then these are converted into 3-digit numeric instructions when the program is assembled.</p><p>The table below shows a typical numeric instruction set and the equivalent mnemonic codes.</p><div class="table-container"><table><thead><tr><th>Instruction</th><th>Mnemonic</th><th>MachineCode</th></tr></thead><tbody><tr><td>Load</td><td>LDA</td><td>5xx</td></tr><tr><td>Store</td><td>STA</td><td>3xx</td></tr><tr><td>Add</td><td>ADD</td><td>1xx</td></tr><tr><td>Subtract</td><td>SUB</td><td>2xx</td></tr><tr><td>Input</td><td>INP</td><td>901</td></tr><tr><td>Output</td><td>OUT</td><td>902</td></tr><tr><td>End</td><td>HLT</td><td>000</td></tr><tr><td>Branch if zero</td><td>BRZ</td><td>7xx</td></tr><tr><td>Branch if zero or positive</td><td>BRP</td><td>8xx</td></tr><tr><td>Branch always</td><td>BRA</td><td>6xx</td></tr><tr><td>Data storage</td><td>DAT</td><td>-</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">Numeric code</th><th style="text-align:center">Mnemonic code</th><th style="text-align:center">Instruction</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:center">1xx</td><td style="text-align:center">ADD</td><td style="text-align:center">ADD</td><td style="text-align:left">Add the value stored in mailbox xx to whatever value is currently on the accumulator (calculator).Note: the contents of the mailbox are not changed, and the actions of the accumulator (calculator) are not defined for add instructions that cause sums larger than 3 digits. Similarly to SUBTRACT, one could set the negative flag on overflow.</td></tr><tr><td style="text-align:center">2xx</td><td style="text-align:center">SUB</td><td style="text-align:center">SUBTRACT</td><td style="text-align:left">Subtract the value stored in mailbox xx from whatever value is currently on the accumulator (calculator).Note: the contents of the mailbox are not changed, and the actions of the accumulator are not defined for subtract instructions that cause negative results - however, a negative flag will be set so that <strong>7xx (BRZ)</strong> and <strong>8xx (BRP)</strong> can be used properly.</td></tr><tr><td style="text-align:center">3xx</td><td style="text-align:center">STA</td><td style="text-align:center">STORE</td><td style="text-align:left">Store the contents of the accumulator in mailbox xx (destructive).Note: the contents of the accumulator (calculator) are not changed (non-destructive), but contents of mailbox are replaced regardless of what was in there (destructive)</td></tr><tr><td style="text-align:center">5xx</td><td style="text-align:center">LDA</td><td style="text-align:center">LOAD</td><td style="text-align:left">Load the value from mailbox xx (non-destructive) and enter it in the accumulator (destructive).</td></tr><tr><td style="text-align:center">6xx</td><td style="text-align:center">BRA</td><td style="text-align:center">BRANCH(unconditional)</td><td style="text-align:left">Set the program counter to the given address (value xx). That is, value xx will be the next instruction executed.</td></tr><tr><td style="text-align:center">7xx</td><td style="text-align:center">BRZ</td><td style="text-align:center">BRANCH IF ZERO (conditional)</td><td style="text-align:left">If the accumulator (calculator) contains the value 000, set the program counter to the value xx. Otherwise, do nothing. Whether the negative flag is taken into account is undefined. When a SUBTRACT underflows the accumulator, this flag is set, after which the accumulator is undefined, potentially zero, causing behavior of BRZ to be undefined on underflow. Suggested behavior would be to branch if accumulator is zero and negative flag is not set.Note: since the program is stored in memory, data and program instructions all have the same address/location format.</td></tr><tr><td style="text-align:center">8xx</td><td style="text-align:center">BRP</td><td style="text-align:center">BRANCH IF POSITIVE (conditional)</td><td style="text-align:left">If the accumulator (calculator) is 0 or positive, set the program counter to the value xx. Otherwise, do nothing. As LMC memory cells can only hold values between 0 and 999, this instruction depends solely on the negative flag set by an underflow on SUBTRACT and potentially on an overflow on ADD (undefined).Note: since the program is stored in memory, data and program instructions all have the same address/location format.</td></tr><tr><td style="text-align:center">901</td><td style="text-align:center">INP</td><td style="text-align:center">INPUT</td><td style="text-align:left">Go to the INBOX, fetch the value from the user, and put it in the accumulator (calculator)Note: this will overwrite whatever value was in the accumulator (destructive)</td></tr><tr><td style="text-align:center">902</td><td style="text-align:center">OUT</td><td style="text-align:center">OUTPUT</td><td style="text-align:left">Copy the value from the accumulator (calculator) to the OUTBOX.Note: the contents of the accumulator are not changed (non-destructive).</td></tr><tr><td style="text-align:center">000</td><td style="text-align:center">HLT/COB</td><td style="text-align:center">HALT/COFFEE BREAK</td><td style="text-align:left">Stop working/end the program.</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">DAT</td><td style="text-align:center">DATA</td><td style="text-align:left">This is an assembler instruction which simply loads the value into the next available mailbox. DAT can also be used in conjunction with labels to declare variables. For example, DAT 984 will store the value 984 into a mailbox at the address of the DAT instruction.</td></tr></tbody></table></div><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><h5 id="Using-Numeric-Instruction-Codes"><a href="#Using-Numeric-Instruction-Codes" class="headerlink" title="Using Numeric Instruction Codes"></a>Using Numeric Instruction Codes</h5><p>This program (instruction <strong>901</strong> to instruction <strong>000</strong>) is written just using numeric codes. The program takes two numbers as input and outputs the difference. Notice that execution starts at Mailbox 00 and finishes at Mailbox 07. The disadvantages of programming the LMC using numeric instruction codes are discussed below.</p><div class="table-container"><table><thead><tr><th style="text-align:center">Mailbox</th><th style="text-align:center">Numeric code</th><th style="text-align:center">Operation</th><th style="text-align:left">Comments</th></tr></thead><tbody><tr><td style="text-align:center">00</td><td style="text-align:center"><strong>901</strong></td><td style="text-align:center">INBOX —> ACCUMULATOR</td><td style="text-align:left">INPUT the first number, enter into calculator (erasing whatever was there)</td></tr><tr><td style="text-align:center">01</td><td style="text-align:center"><strong>308</strong></td><td style="text-align:center">ACCUMULATOR —> MEMORY[08]</td><td style="text-align:left">STORE the calculator’s current value (to prepare for the next step…)</td></tr><tr><td style="text-align:center">02</td><td style="text-align:center"><strong>901</strong></td><td style="text-align:center">INBOX —> ACCUMULATOR</td><td style="text-align:left">INPUT the second number, enter into calculator (erasing whatever was there)</td></tr><tr><td style="text-align:center">03</td><td style="text-align:center"><strong>309</strong></td><td style="text-align:center">ACCUMULATOR —> MEMORY[09]</td><td style="text-align:left">STORE the calculator’s current value (again, to prepare for the next step…)</td></tr><tr><td style="text-align:center">04</td><td style="text-align:center"><strong>508</strong></td><td style="text-align:center">MEMORY[08] —> ACCUMULATOR</td><td style="text-align:left">(Now that both INPUT values are STORED in Mailboxes 08 and 09…)LOAD the first value back into the calculator (erasing whatever was there)</td></tr><tr><td style="text-align:center">05</td><td style="text-align:center"><strong>209</strong></td><td style="text-align:center">ACCUMULATOR = ACCUMULATOR - MEMORY[09]</td><td style="text-align:left">SUBTRACT the second number from the calculator’s current value (which was just set to the first number)</td></tr><tr><td style="text-align:center">06</td><td style="text-align:center"><strong>902</strong></td><td style="text-align:center">ACCUMULATOR —> OUTBOX</td><td style="text-align:left">OUTPUT the calculator’s result to the OUTBOX</td></tr><tr><td style="text-align:center">07</td><td style="text-align:center"><strong>000</strong></td><td style="text-align:center">(no operation performed)</td><td style="text-align:left">HALT the LMC</td></tr></tbody></table></div><h3 id="Using-Mnemonics-and-Labels"><a href="#Using-Mnemonics-and-Labels" class="headerlink" title="Using Mnemonics and Labels"></a>Using Mnemonics and Labels</h3><p>Assembly language is a low-level programming language that uses mnemonics and labels instead of numeric instruction codes. Although the LMC only uses a limited set of mnemonics, the convenience of using a mnemonic for each instruction is made apparent from the assembly language of the same program shown below - the programmer is no longer required to memorize a set of anonymous numeric codes and can now program with a set of more memorable mnemonic codes. If the mnemonic is an instruction that involves a memory address (<em>either a branch instruction or loading/saving data</em>) then a label is used to name the memory address. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INP</span><br><span class="line">STA FIRST</span><br><span class="line">INP</span><br><span class="line">STA SECOND</span><br><span class="line">LDA FIRST</span><br><span class="line">SUB SECOND</span><br><span class="line">OUT</span><br><span class="line">HLT</span><br><span class="line">FIRST DAT</span><br><span class="line">SECOND DAT</span><br></pre></td></tr></table></figure><h3 id="Labels"><a href="#Labels" class="headerlink" title="Labels"></a>Labels</h3><p>Without labels the programmer is required to manually calculate mailbox (<em>memory</em>) addresses. In the <strong>numeric code example</strong>, if a new instruction was to be inserted before the final HLT instruction then that HLT instruction would move from address 07 to address 08 (address labelling starts at address location 00). Suppose the user entered 600 as the first input. The instruction 308 would mean that this value would be stored at address location 08 and overwrite the 000 (HLT) instruction. Since 600 means “branch to mailbox address 00” the program, instead of halting, would get stuck in an endless loop.</p><p>To work around this difficulty, most assembly languages (<em>including the LMC</em>) combine the mnemonics with <strong>labels</strong>. A label is simply a word that is used to either name a memory address where an instruction or data is stored, or to refer to that address in an instruction.</p><p>When a program is assembled:</p><ul><li>A label to the left of an instruction mnemonic is converted to the memory address the instruction or data is stored at. i.e. <strong>loopstart INP</strong></li><li>A label to the right of an instruction mnemonic takes on the value of the memory address referred to above. i.e. <strong>BRA loopstart</strong></li><li>A label combined with a DAT statement works as a variable, it labels the memory address that the data is stored at. i.e. <strong>one DAT 1</strong> or <strong>number1 DAT</strong></li></ul><p>In the <strong>assembly language</strong> which uses mnemonics and labels, if a new instruction was inserted before the final HLT instruction then the address location labelled FIRST would now be at memory location 09 rather than 08 and the STA FIRST instruction would be converted to 309 (STA 09) rather than 308 (STA 08) when the program was assembled.</p><p>Labels are therefore used to:</p><ul><li>identify a particular instruction as a target for a BRANCH instruction.</li><li>identify a memory location as a named variable (using DAT) and optionally load data into the program at assembly time for use by the program (this use is not obvious until one considers that there is no way of adding 1 to a counter. One could ask the user to input 1 at the beginning, but it would be better to have this loaded at the time of assembly using <strong>one DAT 1</strong>)</li></ul><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>This program will take a user input, and count down to zero.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     INP</span><br><span class="line">     OUT      &#x2F;&#x2F; Initialize output </span><br><span class="line">LOOP BRZ QUIT &#x2F;&#x2F; If the accumulator value is 0, jump to the memory address labeled QUIT</span><br><span class="line">     SUB ONE  &#x2F;&#x2F; Label this memory address as LOOP, The instruction will then subtract the value stored at address ONE from the accumulator</span><br><span class="line">     OUT</span><br><span class="line">     BRA LOOP &#x2F;&#x2F; Jump (unconditionally) to the memory address labeled LOOP</span><br><span class="line">QUIT HLT      &#x2F;&#x2F; Label this memory address as QUIT</span><br><span class="line">ONE  DAT 1    &#x2F;&#x2F; Store the value 1 in this memory address, and label it ONE (variable declaration)</span><br></pre></td></tr></table></figure><p>This program will take a user input, square it, output the answer and then repeat. Entering a zero will end the program.<br>(<strong>Note:</strong> <em>an input that results in an output greater than 999 will cause an error due to the LMC 3 digit number limit</em>).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">START   LDA ZERO     &#x2F;&#x2F; Initialize for multiple program run</span><br><span class="line">        STA RESULT</span><br><span class="line">        STA COUNT</span><br><span class="line">        INP          &#x2F;&#x2F; User provided input</span><br><span class="line">        BRZ END      &#x2F;&#x2F; Branch to program END if input &#x3D; 0</span><br><span class="line">        STA VALUE    &#x2F;&#x2F; Store input as VALUE</span><br><span class="line">LOOP    LDA RESULT   &#x2F;&#x2F; Load the RESULT</span><br><span class="line">        ADD VALUE    &#x2F;&#x2F; Add VALUE, the user provided input, to RESULT</span><br><span class="line">        STA RESULT   &#x2F;&#x2F; Store the new RESULT</span><br><span class="line">        LDA COUNT    &#x2F;&#x2F; Load the COUNT</span><br><span class="line">        ADD ONE      &#x2F;&#x2F; Add ONE to the COUNT</span><br><span class="line">        STA COUNT    &#x2F;&#x2F; Store the new COUNT</span><br><span class="line">        SUB VALUE    &#x2F;&#x2F; Subtract the user provided input VALUE from COUNT</span><br><span class="line">        BRZ ENDLOOP  &#x2F;&#x2F; If zero (VALUE has been added to RESULT </span><br><span class="line">         &#x2F;&#x2F; by VALUE times), branch to ENDLOOP</span><br><span class="line">        BRA LOOP     &#x2F;&#x2F; Branch to LOOP to continue adding VALUE to RESULT</span><br><span class="line">ENDLOOP LDA RESULT   &#x2F;&#x2F; Load RESULT</span><br><span class="line">        OUT          &#x2F;&#x2F; Output RESULT</span><br><span class="line">        BRA START    &#x2F;&#x2F; Branch to the START to initialize </span><br><span class="line">         &#x2F;&#x2F; and get another input VALUE</span><br><span class="line">END     HLT          &#x2F;&#x2F; HALT - a zero was entered so done!</span><br><span class="line">RESULT  DAT          &#x2F;&#x2F; Computed result (defaults to 0)</span><br><span class="line">COUNT   DAT          &#x2F;&#x2F; Counter (defaults to 0)</span><br><span class="line">ONE     DAT 1        &#x2F;&#x2F; Constant, value of 1</span><br><span class="line">VALUE   DAT          &#x2F;&#x2F; User provided input, the value to be squared (defaults to 0)</span><br><span class="line">ZERO    DAT          &#x2F;&#x2F; Constant, value of 0 (defaults to 0)</span><br></pre></td></tr></table></figure><p><em>Note: If there is no data after a DAT statement then the default value 0 is stored in the memory address.</em></p><p>In the example above, [BRZ ENDLOOP] depends on undefined behaviour, as COUNT-VALUE can be negative, after which the ACCUMULATOR value is undefined, resulting in BRZ either branching or not (ACCUMULATOR may be zero, or wrapped around). To make the code compatible with the specification, replace:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">LDA COUNT    &#x2F;&#x2F; Load the COUNT</span><br><span class="line">ADD ONE      &#x2F;&#x2F; Add ONE to the COUNT</span><br><span class="line">STA COUNT    &#x2F;&#x2F; Store the new COUNT</span><br><span class="line">SUB VALUE    &#x2F;&#x2F; Subtract the user provided input VALUE from COUNT</span><br><span class="line">BRZ ENDLOOP  &#x2F;&#x2F; If zero (VALUE has been added to RESULT </span><br><span class="line"> &#x2F;&#x2F; by VALUE times), branch to ENDLOOP</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>with the following version, which does VALUE-COUNT instead of COUNT-VALUE, making sure the accumulator never underflows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">LDA COUNT    &#x2F;&#x2F; Load the COUNT</span><br><span class="line">ADD ONE      &#x2F;&#x2F; Add ONE to the COUNT</span><br><span class="line">STA COUNT    &#x2F;&#x2F; Store the new COUNT</span><br><span class="line">LDA VALUE    &#x2F;&#x2F; Load the VALUE</span><br><span class="line">SUB COUNT    &#x2F;&#x2F; Subtract COUNT from the user provided </span><br><span class="line"> &#x2F;&#x2F; input VALUE</span><br><span class="line">BRZ ENDLOOP  &#x2F;&#x2F; If zero (VALUE has been added to RESULT</span><br><span class="line"> &#x2F;&#x2F; by VALUE times), branch to ENDLOOP</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Another example is a quine, printing its own machine code (printing source is impossible because letters cannot be outputted):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">LOAD LDA 0     &#x2F;&#x2F; Load position 0 into the accumulator. </span><br><span class="line">   &#x2F;&#x2F; This line will be modified on each loop </span><br><span class="line">   &#x2F;&#x2F; to load the next lines into the accumulator</span><br><span class="line">     OUT       &#x2F;&#x2F; Output the accumulator&#39;s value. The accumulator&#39;s </span><br><span class="line">         &#x2F;&#x2F; value will be the line that was just loaded</span><br><span class="line">     SUB ONE   &#x2F;&#x2F; Subtract 1 from the value in the accumulator. </span><br><span class="line">         &#x2F;&#x2F; This is so we can do the BRZ in the next step </span><br><span class="line">         &#x2F;&#x2F; to see if we are on the last line in the program</span><br><span class="line">     BRZ ONE   &#x2F;&#x2F; If the previous subtraction has made the </span><br><span class="line">         &#x2F;&#x2F; accumulator 0 (which means we had the value 001 </span><br><span class="line">         &#x2F;&#x2F; in the accumulator), then branch to position ONE</span><br><span class="line">     LDA LOAD  &#x2F;&#x2F; Load the LOAD position into the accumulator, </span><br><span class="line">         &#x2F;&#x2F; this is in preparation to increment the address</span><br><span class="line">               &#x2F;&#x2F; digits for this position</span><br><span class="line">     ADD ONE   &#x2F;&#x2F; Increment the position digits for the LOAD line. </span><br><span class="line">         &#x2F;&#x2F; The value currently in the accumulator would, </span><br><span class="line">         &#x2F;&#x2F; if read as an instruction, load the next line </span><br><span class="line">         &#x2F;&#x2F; into the accumulator, compared to the last </span><br><span class="line">         &#x2F;&#x2F; line loaded</span><br><span class="line">     STA LOAD  &#x2F;&#x2F; Store the newly incremented LOAD line back </span><br><span class="line">         &#x2F;&#x2F; in the LOAD position</span><br><span class="line">     BRA LOAD  &#x2F;&#x2F; Return to the beginning of the loop</span><br><span class="line">ONE  DAT 1     &#x2F;&#x2F; The variable 1. If read as an instruction, </span><br><span class="line">    &#x2F;&#x2F; this will be interpreted as HLT&#x2F;COB and will </span><br><span class="line">    &#x2F;&#x2F; end the program</span><br></pre></td></tr></table></figure><p>This quine works using self-modifying code. Position 0 is incremented by on each loop, outputting that line’s code, until the code it is outputting is 1, at which point it branches to the ONE position. The ONE position begins with a 0, so it is interpreted as a HALT/COB instruction.</p><h2 id="Von-Neumann-architecture"><a href="#Von-Neumann-architecture" class="headerlink" title="Von Neumann architecture"></a>Von Neumann architecture</h2><div class="table-container"><table><thead><tr><th>Instruction</th><th>Mnemonic</th><th>MachineCode</th></tr></thead><tbody><tr><td>Load</td><td>LDA</td><td>5xx</td></tr><tr><td>Store</td><td>STA</td><td>3xx</td></tr><tr><td>Add</td><td>ADD</td><td>1xx</td></tr><tr><td>Subtract</td><td>SUB</td><td>2xx</td></tr><tr><td>Input</td><td>INP</td><td>901</td></tr><tr><td>Output</td><td>OUT</td><td>902</td></tr><tr><td>End</td><td>HLT</td><td>000</td></tr><tr><td>Branch if zero</td><td>BRZ</td><td>7xx</td></tr><tr><td>Branch if zero or positive</td><td>BRP</td><td>8xx</td></tr><tr><td>Branch always</td><td>BRA</td><td>6xx</td></tr><tr><td>Data storage</td><td>DAT</td><td>-</td></tr></tbody></table></div><h3 id="Von-Neumann-architecture-CPU"><a href="#Von-Neumann-architecture-CPU" class="headerlink" title="Von Neumann architecture - CPU"></a>Von Neumann architecture - CPU</h3><ul><li><p>The Central Processing Unit (CPU)</p></li><li><p>Consists of</p><ul><li>Control Unit</li><li>Arithmetic and Logical Unit (ALU)</li><li>Registers<ul><li>Program counter</li><li>Instruction Register</li><li>Address Register</li><li>Accumulator</li></ul></li></ul></li><li>Bus<ul><li>Control bus</li><li>Data bus</li><li>Address bus</li></ul></li><li>RAM</li><li>Input/Output</li><li><p>Clock Cycle</p><ul><li>A signal that oscillates between high and low used to synchronise (coordinate) actions.</li><li>The number of cycles that a CPU uses per second is used to determine its speed.<ul><li>This is measured in <strong>megahertz (MHz)</strong> and <strong>gigahertz (GHz)</strong></li></ul></li></ul></li><li><p>Instruction Cycle</p><ul><li>Is the execution process which consists of:<ul><li>Fetch - fetching the relevant instruction.</li><li>Decode - decode the instruction to determine what to do.</li><li>Execute - The actual execution of the statement.</li></ul></li></ul></li><li>Also called the fetch-decode-execute cycle or the fetch-execute cycle.</li></ul><h4 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h4><ul><li><p>Inspect the program counter to find the address of the next instruction</p></li><li><p>Load the next instruction from memory into the instruction register</p></li><li><p>Update the program counter to point at the next instruction</p></li></ul><h4 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h4><ul><li><p>Determine the type of instruction fetched</p></li><li><p>If the instruction requires data from memory, determine its address</p></li></ul><h4 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h4><ul><li><p>Fetch any required data from memory into one of the CPU registers</p></li><li><p>Execute the instruction</p></li><li><p>Fetch the next instruction …</p></li></ul><h4 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h4><ol><li><p>Variables</p></li><li><p>Branching to Loops</p></li><li><p>Functions of Subroutines</p></li></ol><h3 id="The-Little-Man-Computer"><a href="#The-Little-Man-Computer" class="headerlink" title="The Little Man Computer"></a>The Little Man Computer</h3><h4 id="The-Little-Man-Computer-Add"><a href="#The-Little-Man-Computer-Add" class="headerlink" title="The Little Man Computer - Add"></a>The Little Man Computer - Add</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Output the sum of two numbers </span><br><span class="line">INP </span><br><span class="line">STA 99 </span><br><span class="line">INP </span><br><span class="line">ADD 99 </span><br><span class="line">OUT </span><br><span class="line">HLT</span><br></pre></td></tr></table></figure><h4 id="The-Little-Man-Computer-Add-Variable"><a href="#The-Little-Man-Computer-Add-Variable" class="headerlink" title="The Little Man Computer - Add (Variable)"></a>The Little Man Computer - Add (Variable)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Output the sum of two numbers</span><br><span class="line">INP </span><br><span class="line">STA FIRST</span><br><span class="line">INP </span><br><span class="line">ADD FIRST </span><br><span class="line">OUT </span><br><span class="line">HLT </span><br><span class="line">FIRST DAT</span><br></pre></td></tr></table></figure><h4 id="LMC-Branching"><a href="#LMC-Branching" class="headerlink" title="LMC - Branching"></a>LMC - Branching</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">        INP</span><br><span class="line">        STA FIRST</span><br><span class="line">        INP</span><br><span class="line">        STA SECOND</span><br><span class="line">        INP</span><br><span class="line">        STA THIRD</span><br><span class="line">        BRZ ADDNUMS</span><br><span class="line">        LDA FIRST</span><br><span class="line">        SUB SECOND</span><br><span class="line">        OUT</span><br><span class="line">        HLT</span><br><span class="line">ADDNUMSLDA FIRST</span><br><span class="line">        ADD SECOND</span><br><span class="line">        OUT</span><br><span class="line">        HLT</span><br><span class="line">        FIRST DAT</span><br><span class="line">        SECOND DAT</span><br><span class="line">        THIRD DAT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">00 INP</span><br><span class="line">01 STA FIRST</span><br><span class="line">02 INP</span><br><span class="line">03 STA SECOND</span><br><span class="line">04 INP</span><br><span class="line">05 STA THIRD</span><br><span class="line">06 BRZ 11</span><br><span class="line">07 LDA FIRST</span><br><span class="line">08 SUB SECOND</span><br><span class="line">09 OUT</span><br><span class="line">10 HLT</span><br><span class="line">11 LDA FIRST</span><br><span class="line">12 ADD SECOND</span><br><span class="line">13 OUT</span><br><span class="line">14 HLT</span><br><span class="line">15 FIRST DAT</span><br><span class="line">16 SECOND DAT</span><br><span class="line">17 THIRD DAT</span><br></pre></td></tr></table></figure><h4 id="LMC-Branching-Cleaner-code-1"><a href="#LMC-Branching-Cleaner-code-1" class="headerlink" title="LMC - Branching [Cleaner code 1]"></a>LMC - Branching [Cleaner code 1]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">        INP</span><br><span class="line">        STA FIRSTINP</span><br><span class="line">        INP</span><br><span class="line">        STA SECONDINP</span><br><span class="line">        INP</span><br><span class="line">        STA WHAT_TO_DO</span><br><span class="line">        BRZ ADDNUMS</span><br><span class="line">        LDA FIRSTINP</span><br><span class="line">        SUB SECONDINP</span><br><span class="line">        OUT</span><br><span class="line">        BRA END</span><br><span class="line">ADDNUMSLDA FIRSTINP</span><br><span class="line">        ADD SECONDINP</span><br><span class="line">        OUT</span><br><span class="line">END HLT</span><br><span class="line">        FIRSTINP DAT</span><br><span class="line">        SECONDINP DAT</span><br><span class="line">        WHAT_TO_DO DAT</span><br></pre></td></tr></table></figure><h4 id="LMC-Branching-Cleaner-code-2"><a href="#LMC-Branching-Cleaner-code-2" class="headerlink" title="LMC - Branching [Cleaner code 2]"></a>LMC - Branching [Cleaner code 2]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">            INP</span><br><span class="line">            STA FIRSTINP</span><br><span class="line">            INP</span><br><span class="line">            STA SECONDINP</span><br><span class="line">            INP</span><br><span class="line">            STA WHAT_TO_DO</span><br><span class="line">            BRZ ADD_NUMS</span><br><span class="line">            BRA SUB_NUMS</span><br><span class="line">            BRA END</span><br><span class="line">ADD_NUMS LDA FIRSTINP</span><br><span class="line">            ADD SECONDINP</span><br><span class="line">            OUT</span><br><span class="line">            BRA END</span><br><span class="line">SUB_NUMS LDA FIRSTINP</span><br><span class="line">            SUB SECONDINP</span><br><span class="line">            OUT</span><br><span class="line">            BRA END</span><br><span class="line">END HLT</span><br><span class="line">            FIRSTINP DAT</span><br><span class="line">            SECONDINP DAT</span><br><span class="line">            WHAT_TO_DO DAT</span><br></pre></td></tr></table></figure><h4 id="LMC-Loops"><a href="#LMC-Loops" class="headerlink" title="LMC - Loops"></a>LMC - Loops</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     INP</span><br><span class="line">     STA A</span><br><span class="line">LOOP OUT</span><br><span class="line">     ADD A</span><br><span class="line">     BRA LOOP</span><br><span class="line">     A DAT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    INP</span><br><span class="line">    STA A</span><br><span class="line">L OUT</span><br><span class="line">    ADD A</span><br><span class="line">    STA B</span><br><span class="line">    SUB C</span><br><span class="line">    BRP E</span><br><span class="line">    LDA B</span><br><span class="line">    BRA L</span><br><span class="line">E HLT</span><br><span class="line">A DAT</span><br><span class="line">B DAT</span><br><span class="line">C DAT 100</span><br></pre></td></tr></table></figure><h4 id="LMC-Practice-Problems"><a href="#LMC-Practice-Problems" class="headerlink" title="LMC Practice Problems"></a>LMC Practice Problems</h4><ul><li><p>Write a program to divide the first input number by the second input number.</p><p>  <strong>NOTE:</strong> Division by repeated subtraction</p></li><li><p>Write a program to multiply two input numbers (by repeated addition)</p></li><li><p>Write a program to generate the first 10 Fibonacci numbers:</p></li></ul><h4 id="Babbage’s-Analytical-Engine"><a href="#Babbage’s-Analytical-Engine" class="headerlink" title="Babbage’s Analytical Engine"></a>Babbage’s Analytical Engine</h4><p>The Analytical engine was a proposed mechanical general-purpose computer<br>designed by English mathematician and computer pioneer Charles Babbage.</p><h2 id="High-Level-Programming-Languages"><a href="#High-Level-Programming-Languages" class="headerlink" title="High-Level Programming Languages"></a>High-Level Programming Languages</h2><h3 id="The-compiler"><a href="#The-compiler" class="headerlink" title="The compiler"></a>The compiler</h3><ul><li>A program that converts programs written in “high-level” languages to machine code.</li></ul><h3 id="Linking"><a href="#Linking" class="headerlink" title="Linking"></a>Linking</h3><ul><li>A program might make use of libraries - code prewritten to perform specific tasks, or OS specific libraries - often contained in several different files.<ul><li>A Linker, links “symbols” (variables and function names) across such files.</li></ul></li></ul><h3 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h3><ul><li>Parsing is the process of going through a program and ensuring that the syntax of the program is correct. <ul><li>Both compilers and interpreters perform this step.</li></ul></li><li>In addition to checking for correctness the parse also extracts information from the program (such as variables, constants, … )</li></ul><h3 id="Interpreter"><a href="#Interpreter" class="headerlink" title="Interpreter"></a>Interpreter</h3><ul><li>An interpreter is a program that performs what a program written in a high-level language expresses without first converting it into machine code.<ul><li>Some interpreters convert programs into an intermediary representation before “executing” the program.</li></ul></li></ul><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><ul><li>Loads programs and data to memory for execution.</li><li>Often a sub-task of the OS</li></ul><h3 id="The-Role-of-the-Operating-System"><a href="#The-Role-of-the-Operating-System" class="headerlink" title="The Role of the Operating System"></a>The Role of the Operating System</h3><ul><li>Loading and Scheduling</li><li>“Virtual Memory”</li></ul><h3 id="The-problem-with-security"><a href="#The-problem-with-security" class="headerlink" title="The problem with security"></a>The problem with security</h3><ul><li>A need for “Better” programs online</li><li>Downloadable programs<ul><li>Security</li></ul></li><li>The “Jail”</li><li>Platform independence</li></ul><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul><li>The <u>Java Virtual Machine</u><ul><li>What is a virtual machine</li><li>Why do we need a virtual machine</li></ul></li><li>Security through a virtual machine</li><li>Platform independence</li></ul><h1 id="Java-Virtual-Machine"><a href="#Java-Virtual-Machine" class="headerlink" title="Java Virtual Machine"></a>Java Virtual Machine</h1><h2 id="Foundation-1"><a href="#Foundation-1" class="headerlink" title="Foundation"></a>Foundation</h2><h3 id="Lists-or-Arrays"><a href="#Lists-or-Arrays" class="headerlink" title="Lists or Arrays"></a>Lists or Arrays</h3><ul><li>A sequential “list” of variables<ul><li>Used to be restricted by the type of variable</li></ul></li><li>Removes the need to remember independent variables</li><li>Variables of a single “type” can be clubbed together</li></ul><h4 id="Elements-in-an-Array"><a href="#Elements-in-an-Array" class="headerlink" title="Elements in an Array"></a>Elements in an Array</h4><ul><li>If a is an array</li><li>a[0] is an element</li><li>0 is the index</li><li>0 can be replaced by any number upto length - 1</li><li>0 can be replaced by a variable.</li></ul><h3 id="Memory-Leaks"><a href="#Memory-Leaks" class="headerlink" title="Memory Leaks"></a>Memory Leaks</h3><h2 id="Data-structure"><a href="#Data-structure" class="headerlink" title="Data structure"></a>Data structure</h2><h3 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h3><ul><li>Abstraction</li><li>Like a stack of paper</li><li>First In Last Out (FILO)</li><li>Often implemented through lists</li><li>Add element by “Pushing”</li><li>Remove element by “Popping”</li></ul><h3 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h3><ul><li>Abstraction</li><li>Like standing in a Queue</li><li>First in First out (FIFO)</li><li>Has the same push and pop functions available</li><li>Implemented through a list</li></ul><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><ul><li>What is a function?</li><li>Functions as bricks</li><li>Why functions?</li><li>“Calling a function”</li><li>Passing values to a function</li><li>Return Values</li><li>Sub-programs</li><li>Methods</li></ul><h3 id="Calling-Functions"><a href="#Calling-Functions" class="headerlink" title="Calling Functions"></a>Calling Functions</h3><ul><li>Storing the values of passed “parameters”</li><li>Recursive functions - functions that call themselves</li><li>The call stack</li><li>Returning values</li><li>Returning to where the function was called from</li></ul><h3 id="Passing-parameters-by-Value-and-Reference"><a href="#Passing-parameters-by-Value-and-Reference" class="headerlink" title="Passing parameters by Value and Reference"></a>Passing parameters by Value and Reference</h3><ul><li>Editable vs non-editable parameters</li><li>A copy vs a reference to the memory location</li><li>Which is which </li></ul><h3 id="The-Call-Stack"><a href="#The-Call-Stack" class="headerlink" title="The Call Stack"></a>The Call Stack</h3><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><p>Recursion (adjective: recursive) occurs when a thing is defined in terms of itself or of its type. Recursion is used in a variety of disciplines ranging from linguistics to logic. The most common application of recursion is in mathematics and computer science, where a function being defined is applied within its own definition. While this apparently defines an infinite number of instances (function values), it is often done in such a way that no loop or infinite chain of references can occur.</p><h3 id="General-Notes-on-Programming"><a href="#General-Notes-on-Programming" class="headerlink" title="General Notes on Programming"></a>General Notes on Programming</h3><ul><li>Writing clear and understandable code is more important that using “smart tricks”</li><li>Always indent code.</li><li>Always use variable names that make sense.<ul><li>Same with method/function names</li></ul></li><li>If you are asked to write a program in this course - you WILL lose points for not<br>  indenting, not using comments, not using good variable/method names</li></ul><h3 id="Mathematical-Expressions-BODMAS"><a href="#Mathematical-Expressions-BODMAS" class="headerlink" title="Mathematical Expressions - BODMAS"></a>Mathematical Expressions - BODMAS</h3><script type="math/tex; mode=display">1+3\times2</script><script type="math/tex; mode=display">1-7+8</script><p><strong>Infix: </strong></p><script type="math/tex; mode=display">1+(3 \times 2)</script><script type="math/tex; mode=display">1-7+8</script><p>Know as “infix expression”</p><h3 id="Reverse-Polish-notation"><a href="#Reverse-Polish-notation" class="headerlink" title="Reverse Polish notation"></a>Reverse Polish notation</h3><p>Reverse Polish notation (RPN), also known as Polish postfix notation or simply postfix notation, is a mathematical notation in which operators follow their operands.</p><script type="math/tex; mode=display">((15 \div (7 − (1 + 1))) \times 3) − (2 + (1 + 1))</script><script type="math/tex; mode=display">15~~7~~1~~1~~+~~− ~~\div ~~3 ~~\times ~~2~~1~~1~~+~~+~~−</script><h4 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h4><ul><li><p>Example 1:</p><ul><li><script type="math/tex; mode=display">5 + 3 \times 6 \times ( 8 \times 2 + 1 )</script></li><li><script type="math/tex; mode=display">5~~3~~6~~\times~~8~~2~~\times~~1~~+~~\times~~+</script></li></ul></li><li><p>Example 2:</p><ul><li><script type="math/tex; mode=display">1 + 2 \times 6 \div (8 + 32) \times 4</script></li><li><script type="math/tex; mode=display">1~~2~~6~~\times~~8~~3~~2~~+~~\div~~4~~\times~~+</script></li></ul></li></ul><h4 id="Shunting-yard-algorithm"><a href="#Shunting-yard-algorithm" class="headerlink" title="Shunting-yard algorithm"></a>Shunting-yard algorithm</h4><p>Converts infix to postfix (Reverse Polish Notation)</p><p>Developed by Edsger Dijkstra who formalised computer science in the early 1970s.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">While there are tokens to be read:</span><br><span class="line">Read a token</span><br><span class="line"> If it&#39;s a number add it to queue</span><br><span class="line">If it&#39;s an operator</span><br><span class="line">While there&#39;s an operator on the top of the stack with greater precedence:</span><br><span class="line">Pop operators from the stack onto the output queue</span><br><span class="line">Push the current operator onto the stack</span><br><span class="line">If it&#39;s a left bracket push it onto the stack</span><br><span class="line">If it&#39;s a right bracket</span><br><span class="line">While there&#39;s not a left bracket at the top of the stack:</span><br><span class="line">Pop operators from the stack onto the output queue.</span><br><span class="line">Pop the left bracket from the stack and discard it</span><br><span class="line">While there are operators on the stack, pop them to the queue</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (there are tokens to be read) &#123;</span><br><span class="line">    Read a token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it is a number) &#123;</span><br><span class="line">        add it to queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it is an operator) &#123;</span><br><span class="line">        <span class="keyword">while</span> (there is an operator on the top </span><br><span class="line">                    of the stack with greater precedence) &#123;</span><br><span class="line">            Pop operators from the stack onto the output queue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Push the current operator onto the stack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it is a left bracket) &#123;</span><br><span class="line">        push it onto the stack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it is a right bracket) &#123;</span><br><span class="line">        <span class="keyword">while</span> (there is not a left bracket at the top of the stack) &#123;</span><br><span class="line">            Pop operators from the stack onto the output queue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Pop the left bracket from the stack and discard it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (there are operators on the stack) </span><br><span class="line">    pop them to the queue;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Number Systems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Computer 
      
    
    </summary>
    
    
      <category term="Principles of Computer Organization" scheme="http://yoursite.com/categories/Principles-of-Computer-Organization/"/>
    
    
      <category term="CS" scheme="http://yoursite.com/tags/CS/"/>
    
      <category term="Principles of Computer Organization" scheme="http://yoursite.com/tags/Principles-of-Computer-Organization/"/>
    
  </entry>
  
</feed>
